<!DOCTYPE HTML>
<html class="formal-specification status-work-in-progress anolis" lang=en>
<meta charset=utf-8>
<title>SuikaWiki Markup Language (SWML)</title>
<link rel=stylesheet href=spec.css>

<header>
<hgroup>
<h1 class="no-toc no-num">SuikaWiki Markup Language (SWML)</h1>
<h2 class="no-toc no-num">SuikaWiki Project, [DATE]</h2>
</hfroup>

<dl>

<dt>Latest version
<dd><a href="https://suikawiki.github.io/spec-swml/spec/">https://suikawiki.github.io/spec-swml/spec/</a>

<dt>Version history
<dd><a href="https://github.com/suikawiki/spec-swml/commits/gh-pages">https://github.com/suikawiki/spec-swml/commits/gh-pages</a>

</dl>

</header>

<section id=abstract>
<h1 class="no-toc no-num">Abstract</h1>

<p>This document defines the SWML syntax and the SWML vocabulary.
</section>

<section>
<h1 class="no-toc no-num">Table of contents</h1>

<!-- toc -->
</section>

<section>
<h1>Introduction</h1>

<p><em>This section is non-normative.</em>

<p>This specification defines <dfn>SuikaWiki Markup Language</dfn>
(<dfn>SWML</dfn>).  SWML is the markup language developed and
implemented
for <a href="https://wiki.suikawiki.org/n/SuikaWiki">SuikaWiki</a>
hypertext system.  It is also used by other systems as a
human-friendly document authoring format.

<section>
<h1>History</h1>

<p>SuikaWiki's Wiki syntax (now known as <span>SWML text
serialization</span>) derived
from <a href="https://web.archive.org/web/20130124134737/http://digit.que.ne.jp/work/index.cgi?WalWiki">WalWiki</a>,
which derived
from <a href="http://www.hyuki.com/yukiwiki/">YukiWiki</a>,
in <time>2002</time>.

<p>The first specification of the extended
language, <a href="https://wiki.suikawiki.org/n/SuikaWiki%2F0.9"><cite>SuikaWiki/0.9
Document Markup Format: Syntax Specification</cite></a>, was published
in <time>2003-12-12</time> and was frequently updated
until <time>2006-05-05</time>.

<p>Then several updates to the language, known as SuikaWiki/0.10, were
(incompletely) defined by following documents:

<ul>

<li><a href="https://suika.suikawiki.org/~wakaba/wiki/sw/n/SuikaWiki+0%2E10">SuikaWiki/0.10</a>,
<time>2005-05-31</time>.

<li><a href="https://suika.suikawiki.org/~wakaba/wiki/sw/n/SuikaWiki+0%2E10++1++1">SuikaWiki/0.10
&mdash; Inline Element Type Additions</a>, <time>2005-05-31</time>.

<li><a href="https://suika.suikawiki.org/~wakaba/wiki/sw/n/SuikaWiki+0.10++1++3">SuikaWiki/0.10
&mdash; Language Tags</a>, <time>2005-05-31</time>.

<li><a href="https://suika.suikawiki.org/~wakaba/wiki/sw/n/SuikaWiki+0%2E10++1++5">SuikaWiki/0.10
&mdash; Block‐level Additional Vocabulary</a>,
<time>2005-11-18</time>.

<!-- [TIME[][]] is added to SuikaWiki/0.10 later, but has never
documented and never implemented in SuikaWiki3 -->

</ul>

<p>These "two" versions of the language was merged and rewritten
as <em>the</em> SWML specification in 2008.

<p>Previous versions of the SWML specification were published at
<a href="https://suika.suikawiki.org/www/markup/suikawiki/spec/swml-work">https://suika.suikawiki.org/www/markup/suikawiki/spec/swml-work</a>.<!-- https://suika.suikawiki.org/gate/cvs/markup/suikawiki/spec/swml-work-src.en.html.u8
-->

<p>There
is <a href="https://suika.suikawiki.org/%7Ewakaba/wiki/sw/n/SWML%20possible%20new%20features">an
obsolete list of possible new features</a> that might have been
introduced in a revision of this specification.

<p>Revisions of the SWML specification are now available in the
<a href="https://github.com/suikawiki/spec-swml/commits/gh-pages">GitHub
repository</a>.

</section>

</section>

<section>
<h1>Terminology</h1>

<p>This specification depends on the
<a href=https://infra.spec.whatwg.org/>Infra Standard</a>.

<section>
<h1>Namespaces</h1>

<p>For historical reason,
different <span title=element>elements</span>
and <span title=attribute>attributes</span> defined or used in this
specification belong to
different <span title=namespace>namespaces</span>.

<p>The <dfn>AA namespace</dfn> is
<code>http://pc5.2ch.net/test/read.cgi/hp/1096723178/aavocab#</code>.
The <span>preferred prefix</span>
is <dfn title=prefix-aa><code>aa</code></dfn>.
The <dfn><code>aa</code></dfn> <span>element</span> is defined by
<a href=https://pc5.5ch.net/test/read.cgi/hp/1096723178/16><cite lang=ja>Strict-HTML
スレッド24</cite> >>16</a>.

<p>The <span>HTML namespace</span>'s <span>preferred prefix</span>
is <dfn title=prefix-html><code>html</code></dfn>.

<p>Following <span title=element>elements</span> are defined by
the <a href="https://html.spec.whatwg.org/"><cite>HTML
Standard</cite></a>:

<ul class=short>
  <li><dfn><code>abbr</code></dfn>
  <li><dfn><code>b</code></dfn>
  <li><dfn><code>blockquote</code></dfn>
  <li><dfn title=element-html-body><code>body</code></dfn>
  <li><dfn><code>cite</code></dfn>
  <li><dfn><code>code</code></dfn>
  <li><a href=https://html.spec.whatwg.org/#the-data-element><dfn><code>data</code></dfn></a>
  <li><dfn><code>dd</code></dfn>
  <li><dfn><code>del</code></dfn>
  <li><dfn><code>dfn</code></dfn>
  <li><dfn><code>div</code></dfn>
  <li><dfn><code>dt</code></dfn>
  <li><dfn><code>dl</code></dfn>
  <li><dfn><code>em</code></dfn>
  <li><dfn><code>figcaption</code></dfn>
  <li><dfn><code>figure</code></dfn>
  <li><dfn><code>h1</code></dfn>
  <li><dfn><code>head</code></dfn>
  <li><dfn><code>hr</code></dfn>
  <li><dfn><code>html</code></dfn>
  <li><dfn><code>i</code></dfn>
  <li><dfn><code>ins</code></dfn>
  <li><dfn><code>kbd</code></dfn>
  <li><dfn><code>li</code></dfn>
  <li><dfn><code>ol</code></dfn>
  <li><dfn><code>p</code></dfn>
  <li><dfn><code>pre</code></dfn>
  <li><dfn><code>q</code></dfn>
  <li><dfn><code>rt</code></dfn>
  <li><dfn><code>ruby</code></dfn>
  <li><dfn><code>samp</code></dfn>
  <li><dfn><code>section</code></dfn>
  <li><dfn><code>span</code></dfn>
  <li><dfn><code>strong</code></dfn>
  <li><dfn><code>sub</code></dfn>
  <li><dfn><code>sup</code></dfn>
  <li><dfn><code>table</code></dfn>
  <li><dfn><code>tbody</code></dfn>
  <li><dfn><code>td</code></dfn>
  <li><dfn><code>th</code></dfn>
  <li><a href=https://html.spec.whatwg.org/#the-time-element><dfn><code>time</code></dfn></a>
  <li><dfn><code>tr</code></dfn>
  <li><dfn><code>u</code></dfn>
  <li><dfn><code>ul</code></dfn>
  <li><dfn><code>var</code></dfn>
</ul>

<p>Following <span title=attribute>atributes</span> are defined by
the <a href="https://html.spec.whatwg.org/"><cite>HTML
Standard</cite></a>:

<ul class=short>
  <li><dfn title=attr-html-class><a href=https://html.spec.whatwg.org/#classes><code>class</code></a></dfn>
  <li><dfn title=attr-html-id><a href=https://html.spec.whatwg.org/#the-id-attribute><code>id</code></a></dfn>
  <li><a href=https://html.spec.whatwg.org/#attr-itemscope><dfn title=attr-html-itemscope><code>itemscope</code></dfn></a>
  <li><a href=https://html.spec.whatwg.org/#names:-the-itemprop-attribute><dfn title=attr-html-itemprop><code>itemprop</code></dfn></a>
  <li><a href=https://html.spec.whatwg.org/#attr-itemid><dfn title=attr-html-itemid><code>itemid</code></dfn></a>
  <li><dfn title=attr-html-title><a href=https://html.spec.whatwg.org/#attr-title><code>title</code></a></dfn>
  <li><dfn title=attr-html-data-value><a href=https://html.spec.whatwg.org/#attr-data-value><code>value</code></dfn></a> of <code>data</code>
  <li><dfn title=attr-html-time-datetime><a href=https://html.spec.whatwg.org/#attr-time-datetime><code>datetime</code></dfn></a> of <code>time</code>
</ul>

<p>The <dfn>HTML3 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:ietf:html:3:draft:00:</code>.  The
<a href=https://www.w3.org/MarkUp/html3/notes.html><dfn><code>note</code></dfn></a> <span>element</span>
is defined in the
<a href=https://www.w3.org/MarkUp/html3/CoverPage.html><cite>HyperText
Markup Language Specification Version 3.0</cite></a> and belongs to
the <span>HTML3 namespace</span> for the purpose of this
specification.

<p>The <span>MathML namespace</span>'s <span>preferred prefix</span>
is <dfn title=prefix-math><code>math</code></dfn>.
Following <span title=element>elements</span> are defined by
the <a href="https://www.w3.org/Math/draft-spec/mathml.html">MathML
specification</a>:

<ul class=short>
  <li><dfn><code>mfrac</code></dfn>
  <li><dfn><code>mroot</code></dfn>
  <li><dfn><code>msqrt</code></dfn>
  <li><dfn><code>mtext</code></dfn>
  <li><dfn><code>munder</code></dfn>
  <li><dfn><code>munderover</code></dfn>
</ul>

<p>The <dfn>SuikaWiki/0.9 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:suikawiki:0:9:</code>.  The
<span>preferred prefix</span>
is <dfn title=prefix-sw><code>sw</code></dfn>.

<p>The <dfn>SuikaWiki/0.10 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:suikawiki:0:10:</code>.  The
<span>preferred prefix</span>
is <dfn title=prefix-sw10><code>sw10</code></dfn>.

<p>The <dfn>XHTML2 namespace</dfn> is
<code>http://www.w3.org/2002/06/xhtml2/</code>.

<p>The <span>XML namespace</span>'s <span>preferred prefix</span>
is <dfn title=prefix-xml><code>xml</code></dfn>.

<div class="note memo">
  <p>The <dfn><code>urn:x-suika-fam-cx:</code></dfn> URN namespace is
  defined by
  <a href=https://suika.suikawiki.org/admin/assign/urn><cite>The
  &lt;<code>urn:x-suika-fam-cx:</code>> Namespace</cite></a>.
</div>

</section>

<section>
<h1>Definitions</h1>

<p>The terms
<dfn>byte sequence</dfn>,
<a href=https://infra.spec.whatwg.org/#code-point><dfn>code point</dfn></a>,
<dfn>string</dfn>,
<a href=https://infra.spec.whatwg.org/#string-starts-with><dfn>starts with</dfn></a>,
<a href=https://infra.spec.whatwg.org/#split-on-ascii-whitespace><dfn>split on ASCII whitespace</dfn></a>,
<dfn>ASCII case-insensitive</dfn>,
<a href=https://infra.spec.whatwg.org/#string-concatenate><dfn>concatenate</dfn></a>,
<a href=https://infra.spec.whatwg.org/#list><dfn>list</dfn></a>,
<a href=https://infra.spec.whatwg.org/#list-is-empty><dfn>is empty</dfn></a>,
<a href=https://infra.spec.whatwg.org/#list-append><dfn title=list-append>append</dfn></a>,
<a href=https://infra.spec.whatwg.org/#ordered-map><dfn>ordered map</dfn></a>,
<a href=https://infra.spec.whatwg.org/#map-key><dfn title=map-key>key</dfn></a>,
<a href=https://infra.spec.whatwg.org/#map-value><dfn title=map-value>value</dfn></a>,
<a href=https://infra.spec.whatwg.org/#map-exists><dfn>exists</dfn></a>,
<dfn title="For each">for each</dfn>,
<dfn>forgiving-base64 encode</dfn>,
<dfn>forgiving-base64 decode</dfn>,
<dfn>HTML namespace</dfn>,
<dfn>MathML namespace</dfn>,
<dfn>XML namespace</dfn>,
<dfn>XMLNS namespace</dfn>,

are defined by the <a href=https://infra.spec.whatwg.org/><cite>Infra
Standard</cite></a>.

<p>The term

<dfn><code>Vertical_Orientation</code></dfn>

is defined by
<a href=https://www.unicode.org/versions/latest/><cite>The Unicode
Standard</cite></a> and
<a href=https://www.unicode.org/reports/tr50/>UAX #50</a>.

<p>Terms
<dfn>node tree</dfn>,
<dfn>node</dfn>,
<dfn>parent</dfn>,
<dfn>child</dfn>,
<a href=https://dom.spec.whatwg.org/#concept-tree-descendant><dfn>descendant</dfn></a>,
<a href=https://dom.spec.whatwg.org/#concept-tree-ancestor><dfn>ancestor</dfn></a>,
<dfn>append</dfn>,
<dfn>element</dfn>,
<dfn>create an element</dfn>,
<dfn title=concept-element-local-name>element's local name</dfn>,
<dfn title=concept-element-namespace>element's namespace</dfn>,
<dfn title=concept-element-namespace-prefix>element's namespace prefix</dfn>,
<a href=https://dom.spec.whatwg.org/#concept-descendant-text-content><dfn title=concept-element-text-content>descendant text content</dfn></a>,
<dfn>attribute</dfn>,
<a href=https://dom.spec.whatwg.org/#concept-element-attribute-has><dfn title=concept-element-attribute-has>has an attribute</dfn></a>,
<dfn>get an attribute value</dfn>,
<a href=https://dom.spec.whatwg.org/#concept-element-attributes-set-value><dfn title=concept-element-attributes-set-value>set an attribute value</dfn></a>,
<dfn title=concept-attribute-local-name>attribute's local name</dfn>,
<dfn title=concept-attribute-namespace>attribute's namespace</dfn>,
and
<dfn title=concept-attribute-namespace-prefix>attribute's namespace prefix</dfn>,
<dfn title="attribute value">attribute's value</dfn>,
<dfn title="owner element">attribute's element</dfn>,
<a href=https://dom.spec.whatwg.org/#concept-getelementsbytagnamens><dfn>list of elements with namespace and local name</dfn></a>,
are defined by the <a href=https://dom.spec.whatwg.org/><cite>DOM
Standard</cite></a>.

<p>Terms
<dfn>applicable specification</dfn>,
<dfn>expected</dfn>,
<dfn>content attribute</dfn>, <dfn>IDL attribute</dfn>,
<dfn>valid integer</dfn>, <dfn>rules for parsing integers</dfn>,
<dfn>valid e-mail address</dfn>,
<a href=https://html.spec.whatwg.org/#set-of-space-separated-tokens><dfn>set of space-separated tokens</dfn></a>,
<dfn>HTML element</dfn>,
<dfn>represents</dfn>,
<a href="https://www.whatwg.org/specs/web-apps/current-work/complete.html#inter-element-whitespace"><dfn>inter-element
whitespace</dfn></a>,
<a href=https://html.spec.whatwg.org/#text-content><dfn title="text
content">text</dfn></a>,
<dfn>flow content</dfn>,
<dfn>phrasing content</dfn>,
<dfn>script-supporting elements</dfn>,
<a href=https://html.spec.whatwg.org/#concept-content-nothing><dfn>nothing</dfn></a>,
<a href=https://html.spec.whatwg.org/#concept-item><dfn>item</dfn></a>,
<a href=https://html.spec.whatwg.org/#item-types><dfn>item types</dfn></a>,
and
<a href=https://html.spec.whatwg.org/#property-names><dfn>property names</dfn></a>
are defined by the <a href=https://html.spec.whatwg.org/><cite>HTML
Standard</cite></a>.

<p>Terms
<dfn>convert</dfn>,
<dfn>UTF-8</dfn>,
and
<dfn>UTF-8 decode</dfn>
are defined by the
<a href=https://encoding.spec.whatwg.org/><cite>Encoding
Standard</cite></a>.

<p>Terms
<dfn>URL</dfn>
and
<dfn>valid URL string</dfn>
are defined by the <a href=https://url.spec.whatwg.org/><cite>URL
Standard</cite></a>.

<p>Terms
<dfn>MIME type</dfn>,
<dfn>essence</dfn>,
and
<dfn>XML MIME type</dfn>
are defined by the
<a href=https://mimesniff.spec.whatwg.org/><cite>MIME Sniffing
Standard</cite></a>.

<p><dfn>White space characters</dfn> are U+0009 <code
class=charname>CHARACTER TABULATION</code> and U+0020 <code
class=charname>SPACE</code>.

<p><dfn>Digits</dfn> are characters in the range U+0030 <code
class=charname>DIGIT ZERO</code> .. U+0039 <code class=charname>DIGIT
NINE</code>.

<p><dfn>Uppercase letters</dfn> are characters in the range U+0041
<code class=charname>LATIN CAPITAL LETTER A</code> .. U+005A <code
class=charname>LATIN CAPITAL LETTER Z</code>.

<p><dfn>Lowercase letters</dfn> are characters in the range U+0061
<code class=charname>LATIN SMALL LETTER A</code> .. U+007A <code
class=charname>LATIN SMALL LETTER Z</code>.

<p><dfn>Language tag characters</dfn> are <span>digits</span>,
<span>uppercase letters</span>, <span>lowercase letters</span>, and
U+002D <code class=charname>HYPHEN-MINUS</code>.

<p><dfn>Scheme characters</dfn> are <span>digits</span>,
<span>uppercase letters</span>, <span>lowercase letters</span>, U+0025
<code class=charname>PERCENT SIGN</code>, U+002A <code
class=charname>PLUS SIGN</code>, U+002D <code
class=charname>HYPHEN-MINUS</code>, U+002E <code class=charname>FULL
STOP</code> and U+005F <code class=charname>LOW LINE</code>.

<p>A <dfn>language specification</dfn> is a string consist of a
<code>@</code> character followed by zero or more <!-- one or more in
SuikaWiki3 implementation --> <span>language tag characters</span>.
<!-- SuikaWiki/0.10 addition --> The <dfn>body of a language
specification</dfn> is the substring in the <span>language
specification</span> except for the first <code>@</code> character.
It might be the empty string.

<div class="note memo">

<p>Semantically, the <span>body of a language specification</span>
represents a <span>language tag</span>, similar to
the <code>xml:lang</code> <span>attribute</span>.

</div>

<p>Terms

<a href=https://drafts.csswg.org/css-text/#white-space><dfn>document white space</dfn></a>
and
<a href=https://drafts.csswg.org/css-text/#preserved-white-space><dfn>preserved
white space</dfn></a>

are defined by the
<a href=https://drafts.csswg.org/css-text/><cite>CSS Text</cite></a>
specification.

</section>

</section>

<section>
<h1>The <dfn>SWML text serialization</dfn></h1>

<p><em>This section is non‐normative.</em>

<div class=XXX>

<p>Obviously, this section is incomplete; some prose definition is not
yet available; some xrefs does not work yet.  It should be specified
why this is non-normative.  ABNF definition &amp; charset consideration 
need to be addressed.

</div>

<p>Both prose and ABNF descriptions are non-normative.  The
conformance of a <span>SWML text serialization</span> document is
defined in terms of the <span title="SWML text serialization
parser">parser</span> and its output.

<p class=XXX>Conformance checking steps

<section>
<h1>Document structure and header</h1>

<p>A <dfn title=concept-document>document</dfn> in the <span>SWML text
serialization</span> consists of three parts: <span
title=concept-header-part>header part</span>, <span
title=concept-body-part>body part</span>, and optional <span
title=concept-image>image</span>.

<p>Several construct in a <span title=concept-document>document</span>
refers <span title=concept-page>page</span>.  A <dfn
title=concept-page>page</dfn> is a unit of data in a hypertext
database.  The name of a <span title=concept-page>page</span> is
sometimes referred to as <dfn title=concept-WikiName>WikiName</dfn>.
A <span title=concept-page>page</span> sometimes represents or is
associated with an image.  How to implement these concept, including
how to resolve <span title=concept-WikiName>WikiNames</span>, is not
defined in this specification.

<dl class=abnf>

<dt><dfn id=abnf-document>document</dfn>

<dd>= <span title=abnf-header-part>header-part</span> <span
title=abnf-body-part>body-part</span> [<span
title=abnf-obs-image>obs-image</span>]

</dl>

<p>The <dfn title=concept-header-part>header part</dfn> has to be
empty.  In previous versions of SWML, a <dfn
title=concept-magic-line>magic line</dfn> could be contained, and in
fact was required in some versions, in the <span
title=concept-header-part>header part</span> of a <span
title=concept-document>document</span>.

<p>A <span title=concept-magic-line>magic line</span> has to contain a
string <code>#?</code>, followed by the <dfn
title=concept-format-name>format name</dfn>, followed by a
<code>/</code> character, followed by the <dfn
title=concept-format-version>format version</dfn>.  They identifies
the version of the markup language in which the <span
title=concept-document>document</span> is written.  Historically, only
two combinations of <span title=concept-format-name>format name</span>
and <span title=concept-format-version>format version</span> as shown
in the table below were defined, used, and implemented:

<table>

<thead>
<tr>
<th scope=col><span title=concept-format-name>Format name</span>
<th scope=col><span title=concept-format-version>Format version</span>
<th scope=col>Description

<tbody>

<tr>
<td><dfn title=concept-magic-format-suikawiki><code>SuikaWiki</code></dfn>
<td><dfn title=concept-magic-version-suikawiki-09><code>0.9</code></dfn>
<td>The <span title=concept-suikawiki09>SuikaWiki/0.9</span> markup language.

<tr>
<td><dfn title=concept-magic-format-suikawikiimage><code>SuikaWikiImage</code></dfn>
<td><dfn title=concept-magic-version-suikawikiimage-09><code>0.9</code></dfn>
<td>The <span title=concept-suikawikiimage09>SuikaWikiImage/0.9</span> markup language.

</table>

<p>A <span title=concept-magic-line>magic line</span> can contain zero
or more <dfn title=concept-parameter>parameters</dfn> after the <span
title=concept-format-version>format version</span>.  A <span
title=concept-parameter>parameter</span> consists of one or more
<span>white space characters</span>, followed by the <dfn
title=concept-parameter-name>name</dfn>, followed by a <code>=</code>
character, followed by a <span title=concept-quoted-string>quoted
string</span> whose <span
title=concept-quoted-string-value>value</span> representing zero or
more <dfn title=concept-parameter-value>values</dfn> separeted by a
<code>,</code> character.
A <span title=concept-parameter-value>parameter value</span> consists
of zero or more <span title=concept-character>text characters</span>
except for the separator character <code>,</code>.  Historically,
following combinations of <span title=concept-parameter-name>parameter
names</span> and <span title=concept-parameter-value>values</span> was
defined and used:

<table>

<thead>
<tr>
<th scope=col><span title=concept-parameter-name>Name</span>
<th scope=col><span title=concept-parameter-value>Values</span>
<th scope=col>Description

<tbody>

<tr>
<th scope=row><dfn title=concept-parameter-default-name><code>default-name</code></dfn>
<td>Zero or more <span title=concept-character>text characters</span>
except for <code>,</code>
<td>The <span title=concept-parameter-value>value</span> represetns
the default user name for <span title=concept-wikiform>WikiForm</span>
input fields.  Exactly one <span title=concept-parameter-value>value</span>
can be specified.  The default when this <span title=concept-parameter>parameter</span>
is implementation dependent.

<tr>
<th scope=row><dfn title=concept-parameter-import><code>import</code></dfn>
<td>Zero or more <span title=concept-character>text characters</span>
except for <code>,</code>
<td>A <span title=concept-parameter-value>value</span> represents the
<span title=concept-WikiName>WikiName</span> by which definitions for
<span title=concept-entity-reference>entity references</span> are
imported.  When this <span title=concept-parameter>parameter</span> is
not specified, no definition is imported.

<tr>
<th scope=row><dfn title=concept-parameter-interactive><code>interactive</code></dfn>
<td><dfn title=concept-parameter-interactive-yes><code>yes</code></dfn> or
<dfn title=concept-parameter-interactive-no><code>no</code></dfn>
<td>Value <code title=concept-parameter-interactive-yes>yes</code>
means that the <span title=concept-document>document</span> contains
an interactive content such as <span title=concept-wikiform>WikiForm</span>.
Value <code title=concept-parameter-interactive-no>no</code>, the default
value used when the <span title=concept-parameter>parameter</span> is
not specified, means the <span title=concept-document>document</span> does
not contain such a content.  It was intended to be used for the convinience
of cache control mechanisms.

<tr>
<th scope=row><dfn title=concept-parameter-obsolete><code>obsolete</code></dfn>
<td rowspan=2><dfn title=concept-parameter-obsolete-yes><code>yes</code></dfn> or
<dfn title=concept-parameter-obsolete-no><code>no</code></dfn>
<td rowspan=2>Value <code title=concept-parameter-obsolete-yes>yes</code> means
the content of the <span title=concept-document>document</span> is
obsolete, and value <code title=concept-parameter-obsolete-no>no</code>,
the default value used when the <span title=concept-parameter>parameter</span>
is not specified, means the content is not obsolete.

<div class="note memo">

<p>The <span title=concept-parameter-name>parameter name</span> <code
title=concept-parameter-obsolete>obsolete</code> was defined in the
SuikaWiki/0.9 specification, but the <span
title=concept-parameter-name>parameter name</span> that had been
actually implemented in SuikaWiki2 and used was the <span
title=concept-parameter-name>parameter name</span> <code
title=concept-parameter-obsoleted>obsoleted</code>.

</div>

<tr>
<th scope=row><dfn title=concept-parameter-obsoleted><code>obsoleted</code></dfn>

<tr> <th scope=row><dfn
title=concept-parameter-page-icon><code>page-icon</code></dfn>
<td>Zero or more <span title=concept-character>text characters</span>
except for <code>,</code>
<td>The <span title=concept-parameter-value>value</span> represents
the <span title=concept-WikiName>WikiName</span> by which the page
icon is imported.  The page icon can be used as favicon <span
class=XXX>@@ [ref]</span>, for example.  Exactly one <span
title=concept-parameter-value>value</span> can be specified.  The
default when this <span title=concept-parameter>parameter</span> is
implementation dependent.

<tbody>

<tr>
<th scope=row><dfn title=concept-parameter-image-alt><code>image-alt</code></dfn>
<td>Zero or more <span title=concept-character>text characters</span>
except for <code>,</code>
<td>The <span title=concept-parameter-value>value</span> represents the
alternative text for the <span title=concept-image>image</span> embedded in the
<span title=concept-document>document</span>.  Exactly one
<span title=concept-parameter-value>value</span> can be specified.  The
default when this <span title=concept-parameter>parameter</span>
is the empty string.

<tr>
<th scope=row><dfn title=concept-parameter-image-type><code>image-type</code></dfn>
<td>An Internet Media Type with no parameter, white spaces, comments
<td>The <span title=concept-parameter-value>value</span> represents the
type of the <span title=concept-image>image</span> embedded in the
<span title=concept-document>document</span>.  Exactly one
<span title=concept-parameter-value>value</span> can be specified.
This <span title=concept-parameter>parameter</span> has to be specified
when the <span title=concept-document>document</span> contains an
<span title=concept-image>image</span>.

</table>

<p>The order in which <span title=concept-parameter>parameters</span>
are specified is not significant.  The <span
title=concept-parameter-name>parameter name</span> of a <span
title=concept-parameter>parameter</span> has to be different from the
<span title=concept-parameter-name>parameter name</span> of any other
<span title=concept-parameter>parameter</span>.

<p>A <span title=concept-magic-line>magic line</span> has to be
terminated by zero or more <span>white space characters</span>
followed by a <span title=concept-newline>newline</span>.

<dl class=abnf>

<dt><dfn title=abnf-header-part>header-part</dfn>

<dd>= [<span title=abnf-obs-magic-line>obs-magic-line</span>]

<dt><dfn title=abnf-obs-magic-line>obs-magic-line</dfn>

<dd>= "#?" <span title=abnf-format-name>format-name</span> "/" <span
title=abnf-format-version>format-version</span> *(<!-- In
SuikaWiki/0.9 spec WSP can be omitted, which is wrong. -->1*<span
title=abnf-white-space>white-space</span> <span
title=abnf-parameter>parameter</span>) *<span
title=abnf-white-space>white-space</span> <span
title=abnf-newline>newline</span>

<dt><dfn title=abnf-format-name>format-name</dfn>

<dd>= <span title=abnf-identifier>identifier</span>

<dt><dfn title=abnf-format-version>format-version</dfn>

<dd>= <span title=abnf-identifier>identifier</span>

<dt><dfn title=abnf-parameter>parameter</dfn>

<dd>= <span title=abnf-parameter-name>parameter-name</span> "=" <span
title=abnf-quoted-string>quoted-string</span>

<dt><dfn title=abnf-parameter-name>parameter-name</dfn>

<dd>= <span title=abnf-identifier>identifier</span>

<dt><dfn title=abnf-parameter-value-list>parameter-value-list</dfn>

<dd>= [<span title=abnf-parameter-value>parameter-value</span> *(","
<span title=abnf-parameter-value>parameter-value</span>)]

<dt><dfn title=abnf-parameter-value>parameter-value</dfn>

<dd>:= *(<span title=abnf-char>char</span> &minus; ",")

</dl>

</section>

<section>
<h1>Body part blocks</h1>

<p>The <dfn title=concept-body-part>body part</dfn> of a <span
title=concept-document>document</span> consists of zero or more <span
title=concept-block>blocks</span>.

<p>There are several kinds of <dfn title=concept-block>blocks</dfn>:
<span title=concept-paragraph>paragraphs</span>, <span
title=concept-heading>headings</span>, <span
title=concept-list>lists</span>, <span
title=concept-labeled-list>labeled lists</span>, <span
title=concept-quotation>quotations</span>, <span
title=concept-preformatted-paragraph>preformatted paragraphs</span>,
<span title=concept-edit-section>editted sections</span>, <span
title=concept-table>tables</span>, <span
title=concept-editorial-note>editorial notes</span>, <span
title=concept-comment-paragraph>comment paragraphs</span>,
<span title=concept-hr>hrs</span>,
and <span title=concept-empty-block>empty blocks</span>.  In
addition, <span title=concept-form>forms</span>
and <span title=concept-entity-reference>entity references</span> can
also be used as <span title=concept-blocks>blocks</span>.

<p><dfn title=concept-empty-block>Empty blocks</dfn>, which is
represented by an empty line, can be inserted between any two <span
title=concept-block>blocks</span>.  It is sometimes necessary to
prevent a <span title=concept-block>block</span> from being
interpreted as a part of the previous <span
title=concept-block>block</span>.

<div class=example>

<p>For example, consider the following fragment:

<pre><code>- List item.
This line is part of the list item.</code></pre>

<p>The second line is part of the <span
title=concept-list>list</span>, by definition.  If it is not desired,
an <span title=concept-empty-block>empty block</span> can be inserted
between two lines as:

<pre><code>- List item.

This line is <em>not</em> part of the list item.</code></pre>

<p>... such that the third line represents a <span
title=concept-paragraph>paragraph</span>.

</div>

<dl class=abnf>

<dt><dfn title=abnf-body-part>body-part</dfn>

<dd>= *<span title=abnf-block>block</span>

<dt><dfn title=abnf-block>block</dfn>

<dd>= <span title=abnf-paragraph>paragraph</span> / <span
title=abnf-heading>heading</span> / <span title=abnf-list>list</span>
/ <span title=abnf-labeled-list>labeled-list</span> / <span
title=abnf-quotation>quotation</span> / <span
title=abnf-preformatted-paragraph>preformatted-paragraph</span> /
<span title=abnf-section-block>section-block</span>
/ <span title=abnf-table>table</span>
/ <span title=abnf-editorial-note>editorial-note</span>
/ <span title=abnf-comment-paragraph>comment-paragraph</span>
/ <span title=abnf-hr>hr</span>
/ <span title=abnf-empty-block>empty-block</span>
/ <span title=abnf-form>form</span>
/ <span title=abnf-entity-reference>entity-reference</span>

<dt><dfn title=abnf-empty-block>empty-block</dfn>

<dd>= <span title=abnf-newline>newline</dfn>

</dl>

<p>A <dfn title=concept-paragraph>paragraph</dfn> represents a unit of
the text, similar to HTML's <code>p</code> element.  It consists of an
optional <span title=concept-destination-anchor-number>destination
anchor number</span>, followed by a <span
title=concept-line-contents>line contents</span>, followed by a <span
title=concept-newline>newline</span>, followed by zero or more <span
title=concept-block-child>block children</span>.

<div class="note memo">

<p>A <span title=concept-paragraph>paragraph</span> cannot begin with
a <span title=concept-form>form</span> or <span
title=concept-entity-reference>entity reference</span>, since it is
treated as a <span title=concept-block>block</span> when it appears at the
beginning of a line.  A <span title=concept-paragraph>paragraph</span>
cannot begin with a <span title="white space characters">white space
character</span>, since it is treated as a <span
title=concept-preformatted-paragraph>preformatted paragraph</span>
then.

</div>

<p>A <dfn title=concept-block-child>block child</dfn> is one of an
optional <span title=concept-destination-anchor-number>destination
anchor number</span> followed by <span
title=concept-line-contents>line contents</span> followed by a <span
title=concept-newline>newline</span>, a <span
title=concept-list>list</span>, a <span
title=concept-labeled-list>labeled list</span>, a <span
title=concept-preformatted-paragraph>preformatted paragraph</span>, an
<span title=concept-section-block>section block</span>,
a <span title=concept-table>table</span>,
an <span title=concept-editorial-notes>editorial note</span>,
a <span title=concept-comment-paragraph>comment paragraph</span>, or
an <span title=concept-hr>hr</span>.

<p>An <dfn title=concept-editorial-notes>editorial note</dfn>
represents an editorial note.  It is represented by a
string <code>@@</code>, followed by zero or more <span>white space
characters</span>, followed by zero or
more <span title=concept-block-child>block children</span>.

<p>A <dfn title=concept-comment-paragraph>comment paragraph</dfn>
represents a note.  It is represented by a string <code>;;</code>,
followed by zero or more <span>white space characters</span>, followed
by zero or more <span title=concept-block-child>block children</span>.

<p>An <dfn title=concept-hr>hr</dfn> represents a break in the run of
blocks in which it occurs, smilar to the HTML <code>hr</code> element.
It is represented by a string <code>-*-*-</code>, followed by an
optional <span title=concept-class-specification>class
specification</span>, followed by zero or more <span>white space
characters</span>, finally followed by
a <span title=concept-newline>newline</span>.

<dl class=abnf>

<dt><dfn title=abnf-paragraph>paragraph</dfn>

<dd>= [<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
<span title=abnf-line-contents>line-contents</span> <span
title=abnf-newline>newline</span> *<span
title=abnf-block-child>block-child</span>

<dt><dfn title=abnf-comment-paragraph>comment-paragraph</dfn>

<dd>= ";;" *<span title=abnf-white-space>white-space</span> [<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span> *<span
title=abnf-block-child>block-child</span>

<dt><dfn title=abnf-editorial-note>editorial-note</dfn>

<dd>= "@@" *<span title=abnf-white-space>white-space</span> [<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span> *<span
title=abnf-block-child>block-child</span>

<dt><dfn title=abnf-hr>hr</dfn>

<dd>= "-*-*-"
[<span title=abnf-class-specification>class-specification</span>]
*<span title=abnf-white-space>white-space</span>
<span title=abnf-newline>newline</span>

<dt><dfn title=abnf-block-child>block-child</dfn>

<dd>= [<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
<span title=abnf-line-contents>line-contents</span> <span
title=abnf-newline>newline</span> / <span title=abnf-list>list</span>
/ <span title=abnf-labeled-list>labeled-list</span> / <span
title=abnf-preformatted-paragraph>preformatted-paragraph</span> /
<span title=abnf-section-block>section-block</span>
/ <span title=abnf-table>table</span>
/ <span title=abnf-editorial-note>editorial-note</span>
/ <span title=abnf-comment-paragraph>comment-paragraph</span>
/ <span title=abnf-hr>hr</span>

</dl>

<p>A <dfn title=concept-heading>heading</dfn> introduces a <dfn
title=concept-section>section</dfn>.  It is represented by one or more
<code>*</code> characters, followed by zero or more <span>white space
characters</span>, optionally followed by a <span
title=concept-destination-anchor-number>destination anchor
number</span>, optionally followed by <span
title=concept-line-contents>line contents</span>, followed by a <span
title=concept-newline>newline</span>.  The number of the
<code>*</code> represents the depth of
the <span title=concept-section>section</span>.
A <span title=concept-heading>heading</span> with only
one <code>*</code> character begins a
larger <span title=concept-section>section</span> than
a <span title=concept-heading>heading</span> with more than
one <code>*</code> characters.
The <span title=concept-line-contents>line contents</span> represents
the name or caption for
the <span title=concept-section>section</span>.

<dl class=abnf>

<dt><dfn title=abnf-heading>heading</dfn>

<dd>= 1*"*" *<span title=abnf-white-space>white-space</span> [<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span>

</dl>

<p>There are three kinds of lists: ordered lists, unordered lists, and
<span title=concept-labeled-list>labeled lists</span>.  Ordered lists
and unordered lists are called <dfn title=concept-list>lists</dfn> in
this specification.

<p>A <span title=concept-list>list</span> consists of zero or more
<span title=concept-list-item>items</span>.  An <dfn
title=concept-list-item>item</dfn> in the <span
title=concept-list>list</span> is represented by one or more
<code>-</code> or <code>=</code> characters, followed by zero or more
<span>white space characters</span>, optionally followed by a <span
title=concept-destination-anchor-number>destination anchor
number</span>, optionally followed by <span
title=concept-line-contents>line contents</span>, followed by a <span
title=concept-newline>newline</span>, followed by zero or more <span
title=concept-block-child>block children</span>.  The number of
<code>-</code> or <code>=</code> characters at the beginning of the
<span title=concept-list-item>item</span> represents the <dfn
title=concept-list-depth>depth</dfn> of the <span
title=concept-list>list</span>.  In a <span
title=concept-list>list</span>, <span
title=concept-list-depth>depth</span> of <span
title=concept-list-item>items</span> has to be the same value.  If
there is another <span title=concept-list>list</span> in <span
title=concept-block-child>block children</span>, it's <span
title=concept-list-item>items</span>' <span
title=concept-list-depth>depth</span> has to be greater than the <span
title=concept-list-depth>depth</span> of the parent <span
title=concept-list-item>item</span>.  The last character that
represents the <span title=concept-list-depth>depth</span> of an <span
title=concept-list-item>item</span> indicates the type of the <span
title=concept-list>list</span>: <code>-</code> indicates unordered
list while <code>=</code> indicates ordered list.  In a <span
title=concept-list>list</span> all <span
tilte=concept-list-item>items</span> has to be same type.

<p>A <dfn title=concept-labeled-list>labeled list</dfn> consists of
one or more <span title=concept-labeled-list-item>labeled list
items</span>.  A <dfn title=concept-labeled-list-item>labeled list
item</dfn> is represented by a <code>:</code> character, followed by
zero or more <span>white space characters</span>, optionally followed
by a <span title=concept-destination-anchor-number>destination anchor
number</span>, optionally followed by <span
title=concept-line-contents>line contents</span>, followed by zero or
more <span>white space characters</span>, followed by a <code>:</code>
character, followed by a <span
title=concept-destination-anchor-number>destination anchor
number</span>, followed by zero or more <span>white space
characters</span>, optionally followed by <span
title=concept-line-contents>line contents</span>, followed by <span
title=concept-newline>newline</span>, followed by zero or more <span
title=concept-block-child>block chidlren</span>.  The former <span
title=concept-line-contents>line contents</span>, if any, represents
the label.  <span title=concept-block-child>Block children</span>
cannot contain a <span title=concept-labeled-list>labeled list</span>.

<dl class=abnf>

<dt><dfn title=abnf-list>list</dfn>

<dd>= 1*<span title=abnf-list-item>list-item</span>

<dt><dfn title=abnf-list-item>list-item</dfn>

<dd>= 1*("-" / "=") *<span title=abnf-white-space>white-space</span>
[<span
title=abnf-destination-anchor-number>destination-anchor-number</span>
<span title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span> *<span
title=abnf-block-child>block-child</span>

<dt><dfn title=abnf-labeled-list>labeled-list</dfn>

<dd>= 1*<span title=abnf-labeled-list-item>labeled-list-item</span>

<dt><dfn title=abnf-labeled-list-item>labeled-list-item</dfn>

<dd>= ":" *<span title=abnf-white-space>white-space</span> [<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>] *<span
title=abnf-white-space>white-space</span> [<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span> *<span
title=abnf-block-child>block-child</span>

</dl>

<div class="example">

<p>The following example contains no <span
title=concept-quotation>quotation</span>:

<pre><code>>>1 This is a reference, not a quote.</code></pre>

</div>

<dl class=abnf>

<dt><dfn title=abnf-quotation>quotation</dfn>

<dd>= 1*<span title=abnf-quoted-block>quoted-block</span>

<dt><dfn title=abnf-quoted-block>quoted-block</dfn>

<dd>= 1*">" *<span title=abnf-white-space>white-space</span> (<span
title=abnf-paragraph>paragraph</span> / <span
title=abnf-editorial-note>editorial-note</span> / <span
title=abnf-comment-paragraph>comment-paragraph</span> / <span
title=abnf-newline>newline</span>)

</dl>

<dl class=abnf>

<dt><dfn title=abnf-preformatted-paragraph>preformatted-paragraph</dfn>

<dd>= <span
title=abnf-preformatted-paragraph-block>preformatted-paragraph-block</span>
/ <span
title=abnf-obs-preformatted-paragraph>obs-preformatted-paragraph</span>

<dt><dfn
title=abnf-preformatted-paragraph-block>preformatted-paragraph-block</dfn>

<dd>= '[PRE[' [<span
title=abnf-class-specification>class-specification</span>] "[" *<span
title=abnf-white-space>white-space</span> <span
title=abnf-newline>newline</span> *([<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span>) ']PRE]' *<span
title=abnf-white-space>white-space</span>

<dt><dfn title=abnf-obs-preformatted-paragraph>obs-preformatted-paragraph</dfn>

<dd>= <span title=abnf-white-space>white-space</span> [<span
title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span> *([<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>] <span
title=abnf-newline>newline</span>)

</dl>

<p>A <dfn title=concept-section-block>section block</dfn> is a marked
section of zero or more <span title=concept-block>blocks</span>,
preceded by a <span title=concept-section-block-start-tag>section
block start tag</span> and followed by
a <span title=concept-section-block-end-tag>section block end
tag</span>.

<p>A <dfn title=concept-section-block-start-tag>section block start
tag</dfn> is a <code>[</code> character, followed by
a <span title=concept-section-block-tag-name>section block tag
name</span>, followed by an
optional <span title=concept-class-specification>class
specification</span>, followed by a <code>[</code> character, followed
by zero or more <span>white space characters</span>, optionally
followed by <span title=concept-line-contents>line contents</span>,
followed by a <span title=concept-newline>newline</span>.

<p>Whether the <span title=concept-line-contents>line contents</span>
component is allowed or not and its semantics depends on
the <span title=concept-section-block-tag-name>section block tag
name</span>.

<div class="note memo">
<p>For example, the <span title=concept-line-contents>line
contents</span> component of a <code title=concept-FIG>FIG</code>
block represents a caption (i.e. a short form
of <code title=concept-FIGCAPTION>FIGCAPTION</code> child.
</div>

<p>A <dfn title=concept-section-block-end-tag>section block end
tag</dfn> is a <code>]</code> character, followed by
a <span title=concept-section-block-tag-name>section block tag
name</span>, followed by a <code>]</code> character, followed by zero
or more <span>white space characters</span>, followed by
a <span title=concept-newline>newline</span>.

<p>A <dfn title=concept-section-block-tag-name>section block tag
name</dfn> represents the type of
the <span title=concept-section-block>section block</span>.
The <span title=concept-section-block-tag-name>section block tag
name</span> of a <span title=concept-section-block>section
block</span> has to be the same value.  Their semantics are described
by the <span>Block Element Table</span>.

<dl class=abnf>

<dt><dfn title=abnf-section-block>section-block</dfn>

<dd>= '[' <span title=abnf-tag-name>tag-name</span>
[<span title=abnf-class-specification>class-specification</span>] "["
*<span title=abnf-white-space>white-space</span>
[<span
title=abnf-destination-anchor-number>destination-anchor-number</span>]
[<span title=abnf-line-contents>line-contents</span>]
<span title=abnf-newline>newline</span>
<span title=abnf-body-part>body-part</span>
']' <span title=abnf-tag-name>tag-name</span> ']'
*<span title=abnf-white-space>white-space</span>
<span title=abnf-newline>newline</span>

</dl>

<p>A <dfn title=concept-table>table</dfn> represents a two-dimensional
tabular data.  It is similar to HTML <code>table</code> element, but
what can be represented is even narrower than HTML table model.  A
<span title=concept-table>table</span> consists of one or
more <span title=concept-table-row>table rows</span>.
A <dfn title=concept-table-row>table row</dfn> consists of one or
more <span title=concept-table-cell>table cells</span>.  Syntactically
a <span title=concept-table-row>table row</span> is followed by
a <span title=concept-newline>newline</span>.

<p>There are three kinds of <dfn title=concept-table-cell>table
cells</dfn>: <span title=concept-table-data-cell>data cells</span>,
<span title=concept-table-header-cell>header cells</span>, and
<span title=concept-table-colspan-cell>colspan cells</span>.  The
first <span title=concept-table-cell>cell</span> in
a <span title=concept-table-row>row</span> has to be
a <span title=concept-table-data-cell>data cell</span> or
a <span title=concept-table-header-cell>header cell</span>.
Syntactically a <span title=concept-table-cell>cell</span> is preceded
by a <code>,</code> character followed by zero or more <span>white
space characters</span>, and is followed by zero or more <span>white
space characters</span>.

<p>A <dfn title=concept-table-data-cell>data cell</dfn> represents a
cell that contains data, like HTML <code>td</code> element.  Likewise,
a <dfn title=concept-table-header-cell>header cell</dfn> represents a
cell that contains data, like HTML <code>th</code> element.  The data
of a <span title=concept-table-header-cell>header cell</span> has to
be preceded by a <code>*</code> character.  The cell consists of an
optional <span title=concept-destination-anchor-number>destination
anchor number</span>, optionally followed
by <span title=concept-line-contents>line contents</span>.
Syntactically, the cell can be provided as
a <span title=concept-quoted-string>quoted string</span>, in which
case its <span title=concept-quoted-string-value>value</span> is
interpreted as an
optional <span title=concept-destination-anchor-number>destination
anchor number</span>, optionally followed
by <span title=concept-line-contents>line contents</span>.<!-- In fact
the <span title=concept-table-data-cell>data cell</span> has to be
represented as a <span title=concept-quoted-string>quoted
string</span> if it contains a <code>,</code> character, a
leading <code>"</code> character, or leading or trailing <span>white
space characters</span>.-->

<p>A <dfn title=concept-table-colspan-cell>colspan cell</dfn>
represents that the <span title=concept-table-cell>cell</span> that
would be placed there forms an integrated part of the <span
title=concept-table-cell>cell</span> just before that <span
title=concept-table-cell>cell</span>.  The <span
title=concept-table-cell>cell</span> just before that <span
title=concept-table-cell>cell</span> might also be a <span
title=concept-table-colspan-cell>colspan cell</span>.

<dl class=abnf>

<dt><dfn title=abnf-table>table</dfn>

<dd>= 1*<span title=abnf-table-row>table-row</span>

<dt><dfn title=abnf-table-row>table-row</dfn>

<dd>= "," <span title=abnf-data-cell>data-cell</span> *("," <span
title=abnf-cell>cell</span>) <span title=abnf-newline>newline</span>

<dt><dfn title=abnf-cell>cell</dfn>

<dd>= <span title=abnf-data-cell>data-cell</span>
/ <span title=abnf-header-cell>header-cell</span>
/ <span title=abnf-colspan-cell>colspan-cell</span>

<dt><dfn title=abnf-data-cell>data-cell</dfn>

<dd>= *<span title=abnf-white-space>white-space</span> ([<span
title=abnf-cstartchar>cstartchar</span> *<span
title=abnf-cchar>cchar</span>] / <span
title=abnf-quoted-string>quoted-string</span>) *<span
title=abnf-white-space>white-space</span>

<dt><dfn title=abnf-header-cell>header-cell</dfn>

<dd>= *<span title=abnf-white-space>white-space</span> "*"
*<span title=abnf-white-space>white-space</span>
([<span title=abnf-cstartchar>cstartchar</span>
*<span title=abnf-cchar>cchar</span>]
/ <span title=abnf-quoted-string>quoted-string</span>)
*<span title=abnf-white-space>white-space</span>

<dt><dfn title=abnf-cstartchar>cstartchar</dfn>

<dd>= <span title=abnf-char>char</span> &minus; ("," / %x22 / <span
title=abnf-white-space>white-space</span>)

<dt><dfn title=abnf-cchar>cchar</dfn>

<dd>= <span title=abnf-char>char</span> &minus; ","

<dt><dfn title=abnf-colspan-cell>colspan-cell</dfn>

<dd>= "=="

</dl>

</section>

<section>
<h1>Inline contents</h1>

<p class=XXX>Need prose definitions...

<dl class=abnf>

<dt><dfn title=abnf-line-contents>line-contents</dfn>

<dd>= 1*(<span title=abnf-text>text</span> / <span
title=abnf-anchor-internal>anchor-internal</span> / <span
title=abnf-anchor-external>anchor-external</span> / <span
title=abnf-anchor>anchor</span> / <span
title=abnf-tagged-inline-element>tagged-inline-element</span> / <span
title=abnf-form>form</span> / <span title=abnf-strong>strong</span> /
<span title=abnf-em>emphasis</span> / <span
title=abnf-entity-reference>entity-reference</span>)

<dt><dfn title=abnf-text>text</dfn>

<dd>= 1*<span title=abnf-char>char</span>

</dl>

<table>

<thead>
<tr>
<th scope=col><span title=concept-external-reference-scheme>External
reference scheme</span>
<th scope=col>Syntax of
<span title=concept-external-reference-parameter>external reference
parameter</span>
<th scope=col>Semantics

<tbody>

<tr>
<th scope=row><dfn title=concept-IMG><code>IMG</code></dfn>
<td><span>valid URL string</span>
<td><span>URL</span> of an image
  
<tr>
<th scope=row><dfn title=concept-IW><code>IW</code></dfn>
<td><code class=abnf>(<span title=abnf-identifier>identifier</span> /
<span title=abnf-quoted-string>quoted-string</span>) ":"
(<span title=abnf-identifier>identifier</span> /
<span title=abnf-quoted-string>quoted-string</span>)</code>
<td><span title=concept-InterWiki>InterWiki</span> reference
(An <span title=concept-InterWikiName>InterWikiName</span> followed
by a parameter)

<tr>
<th scope=row><dfn title=concept-external-reference-scheme-EMBED><code>M</code></dfn>
<td><span>valid URL string</span>
<td><span>URL</span> of an embedded object

<tr>
<th scope=row><dfn title=concept-MAIL><code>MAIL</code></dfn>
<td><span>valid e-mail address</span>
<td>Internet mail address

<tr>
<th scope=row><dfn title=concept-URI><code>URI</code></dfn>
<td><span>valid URL string</span>
<td><span>URL</span>

<tr>
<th scope=row><dfn title=concept-URL><code>URL</code></dfn>
<td><span>valid URL string</span>
<td><span>URL</span>

</table>

<p><dfn title=concept-InterWiki>InterWiki</dfn> is a mechanism for the
hyperlinking and the combination of an <dfn
title=concept-InterWikiName>InterWikiName</dfn> and a parameter
identifies the destination of the link.  The interpretation of an
<span title=concept-InterWiki>InterWiki</span> link is implementation
dependent.

<p><span title=concept-external-reference-scheme>External reference
schemes</span> <code title=concept-URI>URI</code> and <code
title=concept-URL>URL</code> ought not to be used.

<dl class=abnf>

<dt><dfn title=abnf-destination-anchor-number>destination-anchor-number</dfn>

<dd>= "[" 1*<span title=abnf-DIGIT>DIGIT</span> "]"

<dt><dfn title=abnf-anchor-internal>anchor-internal</dfn>

<dd>= ">>" 1*<span title=abnf-DIGIT>DIGIT</span>

<dt><dfn title=abnf-anchor-external>anchor-external</dfn>

<dd>= "<" <span title=abnf-external-reference>external-reference ">"

<dt><dfn title=abnf-external-reference>external-reference</dfn>

<dd>= <span title=abnf-URL>URL</span> / <span
title=abnf-external-reference-scheme>external-reference-scheme</span>
":" <span
title=abnf-external-reference-parameter>external-reference-parameter</span>

<dt><dfn title=abnf-URL>URL</dfn>

<dd>= 1*<span title=abnf-uschar>uschar</span> ":" <span
title=abnf-external-reference-parameter>external-reference-parameter</span>

<dt><dfn title=abnf-external-reference-scheme>external-reference-scheme</dfn>

<dd>= 1*<span title=abnf-xschar>xschar</span>

<dt><dfn title=abnf-external-reference-parameter>external-reference-parameter</dfn>

<dd>= *(<span title=abnf-char>char</span> &minus; ("<" / ">" / %x22) /
<span title=abnf-quoted-string>quoted-string</span>)

<dt><dfn title=abnf-uschar>uschar</dfn>

<dd>= <span title=abnf-char>char</span> &minus; (":" / <span
title=abnf-UALPHA>UALPHA</span>)

<dt><dfn title=abnf-xschar>xschar</dfn>

<dd>= <span title=abnf-char>char</span> &minus; (":" / <span
title=abnf-LALPHA>LALPHA</span>)

<dt><dfn title=abnf-anchor>anchor</dfn>

<dd>= "[[" [<span title=abnf-line-contents>line-contents</span>]
[<span title=abnf-inline-middle-tag>inline-middle-tag</span>
[<span title=abnf-line-contents>line-contents</span>]]
<span title=abnf-inline-end-tag>inline-end-tag</span>

</dl>

<table>

<thead>
<tr>
<th scope=col><span title=concept-tag-name>Tag name</span>
<th scope=col>Number of <span title=concept-inline-middle-tag>middle tags</span>
<th scope=col><span title=concept-anchor-internal>Internal reference source anchor</span>
<th scope=col><span title=concept-anchor-external>External reference source anchor</span>
<th scope=col>Semantics

<tbody>

<tr>
<th scope=row><dfn title=concept-AA><code>AA</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>So-called ASCII-art (<code>aa</code> element)

<tr>
<th scope=row><dfn title=concept-ABBR><code>ABBR</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Abbreviation (HTML <code>abbr</code> element)

<tr>
<th scope=row><dfn title=concept-ASIS><code>ASIS</code></dfn>
<td>1
<td>Not allowed
<td>Not allowed
<td>“As-is” annotation (<code>asis</code> element)

<tr>
<th scope=row><dfn title=concept-B><code>B</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Bold (or sans-serif) text (HTML <code>b</code> element)

<tr>
<th scope=row><dfn title=concept-BR><code>BR</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Explicit line break (<code>sw-br</code> element)

<tr>
<!-- SuikaWiki/0.10 -->
<th scope=row><dfn title=concept-CITE><code>CITE</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Title of a work (HTML <code>cite</code> element)

<tr>
<th scope=row><dfn title=concept-CODE><code>CODE</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Code (HTML <code>code</code> element)

<tr>
<th scope=row><dfn title=concept-CURSIVE><code>CURSIVE</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Cursive text (<code>sw-cursive</code> <span>element</span>)

<tr>
<!-- SuikaWiki/0.10 -->
<th scope=row><dfn title=concept-CSECTION><code>CSECTION</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Title of a section in a work (<code>csection</code> element)

<tr>
<th scope=row><dfn title=concept-DATA><code>DATA</code></dfn>
<td>0 or 1
<td>Allowed
<td>Allowed
<td>Data (HTML <code>data</code> element)

<tr>
<th scope=row><dfn title=concept-DEL><code>DEL</code></dfn>
<td>0
<td>Allowed
<td>Allowed
<td>Removal (HTML <code>del</code> element)

<tr>
<th scope=row><dfn title=concept-DFN><code>DFN</code></dfn>
<td>0 or 1<!-- 0 in SuikaWiki/0.9 -->
<td>Not allowed
<td>Not allowed
<td>Defined term (HTML <code>dfn</code> element)

<tr>
<th scope=row><dfn title=concept-DOTABOVE><code>DOTABOVE</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Text with dot above (<code>dotabove</code> element)

<tr>
<th scope=row><dfn title=concept-EMPH><code>EMPH</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Emphasized text (<code>emph</code> element)

<tr>
<th scope=row><dfn title=concept-F><code>F</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Field name (<code>f</code> element)

<tr>
<th scope=row><dfn title=concept-FENCED><code>FENCED</code></dfn>
<td>0, 1, or 2
<td>Not allowed
<td>Not allowed
<td>Text enclosed by parentheses (<code>fenced</code> element)

<tr>
<th scope=row><dfn title=concept-FRAC><code>FRAC</code></dfn>
<td>1
<td>Not allowed
<td>Not allowed
<td>Fraction (MathML <code>mfrac</code> element)

<tr>
<th scope=row><dfn title=concept-I><code>I</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Italic text (HTML <code>i</code> element)

<tr>
<th scope=row><dfn title=concept-INS><code>INS</code></dfn>
<td>0
<td>Allowed
<td>Allowed
<td>Insertion (HTML <code>ins</code> element)

<tr>
<th scope=row><dfn title=concept-KBD><code>KBD</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>User input (HTML <code>kbd</code> element)

<tr>
<!-- SuikaWiki/0.10 -->
<th scope=row><dfn title=concept-KEY><code>KEY</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Keyboard's key (<code>key</code> element)

<tr>
<th scope=row><dfn title=concept-L><code>L</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Horizontal left-to-right text (<code>sw-l</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-LAT><code>LAT</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Latitude (<code>lat</code> element)

<tr>
<th scope=row><dfn title=concept-LINES><code>LINES</code></dfn>
<td>1 or more
<td>Not allowed
<td>Not allowed
<td>Set of sublines (<code>lines</code> element)

<tr>
<th scope=row><dfn title=concept-LON><code>LON</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Longitude (<code>lon</code> element)

<tr>
<th scope=row><dfn title=concept-LT><code>LT</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Horizontal left-to-right, turned text (<code>sw-lt</code>
<span>element</span>)

<tr>
<th scope=row><dfn title=concept-MACRON><code>MACRON</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Text with macron (<code>sw-macron</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-MAY><code>MAY</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>RFC 2119 keyword "<em class=rfc2119>MAY</em>" (<code>MAY</code> element)

<tr>
<th scope=row><dfn title=concept-MIRRORED><code>MIRRORED</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Mirrored text (<code>sw-mirrored</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-MUST><code>MUST</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>RFC 2119 keyword "<em class=rfc2119>MUST</em>" (<code>MUST</code> element)

<tr>
<th scope=row><dfn title=concept-N><code>N</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Number (<code>n</code> element)

<tr>
<th scope=row><dfn title=concept-OKURI><code>OKURI</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Okuri-gana annotations in Kambun (<code>okuri</code> element)

<tr>
<th scope=row><dfn title=concept-Q><code>Q</code></dfn>
<td>0
<td>Allowed
<td>Allowed
<td>Quotation (HTML <code>q</code> element)

<tr>
<!-- SuikaWiki/0.10 -->
<th scope=row><dfn title=concept-QN><code>QN</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Qualified name (<code>qn</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-R><code>R</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Horizontal right-to-left text (<code>sw-r</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-ROOT><code>ROOT</code></dfn>
<td>1
<td>Not allowed
<td>Not allowed
<td>Root (MathML <code>mroot</code> element)

<tr>
<th scope=row><dfn title=concept-RT><code>RT</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Horizontal right-to-left, turned text (<code>sw-rt</code>
<span>element</span>)

<tr>
<th scope=row><dfn title=concept-RUBY><code>RUBY</code></dfn>
<td>1 or 2
<td>Not allowed
<td>Not allowed
<td>Ruby annotation (HTML <code>ruby</code> element)

<tr>
<th scope=row><dfn title=concept-RUBYB><code>RUBYB</code></dfn>
<td>1
<td>Not allowed
<td>Not allowed
<td>Secondary ruby annotation (<code>rubyb</code> element)

<tr>
<th scope=row><dfn title=concept-SAMP><code>SAMP</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Sample (HTML <code>samp</code> element)

<tr>
<th scope=row><dfn title=concept-SEE><code>SEE</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>"See also" references (<code>sw-see</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-SHOULD><code>SHOULD</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>RFC 2119 keyword "<em class=rfc2119>SHOULD</em>" (<code>SHOULD</code> element)

<tr>
<th scope=row><dfn title=concept-SMALLCAPS><code>SMALLCAPS</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Small-caps text (<code>smallcaps</code> element)

<tr>
<th scope=row><dfn title=concept-SNIP><code>SNIP</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Snipped point annotation (<code>snip</code> element)

<tr>
<!-- SuikaWiki/0.10 -->
<th scope=row><dfn title=concept-SPAN><code>SPAN</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Span of text (HTML <code>span</code> element)

<tr>
<th scope=row><dfn title=concept-SQRT><code>SQRT</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Square root (MathML <code>msqrt</code> element)

<tr>
<!-- SuikaWiki/0.10 -->
<th scope=row><dfn title=concept-SRC><code>SRC</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Short annotation for citation (<code>src</code> element)

<tr>
<th scope=row><dfn title=concept-SUBSUP><code>SUBSUP</code></dfn>
<td>1
<td>Not allowed
<td>Not allowed
<td>Pair of subscript and superscript (<code>subsup</code> element)

<tr>
<th scope=row><dfn title=concept-SUB><code>SUB</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Subscript (HTML <code>sub</code> element)

<tr>
<th scope=row><dfn title=concept-SUP><code>SUP</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Superscript (HTML <code>sup</code> element)

<tr>
<th scope=row><dfn title=concept-TATE><code>TATE</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Vertical text (<code>sw-tate</code> <span>element</span>)

<tr>
<!-- SuikaWiki/0.10 -->
<th scope=row><dfn title=concept-TIME><code>TIME</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Date or time (HTML <code>time</code> element)

<tr>
<th scope=row><dfn title=concept-TZ><code>TZ</code></dfn>
<td>0 or 1
<td>Not allowed
<td>Not allowed
<td>Time zone offset (<code>tz</code> element)

<tr>
<th scope=row><dfn title=concept-U><code>U</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Underlined text (HTML <code>u</code> element)

<tr>
<th scope=row><dfn title=concept-UNDER><code>UNDER</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Text with an annotation under it (MathML <code>munder</code> element)

<tr>
<th scope=row><dfn title=concept-UNDEROVER><code>UNDEROVER</code></dfn>
<td>1
<td>Not allowed
<td>Not allowed
<td>Text with annotations under and over it (MathML <code>munderover</code> element)

<tr>
<th scope=row><dfn title=concept-V><code>V</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Vertical top-to-bottom text (<code>sw-v</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-VB><code>VB</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Vertical bottom-to-top text (<code>sw-vb</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-VT><code>VT</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Vertical top-to-bottom, turned text (<code>sw-vt</code>
<span>element</span>)

<tr>
<th scope=row><dfn title=concept-VBT><code>VBT</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Vertical bottom-to-top, turned text (<code>sw-vbt</code>
<span>element</span>)

<tr>
<th scope=row><dfn title=concept-VAR><code>VAR</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Variable (HTML <code>var</code> <span>element</span>)

<tr>
<th scope=row><dfn title=concept-VECTOR><code>VECTOR</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Text with vector symbol (<code>vector</code> element)

<tr>
<th scope=row><dfn title=concept-WEAK><code>WEAK</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Small print (<code>weak</code> element)

<tr>
<th scope=row><dfn title=concept-YOKO><code>YOKO</code></dfn>
<td>0
<td>Not allowed
<td>Not allowed
<td>Horizontal text (<code>yoko</code> <span>element</span>)

</table>

<div class="note memo">

<p>A future revison to this specification might define
more <span title=concept-tag-name>tag names</span>.

</div>

<div class="note memo">

<p>An inline start tag whose tag name is <code
title=concept-INS>INS</code> or <code title=concept-DEL>DEL</code>
might not be placed at the beginning of a <span
title=concept-line-contents>line contents</span> construct, since it
could be interpreted as a <span title=concept-block-start-tag>block
start tag</span>.

</div>

<!-- similar terms are defined in parser specification -->
<p>A <dfn title=concept-class-specification>class specification</dfn>
represents properties for the construct including it, such as class
names.  The <span title=concept-class-specification>class
specification</span> syntactically consist of a <code>(</code>
character followed by the
<span title=concept-class-specification-body>body of the class
specification</span> followed by a <code>)</code> character.
The <dfn title=concept-class-specification-body>body of a class
specification</dfn> consists of zero or
more <span title=concept-character>text characters</span>
excluding <code>(</code>,
<code>)</code>, and <code>\</code>.

<p>A <span title=concept-class-specification-body>body of a class
specification</span> is a <span>set of space-separated tokens</span>
with the following tokens:

  <dl class=switch>

    <div>
      <dt>A <code>#</code> <span>character</span> followed by zero or
      more <span title=character>characters</span>
      <dd>It is a <code>#</code> <span>character</span> followed by an
      ID value (which is semantically equivalent to the
      HTML <code title=attr-html-id>id</code> <span>attribute</span>).
      At most one ID value is allowed in
      a <span title=concept-class-specification>class
      specification</span>.
    </div>

    <div>
      <dt>A <code>.</code> <span>character</span> followed by zero or
      more <span title=character>characters</span>
      <dd>It is a <code>.</code> <span>character</span> followed by an
      <span title="item types">item type</span> value (which is
      semantically equivalent to a token in the
      HTML <code title=attr-html-itemprop>itemprop</code>
      <span>attribute</span>).
    </div>

    <div>
      <dt>Any other value
      <dd>It is a class value (which is semantically equivalent to a
      token in the
      HTML <code title=attr-html-class>class</code> <span>attribute</span>).
    </div>
  </dl>
  
<dl class=abnf>

<dt><dfn title=abnf-tagged-inline-element>tagged-inline-element</dfn>

<dd>= <span title=abnf-inline-start-tag>inline-start-tag</span> [<span
title=abnf-line-contents>line-contents</span>] *(<span
title=abnf-inline-middle-tag>inline-middle-tag</span> [<span
title=abnf-line-contents>line-contents</span>]) <span
title=abnf-inline-end-tag>inline-end-tag</span>

<dt><dfn title=abnf-inline-start-tag>inline-start-tag</dfn>

<dd>= "[" <span title=abnf-tag-name>tag-name</span> [<span
title=abnf-class-specification>class-specification</span>] [<span
title=abnf-language-specification>language-specification</span>] "["

<dt><dfn title=abnf-tag-name>tag-name</dfn>

<dd>= 1*<span title=abnf-LALPHA>LALPHA</span>

<dt><dfn title=abnf-class-specification>class-specification</dfn>

<dd>= "(" *<span title=abnf-clchar>clchar</span> ")"

<dt><dfn title=abnf-clchar>clchar</dfn>

<dd>= <span title=abnf-char>char</span> &minus; ("(" / ")" / "\")

<dt><dfn title=abnf-language-specification>language-specification</dfn>

<dd>= "@" *<span title=abnf-ltchar>ltchar</span>

<dt><dfn title=abnf-ltchar>ltchar</dfn>

<dd>= <span title=abnf-alpha>ALPHA</span> / <span
title=abnf-DIGIT>DIGIT</span> / "-"

<dt><dfn title=abnf-inline-middle-tag>inline-middle-tag</dfn>

<dd>= "]" *<span title=abnf-white-space>white-space</span> [<span
title=abnf-language-specification>language-specification</span>] "["

<dt><dfn title=abnf-inline-end-tag>inline-end-tag</dfn>

<dd>= "]" [<span title=abnf-anchor-internal>anchor-internal</span> /
<span title=abnf-anchor-external>anchor-external</span>] "]"

</dl>

<p>The <dfn title=concept-form-name-specification>form name
specification</dfn>, if any, defines the <dfn
title=concept-form-name>name</dfn> of the <span
title=concept-form>form</span>.  It has to be different from any other
<span title=concept-form-name>form name</span> defined in the <span
title=concept-document>document</span>.  A <span
title=concept-form-name-specification>form name specification</span>
is syntactically <span title=concept-class-specification>class
specification</span> and the <span
title=concept-class-specification-body>body</span> of it is the <span
title=concept-form-name>form name</span>.  A <span
title=concept-form-name>form name</span> cannot contain <span>white
space characters</span>.

<table>

<thead>
<tr>
<th scope=col><span title=concept-specific-form-name>Specific form
name</span>
<th scope=col>Syntax of <span title=concept-specific-form-parameters>specific 
form parameters</span>
<th scope=col>Semantics

<tbody>

<tr>
<th scope=row><dfn title=concept-comment><code>comment</code></dfn>
<td>Empty
<td>Comment input form.

<tr>
<!-- Dropped before SuikaWiki/0.9 specification -->
<th scope=row><dfn title=concept-embed><code>embed</code></dfn>
<td><code class=abnf>['IMG:'] <span title=abnf-identifier>identifier</span></code>
<td>Embedding another page.  The <span
title=concept-specific-form-parameters>parameter</span> specifies the
<span title=concept-WikiName>WikiName</span> of the page embedded.  If
the <span title=concept-specific-form-parameters>parameter</span>
begins with a string <code>IMG:</code>, the page is embedded as an
image and the string does not form the part of the <span
title=concept-WikiName</span>WikiName</span>.

<tr>
<th scope=row><dfn title=concept-form><code>form</code></dfn>
<td>N/A
<td>Reserved.

<tr>
<th scope=row><dfn title=concept-rcomment><code>rcomment</code></dfn>
<td>Empty
<td>Comment input form; a new comment is inserted <em>after</em> the 
<span title=concept-specific-form>form</span>.

<tr>
<th scope=row><dfn title=concept-searched><code>searched</code></dfn>
<td><code class=abnf><span title=abnf-identifier>identifier</span></code>
<td>Insert a search result for the <span
title=concept-specific-form-parameters>parameter</span>.

</table>

<p>The <span title=concept-form>form</span> is an extension mechanism
for the <span>SWML text serialization</span>.  <span
class=XXX>...</span>

<p>The <dfn title=concept-generic-form>generic form</dfn> can be used
to embed a <span title=concept-WikiForm>WikiForm</span> specification.
<dfn title=concept-WikiForm>WikiForm</dfn> provides a generic
framework for describing user input forms and templates used for
processing form inputs.

<p>Three <span title=concept-form-fields>form fields</span> in a <span
title=concept-generic-form>form</span> represents <dfn
title=concept-input-template>input template</dfn>, <dfn
title=concept-output-template>output template</dfn>, and <dfn
title=concept-option-template>options</dfn>.  Interpretation and
processing for these fields are implementation dependent.

<p>The <span title=concept-specific-form-name>name</span> <span
title=concept-form>form</span> cannot be used.

<p><span title=concept-specific-form-name>Names</span> <code
title=concept-embed>embed</code>, <code
title=concept-rcomment>rcomment</code>, and <code
title=concept-searched>searched</code> are obsolete and cannot be
used.

<dl class=abnf>

<dt><dfn title=abnf-form>form</dfn>

<dd>= <span title=abnf-generic-form>generic-form</span> / <span
title=abnf-specific-form>specific-form</span>

<dt><dfn title=abnf-generic-form>generic-form</dfn>

<dd>= "[[#" 'form' [<span
title=abnf-form-name-specification>form-name-specification</span>] ":"
<span title=abnf-form-field>form-field</span> ":" <span
title=abnf-form-field>form-field</span> [":" <span
title=abnf-form-field>form-field</span>] "]]"

<dt><dfn title=abnf-form-name-specification>form-name-specification</dfn>

<dd>= <span title=abnf-class-specification>class-specification</span>

<dt><dfn title=abnf-form-field>form-field</dfn>

<dd>= "'" *(<span title=abnf-char>char</span> &minus; ("'" / "\") /
<span title=abnf-quoted-pair>quoted-pair</span>) "'"

<dt><dfn title=abnf-specific-form>specific-form</dfn>

<dd>= "[[#" <span
title=abnf-specific-form-name>specific-form-name</span> [":" <span
title=abnf-specific-form-parameters>specific-form-parameters</span>]
"]]"

<dt><dfn title=abnf-specific-form-name>specific-form-name</dfn>

<dd>= 1*(<span title=abnf-LALPHA>LALPHA</span> / "-")

<dt><dfn title=abnf-specific-form-parameters>specific-form-parameters</dfn>

<dd>= <span title=abnf-identifier>identifier</span> *(":" <span
title=abnf-identifier>identifier</span>)

</dl>

<dl class=abnf>

<dt><dfn title=abnf-strong>strong</dfn>

<dd>= "'''" [<span title=abnf-line-contents>line-contents</span>]
"'''"

<dt><dfn title=abnf-emphasis>emphasis</dfn>

<dd>= "''" [<span title=abnf-line-contents>line-contents</span>] "''"

</dl>

</section>

<section>
<h1>Images</h1>

<p>A <span title=concept-document>document</span> can contain
an <dfn title=concept-image>image</dfn> by including a
string <code>__IMAGE__</code> followed by
a <span title=concept-newline>newline</span> followed
by <span title="forgiving-base64 encode">Base64-encoded</span> image
data, at the end of
the <span title=concept-document>document</span>.  <span title=concept-parameter>Parameters</span> <code title=concept-parameter-image-type>image-type</code>
and <code title=concept-parameter-image-alt>image-alt</code> provide
metadata for the <span title=concept-image>image</span>.

<dl class=abnf>

<dt><dfn title=abnf-obs-image>obs-image</dfn>

<dd>= '__IMAGE__' *<span title=concept-char>char</span>

</dl>

</section>

<section>
<h1>Lexical structures</h1>

<p>An <dfn title=concept-entity-reference>entity reference</dfn> is a
string <code>__&amp;&amp;</code>, followed by
a <span title=concept-entity-reference-name>entity reference
name</span>, followed by a string <code>&amp;&amp;__</code>.

<p>An <dfn title=concept-entity-reference-name>entity reference
name</dfn> is a string of one or
more <span title=concept-character>text characters</span> that does
not contain substring <code>&amp;&amp;__</code>.

<p>If the <span>Character Reference Table</span>
[<span title=concept-entity-reference-name>entity reference
name</span>] <span>exists</span>,
the <span title=concept-entity-reference>entity reference</span>
represent a character <span>Character Reference Table</span>
[<span title=concept-entity-reference-name>entity reference
name</span>].

<p>Otherwise, the <span title=concept-entity-reference>entity
reference</span> is an obsolete entity reference, which was expected
to be replaced by a fragment imported from another document.  It is no
longer supported.

<dl class=abnf>

<dt><dfn title=abnf-entity-reference>entity-reference</dfn>

<dd>= "__&&" 1*<span title=abnf-char>char</span> "&&__"

<dt><dfn title=abnf-entity-reference-name>entity-reference-name</dfn>

<dd>= 1*<span title=abnf-char>char</span> &minus;
*<span title=abnf-char>char</span> "&&__"
*<span title=abnf-char>char</span>

</dl>

<p>A <dfn title=concept-character>text character</dfn> is a <span>code
point</span> that is <em>not</em> U+000A or U+000D.

<p>A <dfn title=concept-newline>newline</dfn> is a U+000D character, a
U+000A character, or a U+000D character followed by a U+000A
character.

<p>A <dfn title=concept-quoted-string>quoted string</dfn> is zero or
more <span title=concept-character>text characters</span> preceded by a 
<code>"</code> character and followed by a <code>"</code> character.
In a <span title=concept-quoted-string>quoted string</span>, character
<code>\</code> can only be used as part
of <dfn title=concept-quoted-pair>quoted pair</dfn>.
A <span title=concept-quoted-pair>quoted pair</span> is <code>\</code>
followed by a <span title=concept-character>text character</span>.
The <dfn title=concept-quoted-string-value>value of a quoted
string</dfn> is the string obtained by removing the first and
last <code>"</code> characters removing the <code>\</code> characters
at the beginning of any <span title=concept-quoted-pair>quoted
pair</span>.

<dl class=abnf>

<dt><dfn title=abnf-identifier>identifier</dfn>

<dd>= 1*(<span title=abnf-ALPHA>ALPHA</span> / <span
title=abnf-DIGIT>DIGIT</span> / "-" / <span
title=abnf-non-ascii>non-ascii</span>)

<dt><dfn title=abnf-non-ascii>non-ascii</dfn>

<dd>= <span title=abnf-char>char</span> &minus; %x00-7f

<dt><dfn title=abnf-char>char</dfn>

<dd>= &lt;Any character> &minus; (%x0d / %x0a)

<dt><dfn title=abnf-quoted-string>quoted-string</dfn>

<dd>= %x22 *(<span title=abnf-char>char</span> &minus; ("\" / %x22) /
<span title=abnf-quoted-pair>quoted-pair</span>) %x22

<dt><dfn title=abnf-quoted-pair>quoted-pair</dfn>

<dd>= "\" <span title=abnf-char>char</span>

<dt><dfn title=abnf-newline>newline</dfn>

<dd>= %x0d %x0a / %x0d / %x0a

<dt><dfn title=abnf-white-space>white-space</dfn>

<dd>= %x09 / %x20

</dl>

</section>

</section>

<section>
<h1>Parsing documents in the <span>SWML text serialization</span></h1>

<p>This section specifies how to convert a <span>string</span> into a
<span>node tree</span>, assuming the string is written in
the <span>SWML text serialization</span>.  This process is referred to
as <dfn title="parsing an SWML text serialization">parsing</dfn> and
an implementation that performes this process is referred to as
<dfn title="SWML text serialization parser">parser</dfn>.

<div class=note>

<p>How to convert a <span>byte sequence</span> into
a <span>string</span> is outside of the scope of this specification.

</div>

<p>The <span title="SWML text serialization
paraser">parser</span> <em class=rfc2119>MUST</em> run these steps
to <span title="parsing an SWML text serialization">parse</span> a
string <var>string</var>:

  <ol class=steps>

  <li>Let <var>document</var> be a new <code>Document</code>.

  <li>Let <var>html</var> be the result of <span title="create an
  element">creating</span> an <code>html</code> <span>element</span>
  in the <span>HTML namespace</span> in <var>document</var>.

  <li><span title="set an attribute value">Set</span>
  <code>xmlns</code> <span>attribute</span> in the <span>XMLNS
  namespace</span> to the <span>HTML namespace</span>.

  <li><span title=append>Append</span> <var>html</var>
  to <var>document</var>

  <li>Let <var>head</var> be the result of <span title="create an
  elmeent">creating</span> a <code>head</code> <span>element</span> in
  the <span>HTML namespace</span>.

  <li><span title=append>Append</span> <var>head</var>
  to <var>html</var>.

  <li>Let <var>body</var> be the result of <span title="create an
  elmeent">creating</span> a <code>body</code> <span>element</span> in
  the <span>HTML namespace</span>.

  <li><span title=append>Append</span> <var>body</var>
  to <var>html</var>.

  <li>Let <var>tokens</var> be the result of running
  the <span>tokenization</span> stage with <var>string</var>.

  <li>Run  the <span>tree construction</span> stage
  with <var>tokens</var> and <var>document</var>.

  <li>Return <var>document</var>.

  </ol>

<p>Following definitions are used to describe the <span title="parsing
an SWML text serialization">parsing algorithm</span>:

<ul>

<li>The <dfn>document element</dfn> is <var>html</var>.

<li>The <dfn>head element</dfn> is <var>head</var>.

<li>The <dfn>body element</dfn> is <var>body</var>.

<li>The <dfn>image element</dfn> is initially null.

<li>When the <span title="SWML text serialization
parser">parser</span>
<dfn title="append a character">appends a character</dfn>
<var>char</var> to node <var>node</var>, the
<code>manakai_append_text</code> method <cite class=XXX>...</cite> <em
class=rfc2119>MUST</em> be invoked on <var>node</var> with the
argument <var>char</var>.

<li>When an <span>attribute</span> is created, its
<span>namespace</span> and <span>namespace
prefix</span> <em class=rfc2119>MUST</em> both set
to <code>null</code>, unless an <span>attribute</span>
in <var>namespace</var> is created, in which case
its <span>namespace</span> <em class=rfc2119>MUST</em> be set to
the <var>namespace</var>'s URL and its <span>namespace
prefix</span> <em class=rfc2119>MUST</em> be set
to <var>namespace</var>'s <dfn>preferred prefix</dfn>.

<!-- similar terms are defined in syntax section -->
<li>A <dfn>class specification</dfn> is a string consist of a
<code>(</code> character, followed by zero or more sequence
of <span>code point</span> that is <em>not</em> one
of <code>(</code>, <code>)</code>, or <span>white space
characters</span>, and finally followed by a <code>)</code>
character.  <!-- Though the SuikaWiki3 implementation of the parser
support quoted-pair in class specification in [PRE[ block start tag
and inline start tags, it is not allowed in [INS[ and [DEL[, and is
not part of SuikaWiki/0.9 specification, and it should not appear in
any existing SuikaWiki article afaict, this version of the SWML
specification does not support such escaping syntax. --> The <dfn>body
of a class specification</dfn> is the substring of the <span>class
specification</span> between parentheses (exclusive).  It might be the
empty string.

</ul>

<section>
<h1>Tokenization of lines</h1>

<p>When a string of characters is <dfn
title=tokenization>tokenized</dfn>, the string <var>s</var> <em
class=rfc2119>MUST</em> be processed as follows:

<ol class=steps>

<li>Let <var>pos</var> be zero (0).  It represents the index in
<var>s</var>.  The index of the first character in <var>data</var> is
zero (0).

<li>If <var>pos</var> is greater than or equal to the length of
<var>s</var>, then emit an <span>end-of-file token</span> and abort
these steps.

<li>Let <var>line</var> be the empty string.

<li>If the <var>pos</var>th character of <var>s</var> is U+000D <code
class=charname>CARRIAGE RETURN</code>, <span
title=process-line>process</span> <var>line</var>.  Set
<var>line</var> to the empty string.  If the (<var>pos</var> + 1)th
character of <var>s</var> is U+000A <code class=charname>LINE
FEED</code>, increment
<var>pos</var> by one (1).

<li>Otherwise, if the <var>pos</var>th character of <var>s</var> is
U+000A <code class=charname>LINE
FEED</code>, <span title=process-line>process</span> <var>line</var>.
Set
<var>line</var> to the empty string.

<li>Otherwise, append the <var>pos</var>th character of <var>s</var>
to <var>line</var>.

<li>Increase <var>pos</var> by one (1).

<li>Go back to the fourth step of these steps.

</ol>

<p>The steps above <dfn>emit</dfn> one or more sequence of <dfn
title=token>tokens</dfn>, which are inputs to the <span>tree
construction</span> stage.  A <span>token</span> can have zero or more
properties, depending on the kind of the <span>token</span>.  There
are several kinds of <span title=token>tokens</span> and properties as
follows:

<dl>

<dt><dfn>Block start tag token</dfn>

<dd><dfn title=block-start-tag-classes>Classes</dfn> and <dfn
title=block-start-tag-tag-name>tag name</dfn> properties.

<dt><dfn>Block end tag token</dfn>

<dd><dfn title=block-end-tag-tag-name>Tag name</dfn> property.

<dt><dfn>Character token</dfn>

<dd><dfn title=character-data>Data</dfn> property.

<dt><dfn>Comment paragraph start token</dfn>

<dd>No property.

<dt><dfn>Editorial note start token</dfn>

<dd>No property.

<dt><dfn>Element token</dfn>

<dd><dfn title=element-local-name>Local name</dfn>, <dfn
title=element-namespace>namespace</dfn>, <dfn
title=element-anchor-attribute>anchor attribute</dfn>, <dfn
title=element-by-attribute>by attribute</dfn>, <dfn
title=element-res-scheme-attribute>resScheme attribute</dfn>, <dfn
title=element-res-parameter-attribute>resParameter attribute</dfn>,
and <dfn title=element-content>content</dfn> attribute.  Default for
these properties are null.

<dt><dfn>Emphasis token</dfn>

<dd>No property.

<dt><dfn>Empty line token</dfn>

<dd>No property.

<dt><dfn>End-of-file token</dfn>

<dd>No property.

<dt><dfn>Form token</dfn>

<dd><dfn title=form-name>Name</dfn>, <dfn title=form-id>id</dfn>, and
<dfn title=form-parameters>parameters</dfn> properties.

<dt><dfn>Heading start token</dfn>

<dd><dfn title=heading-start-depth>Depth</dfn> property.

<dt><dfn>Heading end token</dfn>

<dd>No property.

<dt><dfn>Inline start tag token</dfn>

<dd><dfn title=inline-start-tag-tag-name>Tag name</dfn>, <dfn
title=inline-start-tag-classes>classes</dfn>, and <dfn
title=inline-start-tag-language>language</dfn> properties.  Default
for these properties is null.

<dt><dfn>Inline middle tag token</dfn>

<dd><dfn title=inline-middle-tag-language>language</dfn> property,
whose default is null.

<dt><dfn>Inline end tag token</dfn>

<dd><dfn title=inline-end-tag-anchor-attribute>Anchor attribute</dfn>,
<dfn title=inline-end-tag-res-scheme-attribute>resScheme
attribute</dfn>, and <dfn
title=inline-end-tag-res-parameter-attribute>resParameter
attribute</dfn> properties.  Default for these properties is null.

<dt><dfn>Labeled list start token</dfn>

<dd>No property.

<dt><dfn>Labeled list middle token</dfn>

<dd>No property.

<dt><dfn>List start token</dfn>

<dd><dfn title=list-start-depth>Depth</dfn> property.

<dt><dfn>Preformatted start token</dfn>

<dd>No property.

<dt><dfn>Preformatted end token</dfn>

<dd>No property.

<dt><dfn>Quotation start token</dfn>

<dd><dfn title=quotation-start-depth>Depth</dfn> property.

<dt><dfn>Strong token</dfn>

<dd>No property.

<dt><dfn>Table row start token</dfn>

<dd>No property.

<dt><dfn>Table row end token</dfn>

<dd>No property.

<dt><dfn>Table cell start token</dfn>

<dd><dfn title=table-cell-start-header>Header</dfn> property.

<dt><dfn>Table cell end token</dfn>

<dd>No property.

<dt><dfn>Table colspan cell token</dfn>

<dd>No property.

<dt><dfn>Block element token</dfn>

<dd><dfn title=block-element-classes>classes</dfn> property, whose
default is null.

</dl>

<p><dfn>Mode</dfn> is a state of the <span
title=tokenization>tokenizer</span> and is one of
"<span>initial</span>" (the initial value used when the
<span>tokenization</span> starts), "<span>body</span>",
"<span>preformatted</span>", "<span>preformatted block</span>", and
"<span>image data</span>".

<p><dfn>Continuous line flag</dfn> is another flag of the <span
title=tokenization>tokenizer</span>, representing whether a new line
character should be appended to the data, and takes either true or
false.  This flag is mainly used in the "<span>body</span>"
<span>mode</span>.

<p>When a <dfn title=process-line><var>line</var> is processed</dfn>,
rules specified in the following subsections is used according to the
appropriate <span>mode</span>.  Rules below sometimes require the <dfn
title=reprocess-line><var>line</var> be reprocessed</dfn>.  In such
cases, rules for the appropriate <span>mode</span> <em
class=rfc2119>MUST</em> be followed with the same <var>line</var>.

<section>
<h1>The "<span>initial</span>" mode</h1>

<p>In the "<dfn>initial</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> <span>starts with</span> <code>#?</code>

<dd><span>Parse a magic line</span> <var>line</var>.

<dt>Otherwise

<dd>

<ol class=steps>

<li>Set the <span>continuous line flag</span> to false.

<li>Switch to the "<span>body</span>" <span>mode</span> and <span
title=reprocess-line>reprocess</span> <var>line</var>.

</ol>

</dl>

</section>

<section>
<h1>The "<span>body</span>" mode</h1>

<p>In the "<dfn>body</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is empty

<dd>

<ol class=steps>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit an <span>empty line token</span>.

</ol>

<dt>If <var>line</var> <span>starts with</span> a <span title="white
space characters">white space character</span>

<dd>

<ol class=steps>

<li>Emit a <span>preformatted start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

<li>Switch to the "<span>preformatted</span>" mode.

</ol>

<dt>If <var>line</var> <span>starts with</span> <code>*</code>

<dd>

<ol class=steps>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be zero (0).

<li>While the first character of <var>data</var>, if any, is
<code>*</code>, run the following substeps:

<ol>

<li>Increase <var>depth</var> by one (1).

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>*</code>.)

</ol>

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>heading start token</span> whose <span
title=heading-start-depth>depth</span> set to <var>depth</var>.

<li>Run the <span>algorithm to tokenize a text</span> with <var>data</var>.

<li>Emit a <span>heading end token</span>.

<li>Finally, set the <span>continuous line flag</span> to false.

</ol>


<dt>If <var>line</var> is a string consists of <code>-*-*-</code>,
optionally followed by a <span>class specification</span>, followed by
zero or more <span>white space characters</span>

<dd>

<ol class=steps>

<li>Let <var>classes</var> be the <span title="body of a class
specification">body</span> of the <span>class specification</span> in
the matched substring of <var>data</var>, if any, or null, otherwise.

<li>Emit a <span>block element token</span>
whose <span title=block-element-classes>classes</span> set
to <var>classes</var>.

<li>Set the <span>continuous line flag</span> to false.

</ol>


<dt>If <var>line</var> <span>starts with</span> <code>-</code>
or <code>=</code>

<dd>

<ol class=steps>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be the empty string.

<li>While the first character of <var>data</var>, if any, is
<code>-</code> or <code>=</code>, run the following substeps:

<ol>

<li>Append the first character of <var>data</var> to <var>depth</var>.

<li>Remove the first character of <var>data</var>.

</ol>

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>list start token</span> whose <span
title=list-start-depth>depth</span> set to <var>depth</var>.

<li>Run the <span>algorithm to tokenize a text</span> with <var>data</var>.

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> <span>starts with</span> <code>:</code>

<dd>

<ol class=steps>

<li>Let <var title>name</var> be the empty string.

<li>Let <var title>data</var> be <var>line</var>.

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>:</code>.)

<li>While <var>data</var> is not empty and the first character of
<var>data</var> is <em>not</em> <code>:</code>, run the following
substeps:

<ol>

<li>Append the first character of <var title>data</var> to <var
title>name</var>.

<li>Remove the first character of <var title>data</var>.

</ol>

<li>If <var title>name</var> is the empty string, run the following
substeps:

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> is a <code>:</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with <var
title>name</var>.

</ol>

<div class="note memo">

<p>In this case, <var>line</var> does not represent a description
list.  <!-- For compatibility with previous implementations. -->

</div>

<li>Otherwise, run the following substeps:

<ol>

<li>Remove <span>white space characters</span> at the beginning of
<var title>name</var>, if any.

<li>Remove <span>white space characters</span> at the end of <var
title>name</var>, if any.

<li>Emit a <span>labeled list start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with <var
title>name</var>.

<li>Remove the first character of <var title>data</var>.  (The removed
character will be <code>:</code>.)

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>labeled list middle token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> <span>starts with</span> <code>></code>

<dd>

<ol class=steps>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be zero (0).

<li>While the first character of <var>data</var>, if any, is
<code>></code>, run the following substeps:

<ol>

<li>Increase <var>depth</var> by one (1).

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>></code>.

</ol>

<li>If <var>depth</var> is two (2), <var>data</var> is not empty, and
the first character of <var>data</var> is one of <span>digits</span>,
run the following substeps:

<ol>

<li>Prepend two <code>></code> characters to <var>data</var>.

<li>If the <span>continuous line flag</span> is true, preprend a
U+000A <code class=charname>LINE FEED</code> character to
<var>data</var>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

<li>Set the <span>continuous line flag</span> to true.

</ol>

<li>Otherwise, run the following substeps:

<ol>

<li>Emit a <span>quotation start token</span> whose <span
title=quotation-start-depth>depth</span> set to <var>depth</var>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>@@</code>, run the
following substeps: <!-- SuikaWiki/0.10 addition -->

<ol>

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>@@</code>).

<li>Emit a <span>editorial note start token</span>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Set the <span>continuous line flag</span> to true.

</ol>

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>;;</code>, run the
following substeps: <!-- SuikaWiki/0.10 addition -->

<ol>

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>;;</code>).

<li>Emit a <span>comment paragraph start token</span>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Set the <span>continuous line flag</span> to true.

</ol>

<li>Otherwise, if <var title>data</var> is not empty, set the
<span>continuous line flag</span> to true.

<li>Otherwise, set the <span>continuous line flag</span> to false.

<li>In any case, run the <span>algorithm to tokenize a text</span>
with <var>data</var>.

</ol>

</ol>

<dt>If <var>line</var> is a string consist of a <code>[</code>
character, followed by
a <span title=concept-section-block-tag-name>section block tag
name</span>, optionally followed by <span>class specification</span>,
followed by a <code>[</code> character, followed by zero or
more <span>white space characters</span>, followed by zero or
more <span title=character>characters</span>

<dd>

<ol class=steps>

<li>Emit a <span>block start tag token</span>
whose <span title=block-start-tag-tag-name>tag name</span> is
the <span title=concept-section-block-tag-name>section block tag
name</span>, and <span title=block-start-tag-classes>classes</span> is
the <span title="body of a class specification">body</span> of
the <span>class specification</span>, if any, or null otherwise.

<li>Remove the substring of <var>line</var>, from the beginning of the
string, to the <code>[</code> character after
the <span title=concept-section-block-tag-name>section block tag
name</span> and <span>class specification</span> (if any),
from <var>line</var>.

<li>Remove <span>white space characters</span> at the beginning of
<var>line</var>, if any.

<li>If <var>line</var> is not the empty string:

<ol>

<li>Set <var>tag name</var>
to <code title=concept-FIGCAPTION>FIGCAPTION</code>.

<li>If the the <span title=concept-section-block-tag-name>section
block tag name</span> is <code title=concept-TALK>TALK</code>,
set <var>tag name</var> to <code title=concept-SPEAKER>SPEAKER</code>.

<li>Emit a <span>block start tag token</span>
whose <span title=block-start-tag-tag-name>tag name</span> is <var>tag
name</var>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

<li>Emit a <span>block end tag token</span>
whose <span title=block-end-tag-tag-name>tag name</span> is <var>tag
name</var>.

</ol>

<li>Set the <span>continuous line flag</span> to false.

</ol>

<dt>If <var>line</var> is a string consist of <code>[PRE</code>,
optionally followed by <span>class specification</span>, followed by
a <code>[</code> character, followed by zero or more <span>white space
characters</span>

<dd>

<ol class=steps>

<li>Emit a <span>block start tag token</span>
whose <span title=block-start-tag-tag-name>tag name</span>
is <code>PRE</code>
and <span title=block-start-tag-classes>classes</span> is
the <span title="body of a class specification">body</span> of
the <span>class specification</span>, if any, or null otherwise.

<li>Set the <span>continuous line flag</span> to false.

<li>Switch to the "<span>preformatted block</span>"
<span>mode</span>.

</ol>

<dt>If <var>line</var> <span>starts with</span> <code>@@</code>
<!-- SuikaWiki/0.10 addition -->

<dd>

<ol class=steps>

<li>Let <var>data</var> be <var>line</var>.

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>@@</code>.)

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>editorial note start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

<li>Set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> <span>starts with</span> <code>;;</code>
<!-- SuikaWiki/0.10 addition -->

<dd>

<ol class=steps>

<li>Let <var>data</var> be <var>line</var>.

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>;;</code>.)

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>comment paragraph start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

<li>Set the <span>continuous line flag</span> to true.

</ol>

<!--

Though the SuikaWiki3's parser recognizes "[[# ...]] @@" or "[[#
... ]] ;;" as comment paragraph or editorial note preceded by a form
block, it considered as a bug and this specification treates these
characters as character data.

-->

<dt>If <var>line</var> is a string consist of a <code>]</code>
character, followed by
a <span title=concept-section-block-tag-name>section block tag
name</span>, followed by a <code>]</code> character, followed by zero
or more <span>white space characters</span>

<dd>

<ol class=steps>

<li>Emit a <span>block end tag token</span>
whose <span title=block-end-tag-tag-name>tag name</span> is
the <span title=concept-section-block-tag-name>section block tag
name</span>.

<li>Set the <span>continuous line flag</span> to false.

</ol>

<dt>If <var>line</var> <span>starts with</span> <code>,</code>

<dd>

<ol class=steps>

<li>Run the <span>algorithm to tokenize a table row</span> with
<var>line</var>.

<li>Set the <span>continuous line flag</span> to false.

</ol>

<dt>If <var>line</var> is <code>__IMAGE__</code>

<dd>Switch to the "<span>image data</span>" <span>mode</span>.  <!--
SuikaWikiImage/0.9 addition -->

<dt>Otherwise

<dd>

<ol class=steps>

<li>If the <span>continuous line flag</span> is true, emit a
<span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

<li>Set the <span>continuous line flag</span> to true.

</ol>

</dl>

</section>

<section>
<h1>The "<span>preformatted</span>" mode</h1>

<p>In the "<dfn>preformatted</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is the empty string

<dd>

<ol class=steps>

<li>Emit a <span>preformatted end token</span>.

<li>Switch to the "<span>body</span>" <span>mode</span> and <span
title=reprocess-line>reprocess</span> <var title>line</var>.

</ol>

<dt>If <var>line</var> is a string consist of a <code>]</code>
character, followed by
a <span title=concept-section-block-tag-name>section block tag
name</span>, followed by a <code>]</code> character, followed by zero
or more <span>white space characters</span>

<!--

In SuikaWiki3 implementation,

[INS[
[sp]aaa
]INS]
[sp]bbb

would create two pre with one lines, where

[sp]aaa
]INS]
[sp]bbb

would create one pre with three lines.  SuikaWiki/0.9 spec does not
specify how to implement the latter example.

-->

<dd>

<ol class=steps>

<li>Emit a <span>preformatted end token</span>.

<li>Emit a <span>block end tag token</span>
whose <span title=block-end-tag-tag-name>tag name</span> is
the <span title=concept-section-block-tag-name>section block tag
name</span>.

<li>Set the <span>continuous line flag</span> to false.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>Otherwise

<dd>

<ol class=steps>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

</ol>

</dl>

</section>

<section>
<h1>The "<span>preformatted block</span>" mode</h1>

<p>In the "<dfn>preformatted block</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is a string consist of <code>]PRE]</code>
followed by zero or more <span>white space characters</span>

<dd>

<ol class=steps>

<li>Emit a <span>block end tag token</span>
whose <span title=block-end-tag-tag-name>tag name</span>
is <code>PRE</code>.

<li>Set the <span>continuous line flag</span> to false.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>Otherwise

<dd>

<ol class=steps>

<li>If the <span>continuous line flag</span> is true, emit a
<span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

<li>Set <span>continuous line flag</span> to true.

</ol>

</dl>

</section>

<section>
<h1>The "<span>image data</span>" mode</h1>

<p>In the "<dfn>image data</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<ol class=steps>

<li>If the <span>image element</span> is null, then create an
<code>image</code> element in the <span>SuikaWiki/0.9 namespace</span>
and set the <span>image element</span> to that element.  Append the
<span>image element</span> to the <span>document element</span>.

<li>Otherwise, <span>append a character</span> U+000A <code
class=charname>LINE FEED</code> to the <span>image element</span>.

<li>Then, <span title="append a character">append each
character</span> in <var>line</var> in the same order to the
<span>image element</span>.

</ol>

</section>

</section>

<section>
<h1>Tokenization of a table row</h1>

<p>The <dfn>algorithm to tokenize a table row</dfn> <var>data</var> is
as follows:

<ol class=steps>

<li>Let <var>pos</var> be zero (0).  It represents the index in
<var>data</var>.  The index of the first character in <var>data</var>
is zero (0).

<li>Emit a <span>table row start token</span>.

<li><dfn title=tokenize-table-row-loop><i>LOOP</i></dfn>: If
<var>pos</var> is greater than or equal to the length of
<var>data</var>, emit a <span>table row end token</span> and abort
this algorithm.

<li>Increase <var>pos</var> by one (1). <!-- Skip "," -->

<li>Let <var>cell</var> be the empty string.

<li>Let <var title>cell quoted</var> be null.

<li>If <var title>pos</var> is greater than or equal to the length of
<var title>data</var>, emit a <span>table row end token</span> and
abort this algorithm.

<li>If the <var title>pos</var>th character in <var title>data</var>
is a <span title="white space characters">white space
character</span>, increase <var title>pos</var> by one (1) and go back
to the previous step.

<li>If the <var title>pos</var>th character in <var title>data</var>
is a <code>*</code> character, set the <var title>header cell</var>
flag and increase <var title>pos</var> by one (1).

<li>If the <var title>pos</var>th character in <var title>data</var>
is <code>"</code>, set <var title>cell quoted</var> to the empty
string and follow the substeps below:

<ol>

<li>Increase <var>pos</var> by one (1).

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, abort these substeps.

<li>Otherwise, if the <var>pos</var>th character in <var>data</var> is
<code>"</code>, abort these substeps.

<li>Otherwise, if the <var>pos</var>th character in <var>data</var> is
<code>\</code>, follow the substeps below:

<ol>

<li>Increase <var>pos</var> by one (1).

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, abort these substeps.

<li>Otherwise, append the <var>pos</var>th character in
<var>data</var> to <var>cell quoted</var>.

</ol>

<li>Otherwise, append the <var>pos</var>th character in
<var>data</var> to <var>cell quoted</var>.

<li>Go back to the first substep in these substeps.

</ol>

<li>While <var title>pos</var> is less than the length of <var
title>data</var>, run the following substeps:

<ol>

<li>If the <var>pos</var>th character in <var title>data</var> is
<code>,</code>, abort these substeps. <!-- without increasing <var
title>pos</var> -->

<li>Append the <var title>pos</var>th character in <var
title>data</var> to <var title>cell</var>.

<li>Increase <var title>pos</var> by one (1).

</ol>

<li>Remove <span>white space characters</span> at the end of <var
title>data</var>, if any.

<li>If <var title>header cell</var> flag is not set,
<var title>cell quoted</var> is null, and <var title>cell</var> is
equal to <code>==</code>, then emit a <span>table colspan cell
token</span> and go back to the step
labeled <span title=tokenize-table-row-loop><i>LOOP</i></span>.

<li>Emit a <span>table cell start token</span> whose 
<span title=table-cell-start-header>header</span> is
whether <var title>header cell</var> flag is set or not.

<li>If <var title>cell quoted</var> is <em>not</em> null, run the
<span>algorithm to tokenize a text</span> with <var title>cell
quoted</var>.

<li>Run the <span>algorithm to tokenize a text</span> with <var
title>cell</var>.

<li>Emit a <span>table cell end token</span>.

<li>Go back to the step labeled <span
title=tokenize-table-row-loop><i>LOOP</i></span>.

</ol>

</section>

<section>
<h1>Tokenization of a text</h1>

<p>The <dfn>algorithm to tokenize a text</dfn> <var>data</var> is as
follows:

<ol class=steps>

<li>Let <var title>nest level</var> be zero (0).

<li>If <var>data</var> begins with <code>[</code> followed by one or
more <span>digits</span> followed by <code>]</code>, run the following
steps:

<ol>

<li>Let <var>number</var> be the <span>digits</span> in the matched
substring.

<li>Remove the matched substring frm <var>data</var>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>anchor-end</code>,
<span title=element-namespace>namespace</span> is the
<span>SuikaWiki/0.9 namespace</span>, <span
title=element-anchor-attribute>anchor attribute</span> is
<var>number</var>, and <span title=element-content>content</span> is
<code>[</code> followed by <var>number</var> followed by
<code>]</code>.

</ol>

<li>While the length of <var>data</var> is not zero (0), run the
appropriate steps:

<dl class=switch>

<dt>If <var>data</var> begins with <code>[[#</code>, followed by one
or more <span>lowercase letters</span> or U+002D <code
class=charname>HYPHEN-MINUS</code>

<dd>

<ol>

<li>Let <var title>name</var> be the <span>lowercase letters</span>
and U+002D <code class=charname>HYPHEN-MINUS</code> in the matched
substring.

<li>Remove the matched substring from <var>data</var>.

<li>Let <var title>id</var> be null.

<li>Let <var>parameters</var> be an empty list.

<li>If <var>data</var> begins with a <span>class specification</span>,
run the following substeps:

<ol>

<li>Set the <var title>id</var> to the <span title="body of a class
specification">body</span> of the <span>class specification</span>.

<li>Remove the class specification from <var>data</var>.

</ol>

<li>While the first character of <var>data</var> is <code>:</code>,
run the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>]]</code>, abort
these substeps.

<li>Let <var title>parameter</var> be the empty string.

<li>If <var title>data</var> is empty, append <var
title>parameter</var> to <var title>parameters</var> and abort these
substeps.

<li>If the first character of <var title>data</var> is <code>'</code>,
run the following steps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these substeps.

<li>If the first character of <var>data</var> is <code>'</code>, abort
these substeps.

<li>If the first character of <var>data</var> is <code>\</code>, run
the following substeps:

<ol>

<li>Remove the first character of <var title>data</var>.

<li>If <var title>data</var> is empty, abort these substeps.

<li>Append the first character of <var>data</var> to <var
title>parameter</var>.

</ol>

<li>Otherwise, append the first character of <var title>data</var> to
<var title>parameter</var>.

<li>Go back to the first substep in these substeps.

</ol>

<li>Otherwise, run the following steps:

<ol>

<li>If <var title>data</var> is empty, or if the first character of
<var title>data</var> is <code>:</code>, abort these substeps.

<li>Append the first character of <var title>data</var> to <var
title>parameter</var>.

<li>Remove the first character of <var title>data</var>.

<li>Go back to the first substep of these substeps.

</ol>

<li>Append <var title>parameter</var> to <var title>parameters</var>.

</ol>

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>]]</code>, remove
these characters from <var>data</var>.

<li>Emit a <span>form token</span> whose <span
title=form-name>name</span> is <var title>name</var>, <span
title=form-id>id</span> is <var title>id</var>, and <span
title=form-parameters>parameters</span> is <var
title>parameters</span>.

</ol>

<dt>Otherwise, if the <var>data</var> begins with <code>[[</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline start tag token</span>.

<li>Increase <var title>nest level</var> by one (1).

</ol>

<dt>If <var>data</var> begins with <code>[</code>, followed by one or
more <span>uppercase letters</span>, optionally followed by a
<span>class specification</span>, optionally followed by a
<span>language specification</span>, followed by <code>[</code>

<dd>

<ol>

<li>Let <var>tag name</var> be the <span>uppercase letters</span> in
the matched substring of <var>data</var>.

<li>Let <var>classes</var> be the <span title="body of a class
specification">body</span> of the <span>class specification</span> in
the matched substring of <var>data</var>, if any, or null, otherwise.

<li>Let <var>language</var> be the <span title="body of a language
specification">body</span> of the <span>language specification</span>
in the matched substring of <var>data</var>, if any, or null,
otherwise.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline start tag token</span> whose <span
title=inline-start-tag-tag-name>tag name</span> is <var>tag
name</var>, <span title=inline-start-tag-classes>classes</span> is
<var>classes</var>, and <span
title=inline-start-tag-language>language</span> is
<var>language</var>.

<li>Increase <var title>nest level</var> by one (1).

</ol>

<dt>If <var>data</var> begins with <code>]]</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline end tag token</span>.

<li>If <var title>nest level</var> is greater than zero (0), decrease
<var title>nest level</var> by one (1).

</ol>

<dt>If <var>data</var> begins with <code>]&lt;</code>, followed by one
or more <span>scheme characters</span>, followed by <code>:</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var> and then act as
if the first two character of the original <var>data</var> before the
removal were <code>&lt;</code> instead of <code>]&lt;</code>, except
that the emitted token is an <span>inline end tag token</span> instead
of an <span>element token</span>.  The <span
title=inline-end-tag-res-scheme-attribute>resScheme attribute</span>
of the token <em class=rfc2119>MUST</em> be the <span
title=element-res-scheme-attribute>resScheme attribute</span> of the
token that would be emitted if the first two character were
<code>&lt;</code>.  The <span
title=inline-end-tag-res-parameter-attribute>resParameter
attribute</span> of the token <em class=rfc2119>MUST</em> be the <span
title=element-res-parameter-attribute>resParameter attribute</span> of
the token that would be emitted if the first two character were
<code>&lt;</code>.

<li>If <var title>data</var> begins with <code>]</code>, remove the
character from <var title>data</var>.

<li>If <var title>nest level</var> is greater than zero (0), decrease
<var title>nest level</var> by one (1).

</ol>

<dt>If <var>data</var> begins with <code>]>></code> followed by one or
more <span>digits</span>, followed by <code>]</code>

<dd>

<ol>

<li>Let <var>number</var> be the <span>digits</span> in the matched
substring.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline end tag token</span> whose <span
title=inline-end-tag-anchor>anchor</span> is <var>number</var>.

<li>If <var title>nest level</var> is greater than zero (0), decrease
<var title>nest level</var> by one (1).

</ol>

<dt>If <var title>nest level</var> is greater than zero (0) and <var
title>data</var> begins with <code>]</code> followed by zero or more
<span>white space characters</span> followed by <code>[</code>

<dt>If <var title>nest level</var> is greater than zero (0) and <var
title>data</var> begins with <code>]</code> followed by zero or more
<span>white space characters</span> followed by a <span>language
specification</span> followed by <code>[</code>

<dd>

<ol>

<li>Let <var title>lang</var> be the <span title="body of a language
specification">body</span> of the <span>language specification</span>
in the matched substring of <var title>data</var>, if any, or null,
otherwise.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline middle tag token</span> whose <span
title=inline-middle-tag-language>language</span> is <var
title>lang</var>.

</ol>

<dt>If <var>data</var> begins with <code>&lt;</code>, followed by one
or more <span>scheme characters</span>, followed by <code>:</code>

<dd>

<ol>

<li>Let <var>scheme</var> be the <span>scheme characters</span> part
of the matched substring.

<li>Remove the matched substring from <var>data</var>.

<li>Let <var title>value</var> be the empty string.

<li>Run the following steps:

<ol>

<li>If <var>data</var> is empty, abort these steps.

<li>If the first character of <var>data</var> is <code>></code>,
remove the first character of <var>data</var> and abort these steps.

<li>If the first character of <var title>data</var> is <code>"</code>,
append <code>"</code> to <var title>data</var> and run the following
substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these steps.

<li>If the first character of <var title>data</var> is <code>"</code>,
append <code>"</code> to <var title>value</var>, remove the first
character of <var title>data</var>, and abort these substeps.

<li>If the first character of <var>data</var> is <code>\</code>, run
the following substeps:

<ol>

<li>Append <code>\</code> to <var title>value</var>.

<li>Remove the first character of <var title>data</var>.

<li>If <var title>data</var> is empty, abort these steps.

<li>Append the first character of <var title>data</var> to <var
title>value</var>.

</ol>

<li>Otherwise, append the first character of <var title>data</var> to
<var title>value</var>.

<li>Return back to the first substep of these substeps.

</ol>

<li>Otherwise, run the following substeps:

<ol>

<li>Append the first character of <var title>data</var> to <var
title>value</var>.

<li>Remove the first character of <var title>data</var>.

</ol>

<li>Go back to the first substeps in these substeps.

</ol>

<li>Let <var title>content</var> be <var title>scheme</var> followed
by <code>:</code> followed by <var title>value</var>.

<li>If <var title>scheme</var> does <em>not</em> contain one of
<span>uppercase letters</span>, set <var title>value</var> to <var
title>content</var> and set <var title>scheme</var> to
<code>URI</code>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is
<code>anchor-external</code>, <span
title=element-namespace>namespace</span> is the <span>SuikaWiki/0.9
namespace</span>, <span title=element-res-scheme-attribute>resScheme
attribute</span> is <var title>scheme</var>, <span
title=element-res-parameter-attribute>resParameter attribute</span> is
<var title>value</var>, and <span title=element-content>content</span>
is <var title>content</var>.

</ol>

<dt>If <var>data</var> begins with <code>'''</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit a <span>strong token</span>.

</ol>

<dt>Otherwise, if <var>data</var> begins with <code>''</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>emphasis token</span>.

</ol>

<dt>If <var>data</var> begins with <code>>></code> followed by one or
more <span>digits</span>

<dd>

<ol>

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is
<code>anchor-internal</code>, <span
title=element-namespace>namespace</span> is the <span>SuikaWiki/0.9
namespace</span>, <span title=element-anchor-attribute>anchor
attribute</span> is the <span>digits</span> part of the matched
substring, and <span title=element-content>content</span> is the
matched substring.

<li>Remove the matched substring from <var>data</var>.

</ol>

<dt>If <var>data</var> begins with <code>__&amp;&amp;</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>If <var>data</var> begins with <code>&amp;&amp;__</code>, or if
<var>data</var> does not contain <code>&amp;&amp;__</code> as a
substring:

  <ol>

  <li>Emit four <span title="character token">character tokens</span>
  whose <span title=character-data>data</span>
  are <code>_</code>, <code>_</code>, <code>&amp;</code>,
  and <code>&amp;</code>, respectively.

  <li>Remove the first four characters from <var>data</var>.

  </ol>

<li>Otherwise:

  <ol>
  
  <li>Let <var title>name</var> be the substring
  of <var title>data</var>, from the start of the string to the first
  occurence of <code>&amp;&amp;__</code>, exclusive.

  <li>Remove the substring of <var title>data</var>, from the start of
  the string to the first occurence of <code>&amp;&amp;__</code>,
  inclusive, from <var title>data</var>.

  <li>If <span>Character Reference Table</span>
  [<var title>name</var>] <span>exists</span>:

    <ol>

    <li>Emit a <span>character token</span>
    whose <span title=character-data>data</span> is <span>Character
    Reference Table</span> [<var title>name</var>].

    </ol>

  <li>Otherwise:

    <ol>
    
    <li>Emit an <span>element token</span>
    whose <span title=element-local-name>local name</span>
    is <code>replace</code>, <span title=element-namespace>namespace</span>
    is the <span>SuikaWiki/0.9
    namespace</span>, <span title=element-by-attribute>by
    attribute</span> is <var title>name</var>.

    </ol>

  </ol>

</ol>

<dt>Otherwise

<dd>

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> set to the first character of
<var>data</var>.

<li>Remove the first character of <var>data</var>.

</ol>

</dl>

</ol>

</section>

<section>
<h1>Parsing a magic line</h1>

<p>To <dfn>parse a magic line</dfn> <var>data</var>, the following
steps <em class=rfc2119>MUST</em> be used:

<ol class=steps>

<li>Remove the first two characters of <var>data</var>.  (It will be
<code>#?</code>.)

<li>If there are one or more characters that are not <span>white space
characters</span> at the beginning of <var>data</var>, run the
following substeps:

<ol>

<li>Let <var title>name</var> be those characters.

<li>Let <var title>version</var> be null.

<li>Remove those characters from <var title>data</var>.

<li>If <var title>name</var> contains <code>/</code>, set the
substring after the first occurence of the character to <var
title>version</var>.  Note that <var title>version</var> might become
the empty string.  Remove the <code>/</code> character and the
substring after the character from <var title>name</var>.

<li>Set the <code title=attr-sw-name>Name</code> <span>content
attribute</span> of the <span>document element</span> in the
<span>SuikaWiki/0.9 namespace</span> to <var title>name</var>.

<li>If <var title>version</var> is <em>not</em> null, set the <code
title=attr-sw-version>Version</code> <span>content attribute</span> of
the <span>document element</span> in the <span>SuikaWiki/0.9
namespace</span> to <var title>version</var>.

</ol>

<li>Run the following substeps:

<ol>

<li>If <var>data</var> is empty, abort these substeps.

<li>If the first character of <var>data</var> is a <span title="white
space characters">white space character</span>, remove the character
from <var>data</var> and go back to the first substep of these
substeps.

<li>Let <var title>name</var> be the empty string.

<li>If <var title>data</var> begins with one or more characters that
are not <code>=</code>, set <var title>name</var> to those characters
and remove those characters from <var title>data</var>.

<li>Let <var title>parameter</var> be a newly created <code
title=element-sw-parameter>parameter</code> element in the
<span>SuikaWiki/0.9 namespace</span> and set the <code
title=attr-sw-parameter-name>name</code> <span>content
attribute</span> of <var title>parameter</var> to <var
title>name</var>.

<li>Remove the first character of <var>data</var>.  (It will be
<code>=</code>.)

<li>If the first character of <var>data</var>, if any, is
<code>"</code>, remove that character from <var>data</var>.

<li>Run the following substeps:

<ol>

<li>Let <var title>value</var> be the empty string.

<li>If <var title>data</var> is empty, or if the first character of
<var title>data</var> is <code>"</code>, create a <code
title=element-sw-value>value</code> element in the <span>SuikaWiki/0.9
namespace</span>, set the <code>textContent</code> <span>IDL
attribute</span> of the node to <var title>value</var>, and append the
node to <var title>parameter</var>.

<li>Otherwise, if the first character of <var title>data</var>, if
any, is <code>\</code>, run the following substeps:

<ol>

<li>Remove the first character of <var title>data</var>.  (The removed
character will be <code>\</code>.)

<li>If the first character of <var title>data</var>, if any, is
<code>,</code>, abort these substeps.

<li>Otherwise, append the first character of <var title>data</var>, if
any, to <var title>value</var>.

</ol>

<li>In any case, if the first character of <var title>data</var> is
<code>,</code>, create a <code title=element-sw-value>value</code>
element in the <span>SuikaWiki/0.9 namespace</span>, set the
<code>textContent</code> <span>IDL attribute</span> of the node to
<var title>value</var>, append the node to <var title>parameter</var>,
and go back to the first substep of these substeps.

<li>Otherwise, append the first character of <var title>data</var> to
<var title>value</var>.

<li>Go back to the <em>second</em> substep of these substeps.

</ol>

<li>If the first character of <var>data</var>, if any, is
<code>"</code>, remove that character from <var>data</var>.

<li>Append <var title>parameter</var> to the <span>head
element</span>.

<li>Go back to the first substep of these substeps.

</ol>

</ol>

</section>

<section>
<h1>Tree construction</h1>

<p>The <dfn>tree construction</dfn> stage constructs a <span>node
tree</span> from a series of <span title=token>tokens</span> emitted
by the
<span>tokenization</span> stage.  The <span>tree construction</span>
stage has two state variables: <span>insertion mode</span> and
<span>stack of open elements</span>.

<p>The <dfn>insertion mode</dfn> is one of "<span>in section</span>",
"<span>in table row</span>", or "<span>in paragraph</span>".  The
default that <em class=rfc2119>MUST</em> be used when the <span>tree
construction</span> begins is the "<span>in section</span>"
<span>insertion mode</span>.  The rules for these <span
title="insertion mode">insertion modes</span> are described in the
subsections below.

<p>When the algorithm below says that the <span title="SWML text
serialization parser">parser</span> is to do something “<dfn>using
the rules for</dfn> the <var>m</var> <span>insertion mode</span>”,
the <span title="SWML text serialization parser">parser</span> <em
class=rfc2119>MUST</em> use the rules described under the <var>m</var>
<span>insertion mode</span>'s section, but <em class=rfc2119>MUST</em>
leave the <span>insertion mode</span> unchanged.

<p>The <dfn>stack of open elements</dfn> contains tuples of
(<dfn>element node</dfn>, <dfn>section depth</dfn>, <dfn>quotation
depth</dfn>, <dfn>list depth</dfn>).  These stack grows downdards; the
topmost entry on the stack is the first one added to the stack, and
the bottommost entry of the stack is the most recently added entry in
the stack.  It initially contains only a tuple: (the <span>body
element</span>, <code>0</code>, <code>0</code>, <code>0</code>).  When
an entry is pushed to the <span>stack of open elements</span>, the
items of the new tupple is set to the same values as the bottommost
tuple unless otherwise specified.

<p>The <dfn>current element</dfn> is the <span>element node</span>
of the bottommost entry in the <span>stack of open elements</span>.

<hr>

<p>To <dfn>process classes</dfn>
with <span>element</span> <var>element</var>
and <span>string</span> <var>classes</var>, run these steps:

  <ol class=steps>

  <li>Let <var>class list</var> be an <span title="is
  empty">empty</span> <span>list</span>.

  <li>Let <var>itemprop list</var> be an <span title="is
  empty">empty</span> <span>list</span>.

  <li>Let <var>tokens</var> be the result of <span title="split on
  ASCII whitespace">splitting <var>classes</var> on ASCII
  whitespace</span>.

  <li><span>For each</span> <var>token</var> in <var>tokens</var>:

    <ol>

      <li>If <var>token</var> <span>starts with</span> <code>#</code>:

        <ol>

        <li>Let <var>id</var> be <var>token</var>.

        <li>Remove the first <span>character</span> from <var>id</var>.

        <li>If <var>element</var>
        does <em>not</em> <span title=concept-element-attribute-has>have</span>
        an <span>attribute</span>
        whose <span title=concept-attribute-namespace>namespace</span>
        is <code>null</code>
        and <span title=concept-attribute-local-name>local name</span>
        is <code>id</code>:

          <ol>

          <li><span title=concept-element-attributes-set-value>Set an
          attribute value</span> for <var>element</var>
          with <code>id</code> and <var>id</var>.

          </ol>

        </ol>

      <li>Otherwise, if <var>token</var> <span>starts
      with</span> <code>.</code>:

        <ol>

        <li>Let <var>itemprop</var> be <var>token</var>.

        <li>Remove the first <span>character</span>
        from <var>itemprop</var>.

        <li><span title=list-append>Append</span> <var>itemprop</var>
        to <var>itemprop list</var>.

        </ol>

      <li>Otherwise:

        <ol>

        <li><span title=list-append>Append</span> <var>token</var>
        to <var>class list</var>.

        </ol>

    </ol>

  <li>If <var>class list</var> is <em>not</em> <span title="is
  empty">empty</span>:

    <ol>

    <li>Let <var>class</var> be
    the <span title=concatenate>concatenation</span> of <var>class
    list</var> with
    a <code>U+0020</code> <code class=charname>SPACE</code> character.
    
    <li><span title=concept-element-attributes-set-value>Set an
    attribute value</span> for <var>element</var>
    with <code>class</code> and <var>class</var>.
      
    </ol>

  <li>If <var>itemprop list</var> is <em>not</em> <span title="is
  empty">empty</span>:

    <ol>

    <li>Let <var>itemprop</var> be
    the <span title=concatenate>concatenation</span> of <var>itemprop
    list</var> with
    a <code>U+0020</code> <code class=charname>SPACE</code> character.
    
    <li><span title=concept-element-attributes-set-value>Set an
    attribute value</span> for <var>element</var>
    with <code>itemprop</code> and <var>itemprop</var>.
      
    </ol>
    
  </ol>
  

<section>
<h1>The "<span>in section</span>" <span>insertion mode</span></h1>

<p>In the "<dfn>in section</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>heading start token</span>

<dd>

<ol class=steps>

<li>If the local name of the <span>current element</span> is
<em>not</em> one of <code title=element-html-body>body</code>,
<code>section</code>, and <span>block elements</span>, then pop the
element off the <span>stack of open elements</span> and follow this
substep again.

<li>Let <var title>current depth</var> be the <span>section
depth</span> of the bottommost entry in the <span>stack of open
elements</span>.

<li>If <span title=heading-start-depth>depth</span> of the
<span>token</span> is less than or equal to the <var title>current
depth</var>, pop the element off the <span>stack of open
elements</span> and go back to the first substep of these substeps.

<li>Otherwise, if <span title=heading-start-depth>depth</span> of the
<span>token</span> is greater than <var title>current depth</var> + 1,
create a <code>section</code> element in the <span>HTML
namespace</span>, append the element created to the <span>current
element</span>, push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to <var
title>current depth</var> + 1, <span>quotation depth</span> set to
zero (0), and <span>list depth</span> set to zero (0), and go back to
the first substep of these substeps.

<li>Create a <code>section</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to <span
title=heading-start-depth>depth</span>, <span>quotation depth</span>
set to zero (0), and <span>list depth</span> set to zero (0).

<li>Create a <code>h1</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>block start tag token</span>
whose <span title=block-start-tag-tag-name>tag name</span>
is <em>not</em> <code>PRE</code>

<dd>

<ol class=steps>

<li>If
the <span>token</span>'s <span title=block-start-tag-tag-name>tag
name</span> is <code title=concept-TALK>TALK</code>:

  <ol>

  <li>If the <span>current
  element</span>'s <span title=concept-element-local-name>local
  name</span> is <em>not</em> <code>dialogue</code>:

    <ol>

    <li>Let <var>element</var> be
    a <code>dialogue</code> <span>element</span> in
    the <span>SuikaWiki/0.9 namespace</span>.

    <li>Append <var>element</var> created to the <span>current
    element</span>.

    <li>Push <var>element</var> to the <span>stack of open
    elements</span>.

    </ol>

  </ul>

<li>Otherwise:

  <ol>

  <li>If the <span>current
  element</span>'s <span title=concept-element-local-name>local
  name</span> is <code>dialogue</code>, pop the <span>current
  element</span> off the <span>stack of open elements</span>.

  </ul>

<li>Let <var>row</var> be the table row of the <span>Block Element
Table</span> whose <span title=block-start-tag-tag-name>tag
name</span> is
the <span>token</span>'s <span title=block-start-tag-tag-name>tag
name</span>.

<li>Let <var>element</var> be the result of creating
an <span>element</span>
whose <span title=concept-element-namespace>namespace</span>
is <var>row</var>'s <span title=concept-element-namespace>namespace</span>
and whose <span title=concept-element-local-name>local name</span>
is <var>row</var>'s <span title=concept-element-namespace>namespace</span>.

<li>Append <var>element</var> to the <span>current element</span>.

<li>Push <var>element</var> to the <span>stack of open elements</span>
with <span>section depth</span> set to zero (0), <span>quotation
depth</span> set to zero (0), and <span>list depth</span> set to zero
(0).

<li>Run the steps to <span>process classes</span>
with <var>element</var>
and <span>token</span>'s <span title=block-start-tag-classes>classes</span>.

</ol>

<dt>A <span>block end tag token</span>
whose <span title=block-end-tag-tag-name>tag name</span>
is <em>not</em> <code>PRE</code>

<dd>

<ol class=steps>

<li>Let <var>row</var> be the table row of the <span>Block Element
Table</span> whose <span title=block-start-tag-tag-name>tag
name</span> is
the <span>token</span>'s <span title=block-end-tag-tag-name>tag
name</span>.

<li>Let <var>local name</var>
be <var>row</var>'s <span title=concept-element-local-name>local
name</span>.

<li>If the <span>stack of open elements</span> contains
an <span>element</span>
whose <span title=concept-element-local-name>local name</span>
is <var>local name</var>, pop the <span>current element</span> off
the <span>stack of open elements</span> until an <span>element</span>
whose <span title=concept-element-local-name>local name</span>
is <var>local name</var> has been popped from the <span>stack of open
elements</span>.

<li>Set the <span>continuous line</span> to false.

</ol>

<dt>A <span>block element token</span>

<dd>

<ol class=steps>

<li>Let <var>element</var> be the result of creating
an <code>hr</code> <span>element</span> in the <span>HTML
namespace</span>.

<li>Append <var>element</var> to the <span>current element</span>.

<li>Run the steps to <span>process classes</span>
with <var>element</var>
and <span>token</span>'s <span title=block-element-classes>classes</span>.

</ol>

<dt>A <span>quotation start token</span>

<dd>

<ol class=steps>

<li>If the <span title=element-local-name>local name</span> of
the <span>current element</span> is <em>not</em> one
of <code>blockquote</code>, <code title=element-html-body>body</code>,
<code>section</code>, and <span>block elements</span>, then pop the
element off the <span>stack of open elements</span> and follow this
substep again.

<li>Let <var title>current depth</var> be the <span>quotation
depth</span> of the bottommost entry in the <span>stack of open
elements</span>.

<li>If <span title=quotation-start-depth>depth</span> of the
<span>token</span> is less than the <var title>current depth</var>,
pop the element off the <span>stack of open elements</span> and go
back to the first substep of these substeps.

<li>Otherwise, if <span title=quotation-start-depth>depth</span> of
the <span>token</span> is greater than <var title>current depth</var>,
create a <code>blockquote</code> element in the <span>HTML
namespace</span>, append the element created to the <span>current
element</span>, push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to zero (0),
<span>quotation depth</span> set to <var title>current depth</var> +
1, and <span>list depth</span> set to zero (0), and go back to the
first substep of these substeps.

</ol>

<dt>A <span>list start token</span>

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>Let <var title>current depth</var> be the <span>list depth</span>
of the <span>current element</span>.

<li>Let <var title>inserted depth</var> be the length of <span
title=list-start-depth>depth</span> of the <span>token</span>.

<li>Let <var title>local name</var> be <code>ul</code>, if the last
character in <span title=list-start-depth>depth</span> is
<code>-</code>, or <code>ol</code>, otherwise.

<li>If <var title>current depth</var> is greater than <var
title>inserted depth</var>, pop the <span>current element</span> off
the <span>stack of open elements</span> and go back to the first
substep of these substeps.

<li>If the <span>list depth</span> of the <span>current element</span>
is equal to <var title>inserted depth</var> and the local name of the
<span>current element</span> is <em>not</em> <var title>local
name</var>, pop the <span>current element</span> off the <span>stack
of open elements</span> and go back to the first substep of these
substeps.

<li>If <var title>current depth</var> is less than <var title>inserted
depth</var>, run the following substeps:

<ol>

<li>Let <var title>type</var> be the character at the index equal to
<var>current depth</var> in <span title=list-start-depth>depth</span>
of the <span>token</span>, where the index of the first character in
<span title=list-start-depth>depth</span> is zero (0).

<li>If <var>type</var> is <code>-</code>, create a <code>ul</code>
element in the <span>HTML namespace</span>.

<li>Otherwise, create a <code>ol</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>, with <span>list depth</span> set to <var>current
depth</var> + 1.

<li>If <var>current depth</var> + 1 is less than <var>inserted
depth</var>, run the following substeps:

<ol>

<li>Create a <code>li</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<li>Go back to the first substep for the <span>list start
token</span>.

</ol>

<li>Create a <code>li</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>labeled list start token</span>

<!--

In SuikaWiki3 implementation,

:a:
-b
:c:
-d

generates two dl elements and two ul elements.  According to this
specification, it MUST generate a dl element with two ul elements.

-->

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>If the local name of the <span>current element</span> is
<code>dd</code>, pop the element off the <span>stack of open
elements</span>.

<li>If the local name of the <span>current element</span> is
<em>not</em> <code>dl</code>, create a <code>dl</code> element in the
<span>HTML namespace</span>, append the element created to the
<span>current element</span>, and push the element created to the
<span>stack of open elements</span>.

<li>Create a <code>dt</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>table row start token</span>

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>Create a <code>table</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Create a <code>tbody</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Create a <code>tr</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in table row</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is <code>PRE</code>

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>Let <var>element</var> be the result of creating
a <code>pre</code> element in the <span>HTML namespace</span>.

<li>Append <var>element</var> to the <span>current element</span>.

<li>Push <var>element</var> to the <span>stack of open
elements</span>.

<li>Run the steps to <span>process classes</span>
with <var>element</var>
and <span>token</span>'s <span title=block-start-tag-classes>classes</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>preformatted start token</span>

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>Create a <code>pre</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>comment paragraph start token</span>

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>Create a <code>comment-p</code> element in the
<span>SuikaWiki/0.10 namespace</span>.


<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>editorial note start token</span>

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>Create a <code>ed</code> element in the <span>SuikaWiki/0.10
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>An <span>empty line token</span>

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <em>not</em> one
of <code title=element-html-body>body</code>,
<code>section</code>, <code>dialogue</code>, and <span>block
elements</span>, then pop the element off the <span>stack of open
elements</span> and follow this substep again.

</ol>

<dt>A <span>form token</span>

<dt>An <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>replace</code>

<dd>Process the token <span>using the rules for</span> the "<span>in
paragraph</span>" <span>insertion mode</span>.

<dt>An <span>end-of-file token</span>

<dd>Now the <code>Document</code> has been constructed.  Abort
the <span title="SWML text serialization parser">parser</span>.

<dt>Any other <span>block start tag token</span>

<dt>A <span>labeled list middle token</span>, <span>heading end
token</span>, <span>preformatted end token</span>, <span>table row end
token</span>, <span>table cell start token</span>, <span>table cell
end token</span>, or <span>table colspan cell token</span> <!-- they
should not appear in this insertion mode -->

<dd>Ignore the token.

<dt>Anything else

<dd>

<ol class=steps>

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>dialogue</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>If the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <em>not</em> one
of <code>p</code>, <code>li</code>, <code>dd</code>, <code>figcaption</code>,
<code>comment-p</code>, or <code>ed</code>, or if the <span>current
element</span>'s <span title=concept-element-local-name>local
name</span> is <code>figcaption</code> or <code>speaker</code> and
the <span>current element</span> has any <span>child</span>, run the
following substeps:

<ol class=steps>

<li>Create a <code>p</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

</dl>

</section>

<section>
<h1>The "<span>in table row</span>" <span>insertion mode</span></h1>

<p>In the "<dfn>in table row</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>table cell start token</span>

<dd>

<ol class=steps>

<li>Let <var title>local name</var> be <code>th</code> if
the <span title=table-cell-start-header>header</span> of
the <span>token</span> is true, or <code>td</code> otherwise.

<li>Create a <var title>local name</var> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>table colspan cell token</span>

<dd>

<ol class=steps>

<li>If the local name of the node returned by the
<code>lastChild</code> <span>IDL attribute</span> of the <span>current
element</span>, if any, is <code>td</code> or <code>th</code>,
increase the value of
<code>colspan</code> <span>IDL attribute</span> of the node by one (1)
and abort these substeps.

<li>Create a <code>td</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>A <span>table row end token</span>

<dd>If the local name of the <span>current element</span> is
<code>tr</code>, pop the element off the <span>stack of open
elements</span>.

<dt>A <span>table row start token</span>

<dd>

<ol class=steps>

<li>Create a <code>tr</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>Anything else

<dd>Switch to the "<span>in section</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</dl>

</section>

<section>
<h1>The "<span>in paragraph</span>" <span>insertion mode</span></h1>

<p>In the "<dfn>in paragraph</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>character token</span>

<dd><span title="append a character">Append the character</span> in
<span title=character-data>data</span> of the <span>token</span> to
the <span>current element</span>.

<dt>An <span>inline start tag token</span> whose <span
title=inline-start-tag-tag-name>tag name</span> is null

<dd>

<ol class=steps>

<li>Create an <span>anchor</span> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>Any other <span>inline start tag token</span>

<dd>

<ol class=steps>

<li>Let <var>element</var> be the result of creating
an <span>element</span>.
The <span title=concept-element-namespace>namespace</span>
and <span title=concept-element-local-name>local name</span>
of <var>element</var> is determined according to
the <span title=inline-start-tag-tag-name>tag name</span> of
the <span>inline start tag token</span> as shown in the following
table:

<table>

<thead>

<tr>

<th scope=col><span title=inline-start-tag-tag-name>Tag name</span>

<th scope=col><span title=concept-element-namespace>Namespace</span>

<th scope=col><span title=concept-element-local-name>Local name</span>

<tbody>

<tr>
<th><code title=concept-AA>AA</code>
<td>The <span>AA namespace</span>
<td><code>aa</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code title=concept-ABBR>ABBR</code>
<td>The <span>HTML namespace</span>
<td><code>abbr</code>

<tr>
<th><code title=concept-ASIS>ASIS</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>asis</code>

<tr>
<th><code title=concept-B>B</code>
<td>The <span>HTML namespace</span>
<td><code>b</code>

<tr>
<th><code title=concept-BR>BR</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-br</code>

<tr>
<th><code title=concept-CITE>CITE</code>
<td>The <span>HTML namespace</span>
<td><code>cite</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code title=concept-CODE>CODE</code>
<td>The <span>HTML namespace</span>
<td><code>code</code>

<tr>
<th><code title=concept-CURSIVE>CURSIVE</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-cursive</code>

<tr>
<th><code title=concept-CSECTION>CSECTION</code>
<td>The <span>SuikaWiki/0.10 namespace</span>
<td><code>csection</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code title=concept-DEL>DEL</code>
<td>The <span>HTML namespace</span>
<td><code>del</code>

<tr>
<th><code title=concept-DATA>DATA</code>
<td>The <span>HTML namespace</span>
<td><code>data</code>

<tr>
<th><code title=concept-DFN>DFN</code>
<td>The <span>HTML namespace</span>
<td><code>dfn</code>

<tr>
<th><code title=concept-DOTABOVE>DOTABOVE</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>dotabove</code>

<tr>
<th><code title=concept-EMPH>EMPH</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>emph</code>

<tr>
<th><code title=concept-F>F</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>f</code>

<tr>
<th><code title=concept-FENCED>FENCED</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>fenced</code>

<tr>
<th><code title=concept-FRAC>FRAC</code>
<td>The <span>MathML namespace</span>
<td><code>mfrac</code>

<tr>
<th><code title=concept-I>I</code>
<td>The <span>HTML namespace</span>
<td><code>i</code>

<tr>
<th><code title=concept-INS>INS</code>
<td>The <span>HTML namespace</span>
<td><code>ins</code>

<tr>
<th><code title=concept-KBD>KBD</code>
<td>The <span>HTML namespace</span>
<td><code>kbd</code>

<tr>
<th><code title=concept-KEY>KEY</code>
<td>The <span>SuikaWiki/0.10 namespace</span>
<td><code>key</code>

<tr>
<th><code title=concept-L>L</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-l</code>

<tr>
<th><code title=concept-LAT>LAT</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>lat</code>

<tr>
<th><code title=concept-LINES>LINES</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>lines</code>

<tr>
<th><code title=concept-LON>LON</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>lon</code>

<tr>
<th><code title=concept-LT>LT</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-lt</code>

<tr>
<th><code title=concept-MACRON>MACRON</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-macron</code>

<tr>
<th><code title=concept-MAY>MAY</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>MAY</code>

<tr>
<th><code title=concept-MIRRORED>MIRRORED</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-mirrored</code>

<tr>
<th><code title=concept-MUST>MUST</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>MUST</code>

<tr>
<th><code title=concept-N>N</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>n</code>

<tr>
<th><code title=concept-OKURI>OKURI</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>okuri</code>

<tr>
<th><code title=concept-Q>Q</code>
<td>The <span>HTML namespace</span>
<td><code>q</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code title=concept-QN>QN</code>
<td>The <span>SuikaWiki/0.10 namespace</span>
<td><code>qn</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code title=concept-R>R</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-r</code>

<tr>
<th><code title=concept-ROOT>ROOT</code>
<td>The <span>MathML namespace</span>
<td><code>mroot</code>

<tr>
<th><code title=concept-RT>RT</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-rt</code>

<tr>
<th><code title=concept-RUBY>RUBY</code>
<td>The <span>HTML namespace</span>
<td><code>ruby</code>

<tr>
<th><code title=concept-RUBYB>RUBYB</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>rubyb</code>

<tr>
<th><code title=concept-SAMP>SAMP</code>
<td>The <span>HTML namespace</span>
<td><code>samp</code>

<tr>
<th><code title=concept-SEE>SEE</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-see</code>

<tr>
<th><code title=concept-SHOULD>SHOULD</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>SHOULD</code>

<tr>
<th><code title=concept-SMALLCAPS>SMALLCAPS</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>smallcaps</code>

<tr>
<th><code title=concept-SNIP>SNIP</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>snip</code>

<tr>
<th><code title=concept-SPAN>SPAN</code>
<td>The <span>HTML namespace</span>
<td><code>span</code>

<tr>
<th><code title=concept-SQRT>SQRT</code>
<td>The <span>MathML namespace</span>
<td><code>msqrt</code>

<tr>
<th><code title=concept-SRC>SRC</code>
<td>The <span>SuikaWiki/0.10 namespace</span>
<td><code>src</code>

<tr>
<th><code title=concept-SUB>SUB</code>
<td>The <span>HTML namespace</span>
<td><code>sub</code>

<tr>
<th><code title=concept-SUBSUP>SUBSUP</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>subsup</code>

<tr>
<th><code title=concept-SUP>SUP</code>
<td>The <span>HTML namespace</span>
<td><code>sup</code>

<tr>
<th><code title=concept-TATE>TATE</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-tate</code>

<tr>
<th><code title=concept-TIME>TIME</code>
<td>The <span>HTML namespace</span>
<td><code>time</code>
<!-- SuikaWiki/0.10 (undocumented, not implemented in SuikaWiki3) -->

<tr>
<th><code title=concept-TZ>TZ</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>tz</code>

<tr>
<th><code title=concept-U>U</code>
<td>The <span>HTML namespace</span>
<td><code>u</code>

<tr>
<th><code title=concept-UNDER>UNDER</code>
<td>The <span>MathML namespace</span>
<td><code>munder</code>

<tr>
<th><code title=concept-UNDEROVER>UNDEROVER</code>
<td>The <span>MathML namespace</span>
<td><code>munderover</code>

<tr>
<th><code title=concept-V>V</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-v</code>

<tr>
<th><code title=concept-VAR>VAR</code>
<td>The <span>HTML namespace</span>
<td><code>var</code>

<tr>
<th><code title=concept-VB>VB</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-vb</code>

<tr>
<th><code title=concept-VBT>VBT</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-vbt</code>

<tr>
<th><code title=concept-VECTOR>VECTOR</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>vector</code>

<tr>
<th><code title=concept-VT>VT</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>sw-vt</code>

<tr>
<th><code title=concept-WEAK>WEAK</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>weak</code>

<tr>
<th><code title=concept-EMPH>YOKO</code>
<td>The <span>SuikaWiki/0.9 namespace</span>
<td><code>yoko</code>

<tr>
<th>Anything else
<td>The <span>SuikaWiki/0.10 namespace</span>
<td><span title="uppercase elements">Same as <span
title=inline-start-tag-tag-name>tag name</span></span>
<!-- SWML 1.0 new -->

</table>

<li>Run the steps to <span>process classes</span>
with <var>element</var>
and <span>token</span>'s <span title=inline-start-tag-classes>classes</span>.

<li>If
the <span>token</span>'s <span title=inline-start-tag-language>language</span>
is not
null, <span title=concept-element-attributes-set-value>set</span>
the <code title=xml:lang>lang</code> <span>attribute</span> in
the <span>XML namespace</span> of <var>element</var>
to <span title=inline-start-tag-language>language</span>.

<li>Append <var>element</var> to the <span>current element</span>.

<li>Push <var>element</var> to the <span>stack of open
elements</span>.

<li>Switch
by <span>token</span>'s <span title=inline-start-tag-tag-name>tag
name</span>:

  <dl class=switch>

  <div>
  <dt><code>FRAC</code>, <code>ROOT</code>, <code>SQRT</code>,
  <code>UNDER</code>, or <code>UNDEROVER</code>

  <dd>
  <ol>

  <li>Create an <code>mtext</code> element in the <span>MathML
  namespace</span>.

  <li>Append the element created to the <span>current element</span>.

  <li>Push the element created to the <span>stack of open
  elements</span>.

  </ol>
  </div>

  <div>
  <dt><code>LINES</code>

  <dd>
  <ol>

  <li>Create a <code>line</code> element in the <span>SuikaWiki/0.9
  namespace</span>.

  <li>Append the element created to the <span>current element</span>.

  <li>Push the element created to the <span>stack of open
  elements</span>.

  </ol>
  </div>

  <div>
  <dt><code>SUBSUP</code>

  <dd>
  <ol>

  <li>Create a <code>subscript</code> element in
  the <span>SuikaWiki/0.9 namespace</span>.

  <li>Append the element created to the <span>current element</span>.

  <li>Push the element created to the <span>stack of open
  elements</span>.

  </ol>
  </div>

  <div>
  <dt><code>FENCED</code>

  <dd>
  <ol>

  <li>Create an <code>openfence</code> element in
  the <span>SuikaWiki/0.9 namespace</span>.

  <li>Append the element created to the <span>current element</span>.

  <li>Push the element created to the <span>stack of open
  elements</span>.

  </ol>
  </div>

  <div>
  <dt><code>OKURI</code>

  <dd>
  <ol>

  <li>Create a <code>rt</code> element in the <span>HTML
  namespace</span>.

  <li>Append the element created to the <span>current element</span>.

  <li>Push the element created to the <span>stack of open
  elements</span>.

  </ol>
  </div>

  </dl>

</ol>

<dt>A <span>inline middle tag token</span>

<dd>

<ol class=steps>

<li>Let <var>local name</var> be <code>title</code>.

<li>Let <var>namespace</var> be the <span>SuikaWiki/0.10
namespace</span>.

<li>Switch by the <span title=element-local-name>local name</span> of
the <span>current element</span>:

  <dl class=switch>

  <div>
  <dt><code>data</code>

  <dd>
    <ol>
    <li>Set <var>local name</var> to <code>sw-value</code>.
    <li>Set <var>namespace</var> to the <span>SuikaWiki/0.9 namespace</span>.
    </ol>
  </div>

  <div>
  <dt><code>rt</code>

  <dd>
    <ol>
    <li>Set <var>local name</var> to <code>rt</code>.
    <li>Set <var>namespace</var> to the <span>HTML namespace</span>.
    <li>Pop the <span>current element</span> off the <span>stack of open
    elements</span>.
    </ol>
  </div>

  <div>
  <dt><code>title</code>, <code>nsuri</code>, <code>tz</code>, <code>n</code>,
  <code>lat</code>, <code>lon</code>, <code>closefence</code>, 
  <code>superscript</code>, or
  <code>sw-value</code>

  <dd>
    <ol>
    <li>Set <var>local name</var> to <code>attrvalue</code>.
    <li>Set <var>namespace</var> to the <span>SuikaWiki/0.10 namespace</span>.
    <li>Pop the <span>current element</span> off the <span>stack of
    open elements</span>.
    </ol>
  </div>

  <div>
  <dt><code>qn</code>
  <dd>
    <ol>
    <li>Set <var title>local name</var> to <code>nsuri</code>.
    <li>Set <var>namespace</var> to the <span>SuikaWiki/0.10 namespace</span>.
    </ol>
  </div>

  <div>
  <dt><code>ruby</code> or <code>rubyb</code>
  <dd>
    <ol>
    <li>Set <var title>local name</var> to <code>rt</code>.
    <li>Set <var title>namespace</var> to the <span>HTML namespace</span>.
    </ol>
  </div>

  <div>
  <dt><code>mtext</code>
  <dd>
    <ol>
    <li>Set <var title>local name</var> to <code>mtext</code>.
    <li>Set <var>namespace</var> to the <span>MathML namespace</span>.
    <li>Pop the <span>current element</span> off the <span>stack of open
    elements</span>.
    </ol>
  </div>

  <div>
  <dt><code>openfence</code>
  <dd>
    <ol>
    <li>Set <var title>local name</var> to <code>fencedtext</code>.
    <li>Set <var>namespace</var> to the <span>SuikaWiki/0.9 namespace</span>.
    <li>Pop the <span>current element</span> off the <span>stack of open
    elements</span>.
    </ol>
  </div>

  <div>
  <dt><code>fencedtext</code>
  <dd>
    <ol>
    <li>Set <var title>local name</var> to <code>closefence</code>.
    <li>Set <var>namespace</var> to the <span>SuikaWiki/0.9 namespace</span>.
    <li>Pop the <span>current element</span> off the <span>stack of open
    elements</span>.
    </ol>
  </div>

  <div>
  <dt><code>subscript</code>
  <dd>
    <ol>
    <li>Set <var title>local name</var> to <code>superscript</code>.
    <li>Set <var>namespace</var> to the <span>SuikaWiki/0.9 namespace</span>.
    <li>Pop the <span>current element</span> off the <span>stack of open
    elements</span>.
    </ol>
  </div>

  <div>
  <dt><code>line</code>
  <dd>
    <ol>
    <li>Set <var title>local name</var> to <code>line</code>.
    <li>Set <var>namespace</var> to the <span>SuikaWiki/0.9 namespace</span>.
    <li>Pop the <span>current element</span> off the <span>stack of open
    elements</span>.
    </ol>
  </div>

  </dl>

<li>Create an element whose <span title=element-local-name>local
name</span> <var>local name</var> in the
<var>namespace</var>.

<li>If
the <span>token</span>'s <span title=inline-middle-tag-language>language</span>
is <em>not</em>
<code>null</code>, <span tilte=concept-element-attributes-set-value>set</span>
the <code title=xml:lang>lang</code> <span>attribute</span> in
the <span>XML namespace</span> of the element created
to <span title=inline-middle-tag-language>language</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>inline end tag token</span>

<dd>

<ol class=steps>

<li>If the local name of the <span>current element</span> is one of
<code>rt</code>, <code>title</code>, <code>nsuri</code>, <code>mtext</code>,
<code>line</code>, <code>subscript</code>, <code>superscript</code>,
<code>fencedtext</code>, <code>openfence</code>, <code>closefence</code>,
<code>sw-value</code>,
or <code>attrvalue</code>, pop the element off the <span>stack of open
elements</span>.

<li>If the <span>current element</span> is one of <span>structural
elements</span>, or if the local name of the <span>current
element</span> is <code>strong</code> or <code>em</code>, run the
following substeps:

<ol class=steps>

<li>If both <span title=inline-end-tag-res-scheme-attribute>resScheme
attribute</span> and <span
title=inline-end-tag-anchor-attribute>anchor attribute</span> of the
<span>token</span> are null, <span title="append a character">append
characters</span> <code>]]</code> to the <span>current element</span>,
push the <span>current element</span> to the <span>stack of open
elements</span>, and abort these substeps.

<div class="note memo">

<p>As a result, the bottommost and second bottommost entries becomes
equal, but one of them is popped from the <span>stack of open
elements</span> soon.

</div>

<li>If <span title=inline-end-tag-res-scheme-attribute>resScheme
attribute</span> of the <span>token</span> is <em>not</em> null,
create an <code>anchor-external</code> element in the
<span>SuikaWiki/0.9 namespace</span>.

<li>Otherwise, create a <code>anchor-internal</code> element in the
<span>SuikaWiki/0.9 namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Set the <code>textContent</code> <span>IDL attribute</span> of the
element created to <code>]]</code>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<li>If <span title=inline-end-tag-anchor-attribute>anchor
attribute</span> of the <span>token</span> is <em>not</em> null, set
the <code title=attr-sw-anchor>anchor</code> <span>content
attribute</span> in the <span>SuikaWiki/0.9 namespace</span> of the
<span>current element</span> to <span
title=inline-end-tag-anchor-attribute>anchor attribute</span> of the
<span>token</span>.

<li>If <span title=inline-end-tag-res-scheme-attribute>resScheme
attribute</span> of the <span>token</span> is <em>not</em> null, set
the <code title=attr-sw-res-scheme>resScheme</code> <span>content
attribute</span> in the <span>SuikaWiki/0.9 namespace</span> of the
<span>current element</span> to <span
title=inline-end-tag-res-scheme-attribute>resScheme attribute</span>
of the <span>token</span>.

<li>If <span title=inline-end-tag-res-parameter-attribute>resParameter
attribute</span> of the <span>token</span> is <em>not</em> null, set
the <code title=attr-sw-res-parameter>resParameter</code>
<span>content attribute</span> in the <span>SuikaWiki/0.9
namespace</span> of the <span>current element</span> to <span
title=inline-end-tag-res-parameter-attribute>resParameter
attribute</span> of the <span>token</span>.

<li>Pop the <span>current element</span> off the <span>stack of open
elements</span>.

</ol>

<dt>A <span>strong token</span>

<dd>

<ol class=steps>

<li>If the local name of the <span>current element</span> is
<code>strong</code>, pop the element off the <span>stack of open
elements</span> and abort these substeps.

<li>Create a <code>strong</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>An <span>emphasis token</span>

<dd>

<ol class=steps>

<li>If the local name of the <span>current element</span> is
<code>em</code>, pop the element off the <span>stack of open
elements</span> and abort these substeps.

<li>Create an <code>em</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>form token</span> whose <span title=form-name>name</span>
is <code>form</code>

<dd>

<ol class=steps>

<li>Create a <code>form</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>If <span title=form-id>id</span> of the <span>form token</span>
is <em>not</em> <code>null</code>, <span title=concept-element-attributes-set-value>set</span>
the <code>id</code> <span>attribute</span> of the element created
to <span title=form-id>id</span> of the <span>form token</span>.

<li>Set the <code title=attr-sw-form-input>input</code> <span>content
attribute</span> of the element created to the first item in <span
title=form-parameters>parameters</span> of the <span>form
token</span>, if any, or the empty string otherwise.

<li>Set the <code title=attr-sw-form-template>template</code>
<span>content attribute</span> of the element created to the second
item in <span title=form-parameters>parameters</span> of the
<span>form token</span>, if any, or the empty string otherwise.

<li>Set the <code title=attr-sw-form-option>option</code>
<span>content attribute</span> of the element created to the third
item in <span title=form-parameters>parameters</span> of the
<span>form token</span>, if any, or the empty string otherwise.

<li>If the <span title=form-parameters>parameters</span> contains four
or more items, set the <code
title=attr-sw-form-parameter>parameter</code> <span>content
attribute</span> of the element created to the concatenation of items
in <span title=form-parameters>parameters</span>, separated by a
<code>:</code> character, in the same order.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>Any other <span>form token</span>

<dd>

<ol class=steps>

<li>Create a <code>form</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Set the <code title=attr-sw-form-ref>ref</code> <span>content
attribute</span> of the element created to <span
title=form-name>name</span> of the <span>form token</span>.

<li>If the <code title=form-id>id</code> of the <span>form
token</span>
is <em>not</em> <code>null</code>, <span title=concept-element-attributes-set-value>set</span>
the <code>id</code> <span>attribute</span> of the element created
to <span title=form-id>id</span> of the <span>form token</span>.

<li>If <span title=form-parameters>parameters</span> of <span>form
token</span> is not empty, set the <code
title=attr-sw-form-parameter>parameter</code> <span>content
attribute</span> of the element created to the concatenation of items
in <span title=form-parameters>parameters</span>, separated by a
<code>:</code> character, in the same order.  The result value might
be the empty string.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>An <span>element token</span>

<dd>

<ol class=steps>

<li>Create an element whose local name is <span
title=element-local-name>local name</span> of the <span>element
token</span> and namespace is <span
title=element-namespace>namespace</span> of the <span>element
token</span>.

<li>If <span title=element-anchor-attribute>anchor attribute</span> of
the <span>element token</span> is <em>not</em> null, set the <code
title=attr-sw-anchor>anchor</code> <span>content attribute</span> in
the <span>SuikaWiki/0.9 namespace</span> of the element created to
<span title=element-anchor-attribute>anchor attribute</span> of the
<span>element token</span>.

<li>If <span title=element-by-attribute>by attribute</span> of the
<span>element token</span> is <em>not</em> null, set the <code
title=attr-sw-replace-by>by</code> <span>content attribute</span> of
the element created to <span title=element-by-attribute>by
attribute</span> of the <span>element token</span>.

<li>If <span title=element-res-scheme-attribute>resScheme
attribute</span> of the <span>element token</span> is <em>not</em>
null, set the <code title=attr-sw-res-scheme>resScheme</code>
<span>content attribute</span> in the <span>SuikaWiki/0.9
namespace</span> of the element created to <span
title=element-res-scheme-attribute>resScheme attribute</span> of the
<span>element token</span>.

<li>If <span title=element-res-parameter-attribute>resParameter
attribute</span> of the <span>element token</span> is <em>not</em>
null, set the <code title=attr-sw-res-parameter>resParameter</code>
<span>content attribute</span> in the <span>SuikaWiki/0.9
namespace</span> of the element created to <span
title=element-res-parameter-attribute>resParameter attribute</span> of
the <span>element token</span>.

<li>If <span title=element-content>content</span> of the <span>element
token</span> is <em>not</em> null, set the <code>textContent</code>
<span>IDL attribute</span> of the element created to <span
title=element-content>content</span> of the <span>element
token</span>.

<li>Append the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>labeled list middle token</span>

<dd>

<ol class=steps>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>If the local name of the <span>current element</span> is
<code>dt</code>, pop the element off the <span>stack of open
elements</span>.

<li>Create a <code>dd</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>heading end token</span>

<dd>

<ol class=steps>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>If the local name of the <span>current element</span> is
<code>h1</code>, pop the element off the <span>stack of open
elements</span>.

<li>Switch to the "<span>in section</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>table cell end token</span>

<dd>

<ol class=steps>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>If the local name of the <span>current element</span> is
<code>td</code> or <code>th</code>, pop the element off
the <span>stack of open elements</span>.

<li>Switch to the "<span>in table row</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>block end tag token</span> whose <span
title=block-end-tag-tag-name>tag name</span> is <code>PRE</code>

<dt>A <span>preformatted end token</span>

<dd>

<ol class=steps>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>If the local name of the <span>current element</span> is
<code>pre</code>, pop the element off the <span>stack of open
elements</span>.

<li>Switch to the "<span>in section</span>" <span>insertion
mode</span>.

</ol>

<dt>Anything else

<dd>

<ol class=steps>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>Switch to the "<span>in section</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

</dl>

</section>

</section>

</section>

<section>
<h1>Serializing <span>SWML text serialization</span> documents</h1>

<p class=XXX>...
</section>

<section>
<h1>Element definitions for the SWML text serialization</h1>

<p>The following <span>ordered map</span> known as <dfn>Character
Reference Table</dfn> is referenced from the parser:

  <table>

  <thead>

  <tr><th><span title=map-key>Key</span><th><span title=map-value>Value</span>

  <tbody>

  <tr><th><code>#</code><td><code>#</code>
  <tr><th><code>&amp;</code><td><code>&amp;</code>
  <tr><th><code>'</code><td><code>'</code>
  <tr><th><code>*</code><td><code>*</code>
  <tr><th><code>-</code><td><code>-</code>
  <tr><th><code>:</code><td><code>:</code>
  <tr><th><code>&lt;</code><td><code>&lt;</code>
  <tr><th><code>=</code><td><code>=</code>
  <tr><th><code>&gt;</code><td><code>&gt;</code>
  <tr><th><code>_</code><td><code>_</code>
  <tr><th><code>[</code><td><code>[</code>
  <tr><th><code>]</code><td><code>]</code>

  </table>

<p>The following <dfn>Block Element Table</dfn> is referenced from the
parser:

  <table>

  <thead>

  <tr>
    <th><span title=block-start-tag-tag-name>Tag name</span>
    <th><span title=concept-element-local-name>Local name</span>
    <th><span title=concept-element-namespace>Namespace</span>
    <th>Semantics (non-normative)
    <th>Semantics of start tag's <span title=concept-line-contents>line contents</span> (non-normative)

  <tbody>

  <tr>
    <th><dfn title=concept-BOX><code>BOX</code></dfn>
    <td><code>box</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A group of page content.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-DELETE><code>DEL</code></dfn>
    <td><code>delete</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>Removal.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-EG><code>EG</code></dfn>
    <td><code>example</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>Example.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-FIG><code>FIG</code></dfn>
    <td><code>figure</code>
    <td><span>HTML namespace</span>
    <td>Figure.
    <td>Figure caption.

  <tr>
    <th><dfn title=concept-FIGCAPTION><code>FIGCAPTION</code></dfn>
    <td><code>figcaption</code>
    <td><span>HTML namespace</span>
    <td>Figure caption.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-HISTORY><code>HISTORY</code></dfn>
    <td><code>history</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>Historical notes.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-INSERT><code>INS</code></dfn>
    <td><code>insert</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>Insertion.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-ITEMS><code>ITEMS</code></dfn>
    <td><code>sw-items</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td><span title=item>Items</span>.
    <td><span title="item types">Item types</span>.

  <tr>
    <th><dfn title=concept-ITEMTYPES><code>ITEMTYPES</code></dfn>
    <td><code>sw-itemtypes</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td><span title="item types">Item types</span>.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-LEFT><code>LEFT</code></dfn>
    <td><code>sw-left</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A left-to-right defaulted horizontal content where lines
    are stacked top-to-bottom.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-LEFTBOX><code>LEFTBOX</code></dfn>
    <td><code>sw-leftbox</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A box for left-to-right defaulted horizontal content where lines
    are stacked top-to-bottom.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-LEFTBTBOX><code>LEFTBTBOX</code></dfn>
    <td><code>sw-leftbtbox</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A box for left-to-right defaulted horizontal content where lines
    are stacked bottom-to-top.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-NOTE><code>NOTE</code></dfn>
    <td><code>note</code>
    <td><span>HTML3 namespace</span>
    <td>Note.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-POSTAMBLE><code>POSTAMBLE</code></dfn>
    <td><code>postamble</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>Postamble.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-PREAMBLE><code>PREAMBLE</code></dfn>
    <td><code>preamble</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>Preamble.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-REFS><code>REFS</code></dfn>
    <td><code>refs</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>References and quotations.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-RIGHT><code>RIGHT</code></dfn>
    <td><code>sw-right</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A right-to-left defaulted horizontal content where lines
    are stacked top-to-bottom.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-RIGHTBOX><code>RIGHTBOX</code></dfn>
    <td><code>sw-rightbox</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A box for right-to-left defaulted horizontal content where lines
    are stacked top-to-bottom.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-RIGHTBTBOX><code>RIGHTBTBOX</code></dfn>
    <td><code>sw-rightbtbox</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A box for right-to-left defaulted horizontal content where lines
    are stacked bottom-to-top.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-SPEAKER><code>SPEAKER</code></dfn>
    <td><code>speaker</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>Speaker name of a talk.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-TALK><code>TALK</code></dfn>
    <td><code>talk</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A single talk part in a dialogue.
    <td>Speaker name of the talk.

  <tr>
    <th><dfn title=concept-VLR><code>VLR</code></dfn>
    <td><code>sw-vlr</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A top-to-bottom defaulted vertical content where lines are stacked
    left-to-right.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-VLRBOX><code>VLRBOX</code></dfn>
    <td><code>sw-vlrbox</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A box for top-to-bottom defaulted vertical content where lines are
    stacked left-to-right.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-VRL><code>VRL</code></dfn>
    <td><code>sw-vrl</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A top-to-bottom defaulted vertical content where lines are stacked
    right-to-left.
    <td>Not allowed.

  <tr>
    <th><dfn title=concept-VRLBOX><code>VRLBOX</code></dfn>
    <td><code>sw-vrlbox</code>
    <td><span>SuikaWiki/0.9 namespace</span>
    <td>A box for top-to-bottom defaulted vertical content where lines
    are stacked right-to-left.
    <td>Not allowed.

  </table>

<div class="note memo">
<p>A future revison to this specification might define
more <span title=concept-section-block-tag-name>tag names</span>.
</div>

<div class="note memo">
<p>The semantics of an element is formally defined in terms of
corresponding DOM <span title=element>elements</span>.
</div>

<p><dfn>Block elements</dfn> are <span title=element>elements</span>
whose <span title=concept-element-local-name>local name</span> is one
of <span title=concept-element-local-name>local names</span> in
the <span>Block Element Table</span>.

<p><dfn>Structural elements</dfn> are <span>block elements</span> and
<span title=element>elements</span>
whose <span title=element-local-name>local name</span> is one
of <code title=element-html-body>body</code>, <code>section</code>,
<code>blockquote</code>, <code>h1</code>, <code>ul</code>,
<code>ol</code>, <code>dl</code>, <code>li</code>, <code>dt</code>,
<code>dd</code>, <code>table</code>, <code>tbody</code>, <code>th</code>,
<code>tr</code>, <code>td</code>, <code>p</code>, <code>comment-p</code>,
<code>ed</code>, <code>box</code>, and <code>pre</code>.

<div class="note memo">
<p>These definitions are referenced from the parser.  The parser does
not have to
check <span title=element>elements</span>' <span title=namespace>namespaces</span>.
</div>


</section>

<section>
<h1>The <dfn>SWML XML serialization</dfn></h1>

<p>A <span>document</span> using
SWML <span title=element>elements</span>
and <span title=attribute>attributes</span> can be serialized using
the XML syntax.

</section>

<section>
<h1>SWML MIME types</h1>

<p>An <dfn>SWML MIME type</dfn> is any <span>MIME type</span>
whose <span>essence</span> is <dfn><code>text/x-suikawiki</code></dfn>
or <dfn><code>text/x.suikawiki.image</code></dfn>.

<p>The <span>SWML text serialization</span> can be identified by
an <span>SWML MIME type</span>.  However, <span>MIME
type</span> <code>text/x.suikawiki.image</code> <em class=rfc2119>MUST
NOT</em> be used.

<p>An implementation that recognize any <span>SWML MIME
type</span> <em class=rfc2119>MUST</em> interpret all
the <span title="SWML MIME type">SWML MIME types</span> as equivalent.

<div class="note">

<p>Historically, a <span title=concept-document>document</span>
whose <span title=concept-format-name>format name</span>
is <code title=concept-magic-format-suikawiki>SuikaWiki</code> was
expected to be labeled as <code>text/x-suikawiki</code>, while
a <span title=concept-document>document</span>
whose <span title=concept-format-name>format name</span>
is <code title=concept-magic-format-suikawikiimage>SuikaWikiImage</code>
was expected to be labeled as <code>text/x.suikawiki.image</code>.

</div>

<hr>

<p>If a <span>string</span> is labeled by an <span>SWML MIME
type</span>, it <em class=rfc2119>MUST</em> be an <span>SWML text
serialization</span> <span title=concept-document>document</span>.

<p>If a <span>byte sequence</span> is labeled by an <span>SWML MIME
type</span>, it <em class=rfc2119>MUST</em> be an <span>SWML text
serialization</span> <span title=concept-document>document</span>,
encoded in <span>UTF-8</span>.

<p>When a <span>string</span> labeled by an <span>SWML MIME
type</span> is processed, the <span title="SWML text serialization
parser">parser</span> <em class=rfc2119>MUST</em> be used with
the <span>string</span> as the input.

<p>When a <span>byte sequence</span> labeled by an <span>SWML MIME
type</span> is processed, the <span title="SWML text serialization
parser">parser</span> <em class=rfc2119>MUST</em> be used with
the <span title="UTF-8 decode">UTF-8
decoded</span> <span title="convert">I/O-queue-coverted</span> <span>byte
sequence</span> as the input.

<hr>

<p>An <span>SWML MIME type</span> <em class=rfc2119>MAY</em> have
a <dfn title=parameter-charset><code>charset</code></dfn> <span>parameter</span>,
unless it is not allowed (e.g. when it is used to label
a <span>string</span>).  If specified, its
value <em class=rfc2119>MUST</em> be <code>UTF-8</code>, <span>ASCII
case-insensitive</span>.

<p>An <span>SWML MIME type</span> <em class=rfc2119>MUST NOT</em> have
any other <span>parameter</span>.

<p>An implementation that recognize any <span>SWML MIME
type</span> <em class=rfc2119>MUST</em> ignore
any <span>parameter</span> (including
the <code>charset</code> <span>parameter</span>).

<div class=note>

<p>Historically, there was
the <dfn title=parameter-version><code>version</code></dfn> <span>parameter</span>
whose value is <dfn title=parameter-version-0.9><code>0.9</code></dfn>
or <dfn title=parameter-version-0.10><code>0.10</code></dfn>.  It was
used to encode <span title=concept-format-version>format
version</span> in the <span title=concept-magic-line>magic
line</span>.

</div>

<p class=XXX>fragment identifier

<hr>

<p>The <span>SWML XML serialization</span> has no dedicated <span>MIME
type</span>.  It can be identified by any <span>XML MIME type</span>.

</section>


<section>
<h1>Semantics of elements and attributes</h1>

<p>This specification is <em>the</em> specification for the
<span>SuikaWiki/0.9 namespace</span> and the <span>SuikaWiki/0.10
namespace</span>.  Anything belongging to
those <span title=namespace>namespaces</span> is defined in this
specification.

<p>Elements and attributes in the <span>SuikaWiki/0.9 namespace</span>
and in the <span>SuikaWiki/0.10 namespace</span>, as well as
attributes in no namespace for elements in the <span>SuikaWiki/0.9
namespace</span> and in the <span>SuikaWiki/0.10 namespace</span>, <em
class=rfc2119>MUST NOT</em> be used in context where they are not <dfn
title="allowed attributes">allowed</dfn> explicitly.

<p>Elements in the <span>SuikaWiki/0.9 namespace</span> and in the
<span>SuikaWiki/0.10 namespace</span> defined in this specification
<em class=rfc2119>MUST</em> conform to their <dfn>content model</dfn>.

<p><span>Inter-element whitespace</span>, comment nodes, and
processing instruction nodes <em class=rfc2119>MUST</em> be
<span>ignored</span> when establishing whether an element matches its
content model or not.

<p>Elements in the <span>SuikaWiki/0.9 namespace</span> and in the
<span>SuikaWiki/0.10 namespace</span> <em class=rfc2119>MAY</em> be
orphan nodes (i.e. without a parent node).

<p>In the following subsections, attributes listed in the
<span>allowed attributes</span> entry <em class=rfc2119>MAY</em> be
set to an element described in that subsection.

<p>Some elements belong to <dfn title=category>categories</dfn> such
as <span>flow content</span> and <span>phrasing content</span>.

<section>
<h1>Document structures</h1>

<section>

<h1>The <dfn title=element-sw-document><code>document</code></dfn>
element in the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>A <code title=element-xhtml2-head>head</code> element in the
<span>XHTML2 namespace</span>, followed by a <code
title=element-xhtml2-body>body</code> element in the <span>XHTML2
namespace</span>, optionally followed by a <code>image</code> element
in the <span>SuikaWiki/0.9 namespace</span>.

<dt><span>Allowed attributes</span>

<dd>None.

<!--<dd><code title=attr-sw-name>Name</code> in the <span>SuikaWiki/0.9
namespace</span>

<dd><code title=attr-sw-version>Version</code> in the
<span>SuikaWiki/0.9 namespace</span>-->

</dl>

<p>This element <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>...

</section>

<section>

<h1>The <dfn title=attr-sw-name><code>Name</code></dfn> attribute in
the <span>SuikaWiki/0.9 namespace</span></h1>

<!--
<p>The <code title=attr-sw-version>Name</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em> be
set to an <code>html</code> element in the <span>HTML
namespace</span>.  The attribute can also be set to an <code
title=element-sw-document>document</code> element in the
<span>SuikaWiki/0.9 namespace</span>.
-->

<p>This attribute <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>...

</section>

<section>

<h1>The <dfn><code title=attr-sw-version>Version</code></dfn>
attribute in the <span>SuikaWiki/0.9 namespace</span></h1>

<!-- <p>The <code title=attr-sw-version>Version</code> attribute in
the <span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em> be
set to an <code>html</code> element in the <span>HTML
namespace</span>.  The attribute can also be set to an <code
title=element-sw-document>document</code> element in the
<span>SuikaWiki/0.9 namespace</span>.  -->

<p>This attribute <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>...

</section>

<section>

<h1>The <dfn title=element-sw-parameter><code>parameter</code></dfn>
element in the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.<!-- <span>Metadata content</span>. -->

<dt><span>Content model</span>

<dd>Zero or more <code title=element-sw-value>value</code> element in
the <span>SuikaWiki/0.9 namespace</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-parameter-name>name</code>

</dl>

<p>This element <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>... <dfn title=attr-sw-parameter-name>name</dfn>

</section>

<section>

<h1>The <dfn title=element-sw-value><code>value</code></dfn> element
in the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span title="text content">Text</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>This element <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>...

</section>

<section>
<h1>The <dfn><code>class</code></dfn> <span>attribute</span></h1>

<p>The <code>class</code> <span>attribute</span> of
an <span>element</span> in the <span>SuikaWiki/0.9 namespace</span> or
in the <span>SuikaWiki/0.10 namespace</span> has the same semantics
and requirements as the <code>class</code> <span>attribute</span> of
the <span title="HTML element">HTML elements</span>.

<p>Unless otherwise specified by other <span>applicable
specification</span>, the <code>class</code> <span>attribute</span> of
an <span>element</span> in the <span>AA namespace</span>, in
the <span>HTML3 namespace</span>, or in the <span>HTML3
namespace</span> has the same semantics and requirements as
the <code>class</code> <span>attribute</span> of the <span title="HTML
element">HTML elements</span>.

</section>

<section>
<h1>The <dfn><code>id</code></dfn> <span>attribute</span></h1>

<p>The <code>id</code> <span>attribute</span> of
an <span>element</span> in the <span>SuikaWiki/0.9 namespace</span> or
in the <span>SuikaWiki/0.10 namespace</span> has the same semantics
and requirements as the <code>id</code> <span>attribute</span> of
the <span title="HTML element">HTML elements</span>.

<p>Unless otherwise specified by other <span>applicable
specification</span>, the <code>id</code> <span>attribute</span> of
an <span>element</span> in the <span>AA namespace</span>, in
the <span>HTML3 namespace</span>, or in the <span>XHTML2
namespace</span> has the same semantics and requirements as
the <code>id</code> <span>attribute</span> of the <span title="HTML
element">HTML elements</span>.

</section>

<section>
<h1>The <dfn><code>itemprop</code></dfn> <span>attribute</span></h1>

<p>The <code>itemprop</code> <span>attribute</span> of
an <span>element</span> in the <span>SuikaWiki/0.9 namespace</span> or
in the <span>SuikaWiki/0.10 namespace</span> has the same semantics
and requirements as the <code>itemprop</code> <span>attribute</span>
of the <span title="HTML element">HTML elements</span>.

<p>Unless otherwise specified by other <span>applicable
specification</span>, the <code>itemprop</code> <span>attribute</span>
of an <span>element</span> in the <span>AA namespace</span>, in
the <span>HTML3 namespace</span>, or in the <span>XHTML2
namespace</span> has the same semantics and requirements as
the <code>itemprop</code> <span>attribute</span> of
the <span title="HTML element">HTML elements</span>.

</section>

<section>
<h1>The <dfn><code>xml:lang</code></dfn> <span>attribute</span></h1>

<p>The <code title=xml:lang>lang</code> <span>attribute</span> in
the <span>XML namespace</span>
(<code>xml:lang</code>) <em class=rfc2119>MAY</em> be set to
any <span>element</span> in the <span>SuikaWiki/0.9 namespace</span>
or in the <span>SuikaWiki/0.10 namespace</span>.

<p>Unless otherwise specified by other <span>applicable
specification</span>,
the <code title=xml:lang>lang</code> <span>attribute</span> in
the <span>XML namespace</span> <em class=rfc2119>MAY</em> be set to
any <span>element</span> in the <span>AA namespace</span>, in
the <span>HTML3 namespace</span>, or in the <span>XHTML2
namespace</span>.

<hr>

<p>The <dfn title=xml:space><code>space</code></dfn> <span>attribute</span>
in the <span>XML namespace</span> (<code>xml:space</code>) has no
effect for the <span title=element>elements</span> in
the <span>SuikaWiki/0.9 namespace</span> or in
the <span>SuikaWiki/0.10 namespace</span> and <em class=rfc2119>MUST
NOT</em> be used.

<p>Unless otherwise specified by other <span>applicable
specification</span>,
the <code title=xml:space>space</code> <span>attribute</span> in
the <span>XML namespace</span> has no effect for
the <span title=element>elements</span> in the <span>AA
namespace</span>, in the <span>HTML3 namespace</span>, or in
the <span>XHTML2 namespace</span> and <em class=rfc2119>MUST NOT</em>
be used.

<p>The <dfn><code>xml:base</code></dfn> <span>attribute</span> and
the <dfn><code>xml:id</code></dfn> <span>attribute</span> <em class=rfc2119>MUST
NOT</em> be used or supported.

</section>

</section>

<section>
<h1>Blocks</h1>

<section>

<h1>The <dfn><code>dr</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>A <code>dt</code> <span>element</span> in the <span>XHTML2
namespace</span>, followed by a <code>dd</code> <span>element</span>
in the <span>XHTML2 namespace</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>The <code>dr</code> <span>element</span>
is <span title=represents>semantically</span> equivalent to the
HTML <code>div</code> <span>element</span> that is
a <span>child</span> of the HTML <code>dl</code> <span>element</span>.

<p>This <span>element</span> <em class=rfc2119>MUST NOT</em> be used.

</section>

<section>

<h1>The <dfn><code>comment-p</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>The <code>comment-p</code> <span>element</span> <span>represents</span>
a note.

<div class="note memo">

<p>Historically, the <code title>p</code> suffix in the element name
implied that it <span title=represents>represented</span>
a <span>paragraph</span>.  As its content is any <span>flow
content</span>, it now can contain any number
of <span title=paragraph>paragraphs</span>.

</div>

</section>

<section>

<h1>The <dfn><code>history</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>history</code> element represents a description of
history or an out-of-date content.

</section>

<section>

<h1>The <dfn><code>example</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>example</code> element represents an example.

</section>

<section>

<h1>The <dfn><code>preamble</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>preamble</code> <span>element</span> <span>represents</span>
a preamble or preface.

</section>

<section>
<h1>The <dfn><code>postamble</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>postamble</code> <span>element</span> <span>represents</span>
a postamble.

</section>

<section>
<h1>The <dfn><code>box</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>box</code> <span>element</span> <span>represents</span> a
physically grouped chunk of contents.

<p>The <code>class</code> <span>attribute</span> and CSS can be used
to specify presentations of the <span>element</span>.

<div class="note memo">
<p>This <span>element</span> can be used to mark up a chunk of text
quoted from other materials when it is not apparently mapped into any
other <span>element</span>'s semantics, e.g. indented text,
center-aligned text, right-aligned text, and vertical text.
</div>

</section>

<section>
<h1>The <dfn><code>sw-items</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd>An optional <code>sw-itemtypes</code> <span>element</span>
followed by <span>flow content</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-items</code> <span>element</span> <span>represents</span>
a set of <span title=item>items</span>.

<p>Any
HTML <code>li</code> <span>element</span> <span>descendant</span> of
an <code>sw-items</code> <span>element</span> is considered as
an <span>item</span>
(i.e. an <code title=attr-html-itemscope>itemscope</code> <span>attribute</span>
is implied for the purpose of <span title=represents>element
semantics</span>) whose <span>item types</span> is its
nearest <span>ancestor</span> <code>sw-items</code> <span>element</span>'s <span>item
item types</span>.

<p>Any
HTML <code>li</code> <span>element</span> <span>descendant</span> of
HTML <code>li</code> <span>element</span> <span>descendant</span> of
an <code>sw-items</code> <span>element</span> is considered as having
a <span title="property names">property
name</span> <dfn title=itemprop-child><code>child</code></dfn>
(i.e. an <code><code title=attr-html-itemprop>itemprop</code>=<code>child</code></code> <span>attribute</span>
is implied for the purpose of <span title=represents>element
semantics</span>).

<p>The <dfn>item item types</dfn> of
an <code>sw-items</code> <span>element</span> <var>element</var> is
the result of the following steps:

  <ol class=steps>

  <li>Let <var>types</var> be an <span title="is
  empty">empty</span> <span>list</span>.

  <li>Let <var>container</var> be the
  first <code>sw-itemtypes</code> <span>element</span> <span>child</span>
  of <var>element</var>, if any, or <code>null</code> otherwise.

  <li>If <var>conainer</var> is <code>null</code>,
  return <var>types</var>.

  <li>Let <var>anchors</var> be the <span title="list of elements with
  namespace and local name">list of elements</span> with
  the <span>SuikaWiki/0.9 namespace</span> and <code>anchor</code>.

  <li><span>For each</span> <var>anchor</var> in <var>anchors</var>:

    <ol>

    <li><span title=list-append>Append</span> <var>anchor</var>'s <span>destination</span>
    to <var>types</var>.

    </ol>

  <li>Return <var>types</var>.
  
  </ol>

<p>The <dfn>item ID</dfn> of an
HTML <code>li</code> <span>element</span> <span>descendant</span> of
an <code>sw-items</code> <span>element</span> <var>element</var> is
the result of the following steps:

  <ol class=steps>

  <li>Let <var>end</var> be the
  first <code>anchor-end</code> <span>element</span> <span>child</span>
  of <var>element</var>, if any, or <code>null</code> otherwise.
  
  <li>If <var>end</var> is <code>null</code>, return <code>null</code>.

  <li>Return a <span>URL</span> that is a unique identifier that is
  associated with <var>end</var>.

  </ol>

<p>For the purpose of the convertion from
an <code>sw-items</code> <span>element</span> to a Microdata subtree,
the <span>item ID</span> of an
HTML <code>li</code> <span>element</span> can be used as
the <code title=attr-html-itemid>itemid</code> <span>attribute
value</span>.

</section>

<section>
<h1>The <dfn><code>sw-itemtypes</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-itemtypes</code> <span>element</span> <span>represents</span>
a set of <span>item types</span>.

</section>

</section>

<section>
<h1>Dialogues</h1>

<section>
<h1>The <dfn><code>dialogue</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd>Zero or
more <code>talk</code> <span title=element>elements</span>, optionally
intermixed with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>The <code>dialogue</code> <span>element</span> <span>represents</span>
a conversation between one or more persons.

<p>Each piece of the conversation is represented
by <span>child</span> <code>talk</code> <span title=element>elements</span>.

<p>A <code>dialogue</code> <span>element</span> <em class=rfc2119>SHOULD</em>
have at least
one <code>talk</code> <span>element</span> <span>child</span>.

</section>

<section>

<h1>The <dfn><code>talk</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>One <code>speaker</code> <span>element</span> followed
by <span>flow content</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>talk</code> <span>element</span> <span>represents</span>
a group of sentences by a person (or a specific group of persons) in
the dialogue.

<p>The <dfn title=concept-talk-speaker>speaker</dfn> of
a <code>talk</code> <span>element</span> is the
first <code>speaker</code> <span>child</span> <span>element</span> of
the <span>element</span>, if any, or <code>null</code>.  If
the <span title=concept-talk-speaker>speaker</span> is
not <code>null</code>, it describes the speaker(s) of the talk.
Otherwise, the speaker is not explicitly described.

<div class="note memo">
<p>Interviewer's questions are often identified by lack of explicit
speaker name.
</div>

<p>The <code>class</code> attribute can be used to style talks in a
dialogue based on the speaker of them (e.g. use different colors for
different speakers).

</section>

<section>

<h1>The <dfn><code>speaker</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>speaker</code> <span>element</span> <span>represents</span>
a short string used to credit the person (or a group of person) of the
piece of the conversation.

<p>It can also contain other metadata than person name, such as
affiliation of the person or the timestamp of the talk, if desired.

</section>


</section>


<section>
<h1>Hyperlinks</h1>

<p>Some of <span title=element>elements</span> defined by this
specification or used in SWML documents are considered as
<dfn>implicit link
elements</dfn>.  <span title=element>Elements</span>
<code>abbr</code>,
<code>cite</code>,
<code>code</code>, and
<code>kbd</code>
in the <span>HTML namespace</span> are <span>impicit link
elements</span>.

<section>

<h1>The <dfn><code>anchor</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by
a <code>title</code> <span>element</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-anchor>anchor</code> in the
<span>SuikaWiki/0.9 namespace</span>

</dl>

<p>An <code>anchor</code> <span>element</span> <span>represents</span>
a source anchor of hyperlink.

<p>The hyperlink has a destination, which is identified in the
application-dependent manner by
the <span>element</span>'s <span>destination</span>.
The <dfn>destination</dfn> of
an <code>anchor</code> <span>element</span> <var>element</var> is the
result of the following steps:

  <ol class=steps>

  <li>Let <var>title</var> be the
  first <code>title</code> <span>element</span> <span>child</span>, if
  any, or <code>null</code> otherwise.

  <li>If <var>title</var> is <code>null</code>,
  return <var>element</var>'s <span>text content</span>.

  <li>Otherwise, return <var>title</var>'s <span>text content</span>.
    
  </ol>
  
</section>

<section>

<h1>The <dfn><code>anchor-internal</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-anchor>anchor</code> in the
<span>SuikaWiki/0.9 namespace</span>

</dl>

<p class=XXX>...

</section>

<section>

<h1>The <dfn><code>anchor-end</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-anchor>anchor</code> in the
<span>SuikaWiki/0.9 namespace</span>.

</dl>

<p class=XXX>...

</section>

<section>

<h1>The <dfn title=attr-sw-anchor><code>anchor</code></dfn> attribute
in the <span>SuikaWiki/0.9 namespace</span></h1>

<p>The <code title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span>, when set to an
<code>anchor-end</code> element, defines an <dfn>anchor number</dfn>
for the parent element of the <code>anchor-end</code> element, if any.

<p>The attribute <em class=rfc2119>MUST</em> be present and its
value <em class=rfc2119>MUST</em> be a <span>valid integer</span>.
The integer <em class=rfc2119>MUST</em> have different value from any
other <code title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> of an
<code>anchor-end</code> element in the <span>SuikaWiki/0.9
namespace</span> that belongs to the same tree as the first attribute.

<hr>

<p>The <code title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em> be
set to <code>q</code> elements in the <span>HTML
namespace</span> and in the <span>XHTML2 namespace</span>, as well as
<code>ins</code> and <code>del</code> elements in the <span>HTML
namespace</span>.  The attribute can also be present to
<code>anchor</code> and <code>anchor-internal</code> elements in the
<span>SuikaWiki/0.9 namespace</span>.

<p>In these cases, the attribute represents the <span>anchor
number</span> of the element referenced.  If the element on which the
attribute is found is an <code>anchor</code> element, the element
referenced might be found in the document referenced by the element.
Otherwise, the element is in the tree the element belongs to.

<p>If the element on which the attribute is found is <em>not</em>
an <code>anchor</code> or <code>anchor-internal</code> element, the
attribute has similar semantics to that of the <code title>cite</code>
attribute on the element.  In such cases, the <code
title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MUST NOT</em>
be present when there is a <code title>cite</code> attribute.
A user agent <em class=rfc2119>MUST</em> <span
title=ignored>ignore</span> the <code
title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> if there is a <code title>cite</code>
attribute.

<p>The attribute value <em class=rfc2119>MUST</em> be a <span>valid
integer</span>.  Unless the element is <code>anchor</code>, the
integer <em class=rfc2119>MUST</em> be equal to one of the integer
represented by the <code title=attr-sw-anchor>anchor</code> attribute
in the <span>SuikaWiki/0.9 namespace</span> set to an
<code>anchor-internal</code> element in the <span>SuikaWiki/0.9
namespace</span> that belongs to the same tree.

</section>

<section>

<h1>The <dfn><code>anchor-external</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-res-parameter>resParameter</code> in the
<span>SuikaWiki/0.9 namespace</span>

<dd><code title=attr-sw-res-scheme>resScheme</code> in the
<span>SuikaWiki/0.9 namespace</span>

</dl>

<p class=XXX>...

</section>

<section>

<h1>The <dfn title=attr-sw-res-scheme><code>resScheme</code></dfn>
attribute in the <span>SuikaWiki/0.9 namespace</span></h1>

<p>The <code title=attr-sw-res-scheme>resScheme</code> attribute in
the <span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em> be
used for <code>q</code> elements in the <span>HTML
namespace</span> and in the <span>XHTML2 namespace</span>, as well as
<code>ins</code> and <code>del</code> elements in the <span>HTML
namespace</span>.  The attribute can also be used for an
<code>anchor-external</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<p class=XXX>...

</section>

<section>

<h1>The <dfn
title=attr-sw-res-parameter><code>resParameter</code></dfn> attribute
in the <span>SuikaWiki/0.9 namespace</span></h1>

<p>The <code title=attr-sw-res-parameter>resParameter</code> attribute
in the <span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em>
be used for <code>q</code> elements in the <span>HTML
namespace</span> and in the <span>XHTML2 namespace</span>, as well as
<code>ins</code> and <code>del</code> elements in the <span>HTML
namespace</span>.  The attribute can also be used for an
<code>anchor-external</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<p class=XXX>...

<p>The <dfn>element's <code>resScheme</code></dfn> of
an <code>resParameter</code> <span>attribute</span> in
the <span>SuikaWiki/0.9 namespace</span> <var>attr</var> is the result
of the following steps:

  <ol class=steps>

  <li>If <var>attr</var>'s <span title="owner element">element</span>
  is <span>null</span>, return the <span>empty string</span>.

  <li>Return the result of <span title="get an attribute
  value">getting</span> <var>attr</var>'s <span title="owner
  element">element</span>'s <code>resScheme</code> <span>attribute</span>
  in the <span>SuikaWiki/0.9 namespace</span>.<!-- attribute value or
  the empty string -->

  </ol>

<p>If the <span>element's <code>resScheme</code></span>
is <code title=concept-MAIL>MAIL</code>, the <span>attribute
value</span> <em class=rfc2119>MUST</em> be a <span>valid e-mail
address</span>.

<p>If the <span>element's <code>resScheme</code></span>
is <code title=concept-external-reference-scheme-EMBED>M</code>,
<code title=concept-IMG>IMG</code>,
<code title=concept-URL>URL</code>,
or <code title=concept-URI>URI</code>, the <span>attribute
value</span> <em class=rfc2119>MUST</em> be a <span>valid URL
string</span>.

</section>

</section>

<section>
<h1>Embedded objects</h1>

<p>Unless otherwise specified by other <span>applicable
specification</span>, the <code>aa</code> <span>element</span> is
a <span>phrasing content</span> and its <span>content model</span>
is <span>phrasing content</span>.<!-- As the original specification
does not define details of the element's author requirements, we
define them for our purposes only here. -->

<section>

<h1>The <dfn><code>form</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Nothing</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-id>id</code>
<dd><code title=attr-sw-form-input>input</code>
<dd><code title=attr-sw-form-option>option</code>
<dd><code title=attr-sw-form-parameter>parameter</code>
<dd><code title=attr-sw-form-ref>ref</code>
<dd><code title=attr-sw-form-template>template</code>

</dl>

<p class=XXX>... <dfn title=attr-sw-form-ref><code>ref</code></dfn>,
<dfn title=attr-sw-form-parameter><code>parameter</code></dfn>.

<hr>

<p class=XXX>... <dfn
title=attr-sw-form-input><code>input</code></dfn>, <dfn
title=attr-sw-form-template><code>template</code></dfn>, <dfn
title=attr-sw-form-option><code>option</code>

</section>

<section>

<h1>The <dfn><code>image</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span title="text content">Text</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>This <span>element</span> <em class=rfc2119>MUST NOT</em> be used.
It was used to embed an image data associated with
the <span>document</span>.

<p>An <code>image</code> <span>element</span> <var>element</var> in
the <span>SuikaWiki/0.9 namespace</span> <span>represents</span> the
result of the following steps:

  <ol class=steps>

  <li>Let <var>encoded</var> be <var>elmeent</var>'s <span>text
  content</span>.

  <li>Let <var>decoded</var> be the result
  of <span title="forgiving-base64
  decode">decoding</span> <var>encoded</var>.

  <li>If <var>decoded</var> is failure, return nothing.

  <li>If <var>decoded</var> is not a valid <span>PNG</span>
  or <span>JFIF</span> image data, return nothing.

  <li>Return an image represented by <var>decoded</var>.

  </ol>

<div class=note>

<p>Historically, at most one <code>image</code> <span>element</span>
was allowed to be inserted after
the <code>body</code> <span>element</span> in the <span>HTML
namespace</span>.  Its content has to be
a <span title="forgiving-base64
encode">Base64-encoded</span> <span>PNG</span> or JPEG
(<span>JFIF</span>) image data.

</div>

</section>

<section>

<h1>The <dfn><code>replace</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None. <!-- <span>Phrasing content</span>. -->

<dt><span>Content model</span>

<dd><span>Nothing</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-replace-by>by</code>

</dl>

<p>This element <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>... <dfn title=attr-sw-replace-by><code>by</code></dfn>

</section>

<section>

<h1>The <dfn><code>text</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span title="text content">Text</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>This element <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>...

</section>

</section>

<section>
<h1>Citations</h1>

<section>

<h1>The <dfn><code>csection</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p class=XXX>...

</section>

<section>

<h1>The <dfn><code>src</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p class=XXX>...

</section>

<section>

<h1>The <dfn><code>refs</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>refs</code> element represents a list of referenced
documents.

</section>

<section>
<h1>The <dfn><code>sw-see</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-see</code> <span>element</span> <span>represents</span>
a text that contains references to other relevant parts (typically
another pages in the same Wiki or another pieces in the same document)
associated with the surrounding texts.

</section>

</section>

<section>
<h1>Writing directions</h1>

<p>A <span>node</span>'s <dfn>inline direction mode</dfn> is
either <span>horizontal mode</span> or <span>vertical mode</span>.
Unless otherwise specified, the <span>node</span>'s <span>inline
direction mode</span> is same as
the <span>node</span>'s <span>parent</span>'s <span>inline direction
mode</span> if the <span>node</span>'s <span>parent</span> is
not <code>null</code>, or <span>horizontal mode</span> otherwise.

<p>In <dfn>horizontal mode</dfn>, characters are intended to be
stacked horizontally, left-to-right or
right-to-left.  <span title="vertical glyph">Vertical glyphs</span>
are <em>not</em> used.

<p>In <dfn>vertical mode</dfn>, characters are intended to be stacked
vertically, top-to-bottom or bottom-to-top.  <span title="vertical
glyph">Vertical glyphs</span> are used.

<p><dfn title="vertical glyph">Vertical glyphs</dfn>
are <span title=glyph>glyphs</span> used in vertical writings.  For
Unicode characters, they are described by
the <code>Vertical_Orientation</code> property of
the <span title="code point">code points</code>.

<p>When an <span>element</span> is defined as <dfn>turned</dfn>, it is
rotated 180 degree.  For example, a left-to-right text becomes a
right-to-text text with 180-degree
rotated <span title=glyph>glyphs</span>, a top-to-bottom text becomes
a bottom-to-top text with 180-degree
rotated <span title=glyph>glyphs</span>, and an underline becomes an
overline.

<p>When an <span>element</span> is defined as <dfn>mirrored</dfn>, it
is reversed at the horizontal center line in <span>horizontal
mode</span> or at the vertical center line in <span>vertical
mode</span>.  For example, a left-to-right text becomes a
right-to-text text with horizontally mirrored
<span title=glyph>glyphs</span> and a top-to-bottom text becomes a
bottom-to-top text with vertically mirrored
<span title=glyph>glyphs</span>.

<p>An <span>node</span> has <dfn>horizontal orientation</dfn>
and <dfn>vertical orientation</dfn>.  Unless otherwise specified,
a  <span>horizontal mode</span>
<span>node</span>'s <span>horizontal orientation</span> is its natural
orientation and <span>vertical orientation</span> is its 90-degree
clockwise rotation (that is, the left of the context becomes the
bottom for the <span>node</span>'s content).  Unless otherwise
specified, a <span>vertical
mode</span> <span>node</span>'s <span>vertical orientation</span> is
its natural orientation and the <span>node</span>'s <span>horizontal
orientation</span> is its 270-degree clockwise rotation (that is, the
right of the context becomes the top for the <span>node</span>'s
content).  These rotations are applied after
any <span title=turned>turning</span>.

<p>For a <span>horizontal mode</span> <span>node</span>,
its <span title=child>children</span> <span title=represents>represent</span>
their <span>horizontal orientation</span>.  For a <span>vertical
mode</span> <span>node</span>,
its <span title=child>children</span> <span title=represents>represent</span>
their <span>vertical orientation</span>.

<hr>

<p>A <dfn>directional group</dfn> is a sequence of zero or
more <span>flow content</span> with a specific set of
inline-direction/block-direction.  It is <span>expected</span> to be
rendered in a way that is appropriate for the directions.  For
example, a right-to-left/top-to-bottom <span>directional group</span>
is styled such that texts are right-aligned and blocks are
top-aligned.

<p>A <dfn>directional box</dfn> is a <span>directional group</span>.
A <span>directional box</span>'s <span>horizontal orientation</span>
and <span>vertical orientation</span> are its natural orientation.

<section>
<h1>The <dfn><code>sw-l</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-l</code> <span>element</span> <span>represents</span>
a left-to-right, <span>horizontal mode</span> text.

</section>

<section>
<h1>The <dfn><code>sw-lt</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-lt</code> <span>element</span> <span>represents</span>
a <span>turned</span> left-to-right, <span>horizontal mode</span>
text.

</section>

<section>
<h1>The <dfn><code>sw-r</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-r</code> <span>element</span> <span>represents</span>
a right-to-left, <span>horizontal mode</span> text.

</section>

<section>
<h1>The <dfn><code>sw-rt</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-rt</code> <span>element</span> <span>represents</span>
a <span>turned</span> right-to-left, <span>horizontal mode</span>
text.

</section>

<section>
<h1>The <dfn><code>sw-v</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-v</code> <span>element</span> <span>represents</span>
a top-to-bottom, <span>vertical mode</span> text.

</section>

<section>
<h1>The <dfn><code>sw-vt</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-vt</code> <span>element</span> <span>represents</span>
a <span>turned</span> top-to-bottom, <span>vertical mode</span> text.

</section>

<section>
<h1>The <dfn><code>sw-vb</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-vb</code> <span>element</span> <span>represents</span>
a bottom-to-top, <span>vertical mode</span> text.

</section>

<section>
<h1>The <dfn><code>sw-vbt</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-vbt</code> <span>element</span> <span>represents</span>
a <span>turned</span> bottom-to-top, <span>vertical mode</span> text.

</section>

<section>
<h1>The <dfn><code>sw-tate</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-tate</code> <span>element</span> <span>represents</span>
a <span>vertical mode</span> text embedded in <span>horizontal
mode</span>.

<p>The <code>sw-tate</code> <span>element</span>'s <span>horizontal
orientation</span> and <span>vertical orientation</span> are its
natural orientation.

<p>The <code>sw-tate</code> <span>element</span> <em class=rfc2119>MUST
NOT</em> be used in <span>vertical mode</span>.

</section>

<section>
<h1>The <dfn><code>yoko</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>yoko</code> <span>element</span> <span>represents</span>
a <span>horizontal mode</span> text embedded in <span>vertical
mode</span>.

<p>The <code>yoko</code> <span>element</span>'s <span>horizontal
orientation</span> and <span>vertical orientation</span> are its
natural orientation.

<p>The <code>yoko</code> <span>element</span> <em class=rfc2119>MUST
NOT</em> be used in <span>horizontal mode</span>.

  <div class=note>
    <p>The <span>element</span> can be used to mark up
    a <span lang=ja>縦中横</span> text span or a upright latin letter
    in a vertical text.
  </div>

</section>

<section>
<h1>The <dfn><code>sw-mirrored</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-mirrored</code> <span>element</span> <span>represents</span>
a <span>mirrored</span> text.

</section>

<section>
<h1>The <dfn><code>sw-left</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-left</code> <span>element</span> <span>represents</span>
a left-to-right/top-to-bottom <span>directional group</span>
in <span>horizontal mode</span>.

</section>

<section>
<h1>The <dfn><code>sw-right</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-right</code> <span>element</span> <span>represents</span>
a right-to-left/top-to-bottom <span>directional group</span>
in <span>horizontal mode</span>.

</section>

<section>
<h1>The <dfn><code>sw-vlr</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-vlr</code> <span>element</span> <span>represents</span>
a top-to-bottom/left-to-right <span>directional group</span>
in <span>vertical mode</span>.

</section>

<section>
<h1>The <dfn><code>sw-vrl</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-vrl</code> <span>element</span> <span>represents</span>
a top-to-bottom/right-to-left <span>directional group</span>
in <span>vertical mode</span>.

</section>

<section>
<h1>The <dfn><code>sw-leftbox</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-leftbox</code> <span>element</span> <span>represents</span>
a left-to-right/top-to-bottom <span>directional box</span>
in <span>horizontal mode</span>.

</section>

<section>
<h1>The <dfn><code>sw-rightbox</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-rightbox</code> <span>element</span> <span>represents</span>
a right-to-left/top-to-bottom <span>directional box</span>
in <span>horizontal mode</span>.

</section>

<section>
<h1>The <dfn><code>sw-leftbtbox</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-leftbtbox</code> <span>element</span> <span>represents</span>
a left-to-right/bottom-to-top <span>directional box</span>
in <span>vertical mode</span>.

  <div class=note>
    <p>Though it is desired that the <span>element</span> be
    in <span>horizontal mode</span>, it is defined as
    in <span>vertical mode</span>, such that the bottom-to-top block
    direction can be emulated by
    CSS <code>'<span>writing-mode</span>: <span>vertical-lr</span>'</code>
    with 270-degree rotation.
  </div>

</section>

<section>
<h1>The <dfn><code>sw-rightbtbox</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-rightbtbox</code> <span>element</span> <span>represents</span>
a right-to-left/bottom-to-top <span>directional box</span>
in <span>vertical mode</span>.

  <div class=note>
    <p>Though it is desired that the <span>element</span> be
    in <span>horizontal mode</span>, it is defined as
    in <span>vertical mode</span>, such that the bottom-to-top block
    direction can be emulated by
    CSS <code>'<span>writing-mode</span>: <span>vertical-lr</span>'</code>
    with 270-degree rotation.
  </div>

</section>

<section>
<h1>The <dfn><code>sw-vlrbox</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-vlrbox</code> <span>element</span> <span>represents</span>
a bottom-to-top/left-to-right <span>directional box</span>
in <span>vertical mode</span>.

</section>

<section>
<h1>The <dfn><code>sw-vrlbox</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-vrlbox</code> <span>element</span> <span>represents</span>
a bottom-to-top/right-to-left <span>directional box</span>
in <span>vertical mode</span>.

</section>

</section>

<section>
<h1>Inline structures</h1>

<section>
<h1>The <dfn><code>fenced</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd>An <code>openfence</code> <span>element</span>, followed by
a <code>fencedtext</code> <span>element</span>, followed by an
optional <code>closefence</code> <span>element</span>, optionally
intermixed with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>fenced</code> <span>element</span> <span>represents</span>
a chunk of content with parentheses enclosing it.

<p>The <code>fenced</code> <span>element</span>'s <dfn>open
fence</dfn> is the
first <span>child</span> <code>openfence</code> <span>element</span>,
if any, or <code>null</code> instead.

<p>The <code>fenced</code> <span>element</span>'s <dfn>fenced
content</dfn> is the
first <span>child</span> <code>fencedtext</code> <span>element</span>,
if any, after any <span>open fence</span> of the <span>element</span>.

<p>The <code>fenced</code> <span>element</span>'s <dfn>close
fence</dfn> is the
first <span>child</span> <code>closefence</code> <span>element</span>,
if any, after any <span>fenced content</span> of
the <span>element</span>.

<p>Any other <span>child</span> <span>represents</span> nothing.

<p>The <span>element</span>'s non-<code>null</code> <span>open
fence</span> or <span>close
fence</span>'s <span title=children>child</span> <em class=rfc2119>MAY</em>
be <span title="is empty">empty</span>.  It is semantically equivalent
to the <span>element</span>'s <span>open fence</span> or <span>close
fence</span>, respectively, is <code>null</code>.

<p>It is <span>expected</span> that the <span>open fence</span>
and <span>close fence</span>, if any, are rendered by the same line
height as the maximum of the height of the <span>fenced content and
the height of the <span>line box</span> usually generated by
the <span>open fence</span> or <span>close fence</span></span>.

</section>

<section>
<h1>The <dfn><code>openfence</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Nothing</span>.
<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>openfence</code> <span>element</span> <span>represents</span>
the parenthese before the <span>fenced content</span> if it is an
<span>open fence</span>.  Otherwise, it <span>represents</span>
its <span title=child>children</span>.

</section>

<section>
<h1>The <dfn><code>fencedtext</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>fencedtext</code> <span>element</span> <span>represents</span>
the content enclosed by parentheses if it is a
<span>fenced content</span>.  Otherwise, it <span>represents</span>
its <span title=child>children</span>.

</section>

<section>
<h1>The <dfn><code>closefence</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Nothing</span>.
<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>closefence</code> <span>element</span> <span>represents</span>
the parenthese after the <span>fenced content</span> if it is an
<span>close fence</span>.  Otherwise, it <span>represents</span>
its <span title=child>children</span>.

</section>

<section>
<h1>The <dfn><code>lines</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd>Two or more <code>line</code> <span title=element>elements</span>,
optionally intermixed with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>lines</code> <span>element</span> <span>represents</span>
zero or more spans of parallel contents embedded within a line.

</section>

<section>
<h1>The <dfn><code>line</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>line</code> <span>element</span> <span>represents</span>
a piece of content in the <span>parent</span>
<code>lines</code> <span>element</span>, if any.  Otherwise,
it <span>represents</span> its content.

</section>

</section>

<section>
<h1>Editorial annotations</h1>

<section>

<h1>The <dfn><code>insert</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>insert</code> <span>element</span> is equivalent to
the <code>ins</code> <span>element</span>.

</section>

<section>
<h1>The <dfn><code>delete</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>delete</code> <span>element</span> is equivalent to
the <code>del</code> <span>element</span>.

</section>

<section>
<h1>The <dfn><code>ed</code></dfn> element in the <span>SuikaWiki/0.10
namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=XXX>...

</section>

<section>
<h1>The <dfn><code>asis</code></dfn> element in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by
a <code>title</code> <span>element</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>asis</code> <span>element</span> <span>represents</span>
a chunk of content with an annotation that the content is repeated
from the source material as-is.  This annotation is typically used
within a quotation to describe that the content has an error that
occurs in the original text (and is <em>not</em> produced by the
author of the document).

<p>If there is a last <span>child</span> <span>element</span> that is
a <code>title</code> <span>element</span>, it is the annotation (and
is not part of the annotated content).  A user agent
is <span>expected</span> to show the annotation as such.  If there is
no <code>title</code> <span>element</span> <span>child</span>, a
<span title="user agent">user-agent</span> dependent
annotation <em class=rfc2119>SHOULD</em> be used instead.

<div class="note memo">

<p>Typically a short text such as “(sic)” or “<span lang=ja>ママ</span>” 
is used as the annotation.

</div>

</section>

<section>
<h1>The <dfn><code>snip</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Nothing</span>.
<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>snip</code> <span>element</span> <span>represents</span>
the point where some content in the source material are omitted.  It
is typically used within a quotation.

<p>If the <span>element</span>'s <span title=child>children</span>
is <em>not</em> <span title="is empty">empty</span>,
it <span>represents</span> the annotation placed instead of the
original text.

<p>It is <span>expected</span> that
the <span>element</span>'s <span title=child>children</span> are
rendered.  If
the <span>element</span>'s <span title=child>children</span>
is <span title="is empty">empty</span>, a
<span title="user agent">user-agent</span> dependent
annotation <em class=rfc2119>SHOULD</em> be used instead.

<div class="note memo">

<p>Typically, a short text such as “...” or
“<span lang=ja>(中略)</span>” is used as the annotation.

</div>

</section>

</section>

<section>
<h1>Inline annotations</h1>


<section>
<h1>The <dfn><code>emph</code></dfn> element in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>emph</code> <span>element</span> is equivalent to
the <code>em</code> <span>element</span>.

<p>The <code>class</code> <span>attribute</span> and CSS can be used
to specify presentations of emphasized texts, such as italic and
various kinds of annotation marks.

</section>

<section>
<h1>The <dfn><code>rubyb</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, followed by an <code>rt</code>
<span>element</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>rubyb</code> <span>element</span> is equivalent to
the <code>ruby</code> <span>element</span> except that it only
contains the base text (<span>phrasing content</span>) and the
secondary ruby text (an <code>rt</code> <span>element</span>).

<p>It is <span>expected</span> that the first <code>rt</code> 
<span>element</span> <span>child</span>, if any, is rendered
<span>after</span> the other <span title=child>children</span> before
it.

</section>


<section>
<h1>The <dfn><code>okuri</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd>An <code>rt</code> <span>element</span>, optionally followed by
an <code>rt</code> <span>element</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>okuri</code> <span>element</span> <span>represents</span>
<i lang=ja>okuri-gana</i>s (<span lang=ja>送り仮名</span>) annotated
after the base character in <i lang=ja>Kambun</i> 
(<span lang=ja>漢文</span>).

<p>Its first <code>rt</code> <span>element</span> <span>child</span>,
if any, <span>represents</span> the primary ruby text.  Its
second <code>rt</code> <span>element</span> <span>child</span>, if
any, <span>represents</span> the secondary ruby text.  The base
character is the character just before
the <code>okuri</code> <span>element</span> (ignoring out-of-flow
content such as another ruby texts).

<p>It is <span>expected</span> that the primary ruby text, if any, is
rendered at the right bottom of the base character and the secondary
ruby text, if any, is rendered at the left bottom of the base
character, in a vertical text.  Note that the base character might
have its own ruby texts (i.e. it is part of
a <code>ruby</code> <span>element</span>).

</section>

<section>
<h1>The <dfn><code>weak</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p class=XXX>...

</section>

<section>
<h1>The <dfn><code>title</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>The <code>title</code> <span>element</span> <span>represents</span>
a text that would be specified to
the <code title=attr-html-title>title</code> <span>attribute</span> of
the <span>parent</span> <span>element</span>, if applicable.
Otherwise, it <span>represents</span> nothing.

<p>A <code>title</code> <span>element</span> <em class=rfc2119>MAY</em>
be the last
non-<span title="script-supporting elements">script-supporting</span>
<span>child</span> <span>element</span> of an
HTML <code>abbr</code>, <code>dfn</code>,
or <code>span</code> <span>element</span> <var>parent</var> when there
is no <code title=attr-html-title>title</code> <span>attribute</span>
in <var>parent</var>.

<p>The <code>title</code> <span>element</span> <em class=rfc2119>MUST
NOT</em> be used when it <span>represents</span> nothing.

</section>

</section>

<section>
<h1>Mathematical representations</h1>


<section>
<h1>The <dfn><code>dotabove</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>dotabove</code> <span>element</span> <span>represents</span>
a content with a dot above it.  This is used in mathematical
expressions, such as recurring decimals.

<p>It is <span>expected</span> that a dot symbol is rendered above
the <span>element</span>'s <span title=child>children</span>.

</section>

<section>
<h1>The <dfn><code>sw-macron</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-macron</code> <span>element</span> <span>represents</span>
a content with a dot above it.  This is used in mathematical
expressions, such as sample mean variables.

<p>It is <span>expected</span> that an overline is rendered above
the <span>element</span>'s <span title=child>children</span>.

</section>

<section>
<h1>The <dfn><code>vector</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>vector</code> <span>element</span> <span>represents</span>
a content with a right-pointing arrow above it.  This is used in
mathematical expressions to denote a vector.

<p>It is <span>expected</span> that a right-pointing arrow is rendered
above the <span>element</span>'s <span title=child>children</span>.

<p>This <span>element</span> <em class=rfc2119>SHOULD NOT</em> be used
for other possible presentations of vectors, such as bold face without
arrow.

</section>

<section>
<h1>The <dfn><code>subsup</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd>A <code>subscript</code> <span>element</span>, followed by a
<code>superscript</code> <span>element</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>subsup</code> <span>element</span> <span>represents</span>
a pair of subscript and superscript chunks of contents.

<p>The <dfn>subscript content</dfn> of
a <code>subsup</code> <span>element</span> is the
first <code>subscript</code> <span>element</span> <span>child</span>,
if any.

<p>The <dfn>superscript content</dfn> of
a <code>subsup</code> <span>element</span> is the
first <span>child</span> <code>superscript</code> <span>element</span>,
if any, after the <span>subscript content</span> if there is.

<p>Any other <span>child</span> <span>represents</span> nothing.

<p>It is <span>expected</span> that the <span>subscript content</span>
is rendered as subscript and the <span>superscript content</span> is
rendered as superscript sharing the same horizontal spaces.

</section>

<section>
<h1>The <dfn><code>subscript</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>subscript</code> <span>element</span>
is <span title=represents>semantically</span> equivalent to
the <code>sub</code> <span>element</span>.

</section>

<section>
<h1>The <dfn><code>superscript</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>superscript</code> <span>element</span>
is <span title=represents>semantically</span> equivalent to
the <code>sup</code> <span>element</span>.

</section>


</section>

<section>
<h1>Values</h1>

<p>Some elements are defined as <dfn>elements with value</dfn>.  For
an <span title="elements with value">element <var>element</var> with
value</span>, the <dfn>element value</dfn> is the value returned by
the following steps:

  <ol class=steps>

  <li>If <var>element</var> has
  a <span>child</span> <code>attrvalue</code> <span>element</span>:

    <ol>

    <li>Let <var>value element</var> be the
    first <code>attrvalue</code> <span>element</span> <span>child</span>
    of <var>element</var>.

    <li>Return the <span title=concept-element-text-content>text
    content</span> of <var>element</var>.

    </ol>

  <li>Otherwise, return
  the <span title=concept-element-text-content>text content</span>
  of <var>element</var>.

  </ol>

<section>

<h1>The <dfn><code>f</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>f</code> <span>element</span> <span>represents</span> a
field name or key of some structure, such as a field name of a C data
structure, a key of a Perl hash, or a property name of an XML
information item.

</section>

<section>

<h1>The <dfn><code>key</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p class=XXX>...

</section>

<section>

<h1>The <dfn><code>n</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.
<dd><span>Elements with value</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by
an <code>attrvalue</code> <span>element</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>n</code> <span>element</span> <span>represents</span> the
number given as the <span>element value</span>.

</section>

<section>
<h1>The <dfn><code>lat</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.
<dd><span>Elements with value</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by
an <code>attrvalue</code> element, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>lat</code> <span>element</span> <span>represents</span> a
latitude given as the <span>element value</span>.

</section>

<section>
<h1>The <dfn><code>lon</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.
<dd><span>Elements with value</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by
an <code>attrvalue</code> element, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>lon</code> element <span>represents</span> a longitude
given as the <span>element value</span>.

</section>

<section>
<h1>The <dfn><code>tz</code></dfn> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.
<dd><span>Elements with value</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by
an <code>attrvalue</code> element, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>A <code>tz</code> element <span>represents</span> a time-zone
offset given as the <span>element value</span>.

</section>

<section>
<h1>The <dfn><code>sw-value</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>The <code>sw-value</code> <span>element</span> <span>represents</span>
a <span>string</span> that would be specified to
the <code title=attr-html-data-value>value</code> <span>attribute</span>
of the <span>parent</span> <code>data</code> <span>element</span>, if
applicable.  Otherwise, it <span>represents</span> nothing.

<p>A <code>sw-value</code> <span>element</span> <em class=rfc2119>MAY</em>
be the last
non-<span title="script-supporting elements">script-supporting</span>
<span>child</span> <span>element</span> of an
HTML <code>data</code> <span>element</span> <var>parent</var> when
there is
no <code title=attr-html-data-value>value</code> <span>attribute</span>
in <var>parent</var>.

<p>The <code>sw-value</code> <span>element</span> <em class=rfc2119>MUST
NOT</em> be used when it <span>represents</span> nothing.

</section>

<section>

<h1>The <dfn><code>attrvalue</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>attrvalue</code> <span>element</span> <span>represents</span>
the <span>element value</span> of
the <span>parent</span> <span>element</span>, if applicable, or the
text that would be set to the <code>datetime</code>
<span>attribute</span> of
the <span>parent</span> <span>element</span>, if it is
a <code>time</code> <span>element</span> without
a <code>datetime</code> <span>attribute</span>.  Otherwise,
it <span>represents</span> nothing.

<p>An <code>attrvalue</code> <em class=rfc2119>MAY</em> be the last
non-<span title="script-supporting elements">script-supporting</span>
<span>child</span> <span>element</span> of
a <code>time</code> <span>element</span>.

<p>An <code>attrvalue</code> <em class=rfc2119>MUST NOT</em> be used
when it <span>represents</span> nothing.

</section>

</section>

<section>
<h1>Conformance keywords</h1>

<span title=element>Elements</span> in this section <span>represents</span> 
<dfn title="RFC 2119 keyword">keywords</dfn> defined in
<a href=https://tools.ietf.org/html/rfc2119>RFC 2119</a>.

<section>

<h1>The <dfn><code>MUST</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>MUST</code> <span>element</span> <span>represents</span>
an <span>RFC 2119 keyword</span>
<a href=https://tools.ietf.org/html/rfc2119#section-1>"<em class=rfc2119>MUST</em>"</a>.
It can also be used for <span title="RFC 2119 keyword">keywords</span>
<a href=https://tools.ietf.org/html/rfc2119#section-1>"<em class=rfc2119>REQUIRED</em>"</a>,
<a href=https://tools.ietf.org/html/rfc2119#section-1>"<em class=rfc2119>SHALL</em>"</a>,
<a href=https://tools.ietf.org/html/rfc2119#section-2>"<em class=rfc2119>MUST
NOT</em>"</a>, and
<a href=https://tools.ietf.org/html/rfc2119#section-2>"<em class=rfc2119>SHALL
NOT</em>"</a>.

</section>

<section>

<h1>The <dfn><code>SHOULD</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>SHOULD</code> <span>element</span> <span>represents</span>
an <span>RFC 2119 keyword</span>
<a href=https://tools.ietf.org/html/rfc2119#section-3>"<em class=rfc2119>SHOULD</em>"</a>.
It can also be used for <span title="RFC 2119 keyword">keywords</span>
<a href=https://tools.ietf.org/html/rfc2119#section-3>"<em class=rfc2119>RECOMMENDED</em>"</a>,
<a href=https://tools.ietf.org/html/rfc2119#section-4>"<em class=rfc2119>SHOULD
NOT</em>"</a>, and
<a href=https://tools.ietf.org/html/rfc2119#section-4>"<em class=rfc2119>NOT
RECOMMENDED</em>"</a>.

</section>

<section>

<h1>The <dfn><code>MAY</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.
<dd><span>Implicit link elements</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>MAY</code> <span>element</span> <span>represents</span>
an <span>RFC 2119 keyword</span>
<a href=https://tools.ietf.org/html/rfc2119#section-5>"<em class=rfc2119>MAY</em>"</a>.
It can also be used for <span title="RFC 2119 keyword">keyword</span>
<a href=https://tools.ietf.org/html/rfc2119#section-3>"<em class=rfc2119>OPTIONAL</em>"</a>.

</section>

</section>

<section>
<h1>Physical representations</h1>

<section>
<h1>The <dfn><code>sw-cursive</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-cursive</code> <span>element</span> <span>represents</span>
a text in a cursive font.

</section>

<section>
<h1>The <dfn><code>smallcaps</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>smallcaps</code> <span>element</span> <span>represents</span>
a text in small-capitals.

<p>The <span title=character>characters</span> in
the <code>smallcaps</code> <span>element</span>, including but not
limited to uppercase and lowercase latin letters,
are <span>expected</span> to be rendered using small-capital glyphs,
whenever possible.

</section>

<section>
<h1>The <dfn><code>sw-br</code></dfn> <span>element</span> in the
<span>SuikaWiki/0.9 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Nothing</span>.
<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p>The <code>sw-br</code> <span>element</span> <span>represents</span>
an explicit line break.

<p>The <span>element</span>'s <span title=child>children</span>, if
not <span title="is empty">empty</span>, <span>represents</span> the
hyphenation or other symbols indicating the end of the line, placed
just before the line break.

<p>The <code>sw-br</code> <span>element</span>
is <span>expected</span> to be rendered as if there were
a <code>U+000A</code> <code class=charname>LINE
FEED</code> <span>character</span> at the end of
the <span>element</span>.

<p><span title="document white space">White space characters</span> in
the <code>sw-br</code> <span>element</span> and
the <code>U+000A</code> <span>character</span> at the end of
the <span>element</span> are <span>expected</span> to be processed
as <span title="preserved white space">preserved white spaces</span>.

</section>


</section>

<section>
<h1>Qualified names</h1>

<section>

<h1>The <dfn><code>qn</code></dfn> element in the <span>SuikaWiki/0.10
namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.
<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by a
<code>nsuri</code> <span>element</span>, optionally intermixed
with <span>script-supporting elements</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p class=XXX>...

</section>

<section>

<h1>The <dfn><code>qname</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p>This element <em class=rfc2119>MUST NOT</em> be used.

<p class=XXX>...

</section>

<section>

<h1>The <dfn><code>nsuri</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=XXX>...

</section>

</section>

<section>
<h1>Fallback elements</h1>

<section>

<h1><span>Uppercase elements</span> in the <span>SuikaWiki/0.10
namespace</span></h1>

<dl class=element>

<dt><span>Category</span>

<dd>None. <!-- Phrasing content -->

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code>class</code>

</dl>

<p><dfn>Uppercase elements</dfn> are elements in the
<span>SuikaWiki/0.10 namespace</span> whose local name consists of one
or more <span>uppercase letters</span>.

<p>These elements <em class=rfc2119>MUST NOT</em> be used.

<div class="note memo">

<p>These elements might be inserted into a <span>node tree</span> by
a <span title="SWML text serialization parser">parser</span> when an
<span>inline start tag</span> with unknown <span>tag name</span> is
found.

</div>

</section>

</section>

</section>

<section>
<h1>Security</h1>

<p>The <span>node tree</span> returned by the <span title="parsing an
SWML text serialization">parsing algorithm</span> does not contain
any <code>script</code> <span>element</span><!-- in HTML/SVG namespace
-->.  The following <span title=node>nodes</span> might
contain <span title=URL>URLs</span>, which might be potentially
dangerous (e.g. <code>javascript:</code> URL):

  <ul>

  <li>The <code title=attr-sw-res-parameter>resParameter</code>
  <span>attribute</span> in the <span>SuikaWiki/0.9 namespace</span>

  <li>The <code>nsuri</code> <span>element</span> in
  the <span>SuikaWiki/0.10 namespace</span>

  </ul>

<p>The <code>image</code> <span>element</span> in
the <span>SuikaWiki/0.9 namespace</span> might contain
a <span title="forgiving-base64 encode">Base64-encoded</span> binary
data that is not in fact an image (e.g an executable binary).

</section>

<section class="reference">
<h1 class=no-num>References</h1>

<section class="reference normative">
<h1 class=no-num>Normative references</h1>

<dl>

<dt id=ref-MANAKAI>MANAKAI

<dd class=XXX>manakai's DOM extensions.

<dt id=ref-XHTML2>XHTML2

<dd class=XXX>...

</dl>

</section>

</section>

<section>
<h1 class=no-num>Tests and implementation</h1>

<p>There
are <a href="https://github.com/wakaba/tests-web/tree/master/swml">test
data</a>.

<p>There is
a <a href="https://github.com/suikawiki/perl-swml-parser">Perl
implementation</a>.

</section>

<section>
<h1 class=no-num>Author</h1>

<p>This document is written
by <a href="https://suika.suikawiki.org/~wakaba/who?">Wakaba</a>
&lt;wakaba@suikawiki.org>.

<p>This document is developed as part of
the <a href="https://suikawiki.org/">SuikaWiki project</a>.

<p>Per <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>,
to the extent possible under law, the author has waived all copyright
and related or neighboring rights to this work.

</section>

<sw-ads normal></sw-ads>
<script src="https://manakai.github.io/js/global.js" async></script>
