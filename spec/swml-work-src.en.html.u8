<!DOCTYPE HTML>
<html class="formal-specification status-work-in-progress" lang=en>
<title>SuikaWiki Markup Language</title>
<link rel=stylesheet href="/www/style/html/spec">

<p class=ed>...

<dfn>content attribute</dfn>, <dfn>DOM attribute</dfn>

<div class=section>
<h2>Parsing SWML Text Format Document</h2>

<p>This section specifies how to convert a string of characters into a
DOM tree, assuming the string is written in the <span>SWML text
format</span>.  This process is referred to as <dfn title="parsing an
SWML text format document">parsing</dfn> and an implementation that
performes this process is referred to as <dfn title="SWML text format
parser">parser</dfn>.

<div class="note memo">

<p>How to convert a string of bytes into a string of characters is
outside of the scope of this specification.

</div>

<p>The <span title="parsing an SWML text format document">parsing
process</span> is divided into two stages: <span>tokenization</span>
and <span>tree construction</span>.  The <span>tokenization</span>
stage emits a sequence of <span title=token>tokens</span>, which are
used as inputs for the <span>tree construction</span> stage.  The
<span>tree construction</span> stage constructs a DOM tree.  Some
steps invoked in the <span>tokenization</span> stage might also
construct a part of the DOM tree.  During the <span title="parsing an
SWML text format document">parsing</span>, mutation events <em
class=rfc2119>MUST NOT</em> be invoked.

<p>Before the actual <span title="parsing an SWML text format
document">parsing</span> starts, a new <code>Document</code> object
<em class=rfc2119>MUST</em> be created.  It represents the DOM tree
constructed as a result of the <span title="parsing an SWML text
format document">parsing</span>.  The <code>innerHTML</code> <span>DOM
attribute</span> of the <code>Document</code> <em
class=rfc2119>MUST</em> be initially set to
<code>&lt;html&#x20;xmlns="http://www.w3.org/2002/06/xhtml2/">&lt;head>&lt;/head>&lt;body>&lt/body>&lt;/html></code>.
The <dfn>document element</dfn> is what the
<code>documentElement</code> <span>DOM attribute</span> of the
<code>Document</code> returns.  The <dfn>head element</dfn> is what
the <code>firstChild</code> <span>DOM attribute</span> of the
<span>document element</span> returns at the time immediately after
the <code>innerHTML</code> is set.  The <dfn>body element</dfn> is
what the <code>lastChild</code> <span>DOM attribute</span> of the
<span>document element</span> returns at the time immediately after
the <code>innerHTML</code> is set.  The <dfn>image element</dfn> is
initially null.

<div class=section>
<h3>Definitions</h3>

<p><dfn>White space characters</dfn> are U+0009 <span
class=charname>CHARACTER TABULATION</span> and U+0020 <span
class=charname>SPACE</span>.

<p><dfn>Digits</dfn> are characters in the range U+0030 <code
class=charname>DIGIT ZERO</code> .. U+0039 <code class=charname>DIGIT
NINE</code>.

<p><dfn>Uppercase letters</dfn> are characters in the range U+0041
<code class=charname>LATIN CAPITAL LETTER A</code> .. U+005A <code
class=charname>LATIN CAPITAL LETTER Z</code>.

<p><dfn>Lowercase letters</dfn> are characters in the range U+0061
<code class=charname>LATIN SMALL LETTER A</code> .. U+007A <code
class=charname>LATIN SMALL LETTER Z</code>.

<p><dfn>Language tag characters</dfn> are <span>digits</span>,
<span>uppercase letters</span>, <span>lowercase letters</span>, and
U+002D <code class=charname>HYPHEN-MINUS</code>.

<p><dfn>Scheme characters</dfn> are <span>digits</span>,
<span>uppercase letters</span>, <span>lowercase letters</span>, U+0025
<code class=charname>PERCENT SIGN</code>, U+002A <code
class=charname>PLUS SIGN</code>, U+002D <code
class=charname>HYPHEN-MINUS</code>, U+002E <code class=charname>FULL
STOP</code> and U+005F <code class=charname>LOW LINE</code>.

<p>A <dfn>class specification</dfn> is a string consist of a
<code>(</code> character, followed by zero or more character that is
<em>not</em> one of <code>)</code>, <code>)</code>, or <span>white
space characters</span>, and finally followed by a <code>)</code>
character.  <!-- Though the SuikaWiki3 implementation of the parser
support quoted-pair in class specification in [PRE[ block start tag
and inline start tags, it is not allowed in [INS[ and [DEL[, and is
not part of SuikaWiki/0.9 specification, and it should not appear in
any existing SuikaWiki article afaict, this version of the SWML
specification does not support such escaping syntax. --> The <dfn>body
of a class specification</dfn> is the substring of the <span>class
specification</span> between parentheses (exclusive).  It might be the
empty string.

<p>A <dfn>language specification</dfn> is a string consist of a
<code>@</code> character followed by zero or more <!-- one or more in
SuikaWiki3 implementation --> <span>language tag characters</span>.
<!-- SuikaWiki/0.10 addition --> The <dfn>body of a language
specification</dfn> is the substring in the <span>language
specification</span> except for the first <code>@</code> character.
It might be the empty string.

<p>When the <span title="SWML text format parser">parser</span> <dfn
title="append a character">appends a character</dfn> <var>char</var>
to node <var>node</var>, the <code>manakai_append_text</code> method
<cite class=ed>...</cite> <em class=rfc2119>MUST</em> be invoked on
<var>node</var> with the argument <var>char</var>.

<p>The <dfn>AA namespace</dfn> is
<code>http://pc5.2ch.net/test/read.cgi/hp/1096723178/aavocab#</code>.

<p>The <dfn>HTML namespace</dfn> is
<code>http://www.w3.org/1999/xhtml</code>.

<p>The <dfn>HTML3 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:ietf:html:3:draft:00:</code>.

<p>The <dfn>SuikaWiki/0.9 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:suikawiki:0:9:</code>.

<p>The <dfn>SuikaWiki/0.10 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:suikawiki:0:10:</code>.

<p>The <dfn>XHTML2 namespace</dfn> is
<code>http://www.w3.org/2002/06/xhtml2/</code>.

<p>The <dfn>XML namespace</dfn> is
<code>http://www.w3.org/XML/1998/namespace </code>.

<p>The <dfn>XMLNS namespace</dfn> is
<code>http://www.w3.org/2000/xmlns/</code>.

</div>

<div class=section>
<h3>Tokenization of lines</h3>

<p>When a string of characters is <dfn
title=tokenization>tokenized</dfn>, the string <var>s</var> <em
class=rfc2119>MUST</em> be processed as follows:

<ol>

<li>Let <var>pos</var> be zero (0).  It represents the index in
<var>s</var>.  The index of the first character in <var>data</var> is
zero (0).

<li>If <var>pos</var> is greater than or equal to the length of
<var>s</var>, then emit an <span>end-of-file token</span> and abort
these steps.

<li>Let <var>line</var> be the empty string.

<li>If the <var>pos</var>th character of <var>s</var> is U+000D <code
class=charname>CARRIAGE RETURN</code>, <span
title=process-line>process</span> <var>line</var>.  Set
<var>line</var> to the empty string.  If the (<var>pos</var> + 1)th
character of <var>s</var> is U+000A <code>LINE FEED</code>, increment
<var>pos</var> by one (1).

<li>Otherwise, if the <var>pos</var>th character of <var>s</var> is
U+000A <code>LINE FEED</code>, <span
title=process-line</span>process</span> <var>line</var>.  Set
<var>line</var> to the empty string.

<li>Otherwise, append the <var>pos</var>th character of <var>s</var>
to <var>line</var>.

<li>Increase <var>pos</var> by one (1).

<li>Go back to the fourth step of these steps.

</ol>

<p>The steps above <dfn>emit</dfn> one or more sequence of <dfn
title=token>tokens</dfn>, which are inputs to the <span>tree
construction</span> stage.  A <span>token</span> can have zero or more
properties, depending on the kind of the <span>token</span>.  There
are several kinds of <span title=token>tokens</span> and properties as
follows:

<dl>

<dt><dfn>Block start tag token</dfn>

<dd><dfn>Tag name</dfn> property.

<dt><dfn>Block end tag token</dfn>

<dd>No property.

<dt><dfn>Character token</dfn>

<dd><dfn title=character-data>Data</dfn> property.

<dt><dfn>Comment paragraph start token</dfn>

<dd>No property.

<dt><dfn>Editorial note start token</dfn>

<dd>No property.

<dt><dfn>Element token</dfn>

<dd><dfn title=element-local-name>Local name</dfn>, <dfn
title=element-namespace>namespace</dfn>, <dfn
title=element-anchor-attribute>anchor attribute</dfn>, <dfn
title=element-by-attribute>by attribute</dfn>, <dfn
title=element-res-scheme-attribute>resScheme attribute</dfn>, <dfn
title=element-res-parameter-attribute>resParameter attribute</dfn>,
and <dfn title=element-content>content</dfn> attribute.  Default for
these properties are null.

<dt><dfn>Empty line token</dfn>

<dd>No property.

<dt><dfn>End-of-file token</dfn>

<dd>No property.

<dt><dfn>Form token</dfn>

<dd><dfn title=form-name>Name</dfn>, <dfn title=form-id>id</dfn>, and
<dfn title=form-parameters>parameters</dfn> properties.

<dt><dfn>Heading start token</dfn>

<dd><dfn title=heading-start-level>Level</dfn> property.

<dt><dfn>Heading end token</dfn>

<dd>No property.

<dt><dfn>Inline start tag token</dfn>

<dd><dfn title=inline-start-tag-tag-name>Tag name</dfn>,
title=inline-start-tag-classes>classes</dfn>, and <dfn
title=inline-start-tag-language>language</dfn> properties.  Default
for these properties is null.

<dt><dfn>Inline middle tag token</dfn>

<dd><dfn title=inline-middle-tag-language</dfn> property, whose
default is null.

<dt><dfn>Inline end tag token</dfn>

<dd><dfn title=inline-end-tag-anchor>Anchor</dfn>, <dfn
title=inline-end-tag-res-scheme-attribute>resScheme attribute</dfn>,
and <dfn title=inline-end-tag-res-parameter-attribute>resParameter
attribute</dfn> properties.  Default for these properties is null.

<dt><dfn>Labeled list start token</dfn>

<dd>No property.

<dt><dfn>Labeled list middle token</dfn>

<dd>No property.

<dt><dfn>List start token</dfn>

<dd><dfn title=list-start-depth>Depth</dfn> property.

<dt><dfn>Preformatted start token</dfn>

<dd>No property.

<dt><dfn>Preformatted end token</dfn>

<dd>No property.

<dt><dfn>Quotation start token</dfn>

<dd><dfn title=quotation-start-depth>Depth</dfn> property.

<dt><dfn>Table row start token</dfn>

<dd>No property.

<dt><dfn>Table row end token</dfn>

<dd>No property.

<dt><dfn>Table cell start token</dfn>

<dd>No property.

<dt><dfn>Table cell end token</dfn>

<dd>No property.

<dt><dfn>Table colspan cell token</dfn>

<dd>No property.

</dl>

<p><dfn>Mode</dfn> is a state of the <span
title=tokenization>tokenizer</span> and is one of
"<span>initial</span>" (the initial value used when the
<span>tokenization</span> starts), "<span>body</span>",
"<span>preformatted</span>", "<span>preformatted block</span>", and
"<span>image</span>".

<p><dfn>Continuous line flag</dfn> is another flag of the <span
title=tokenization>tokenizer</span>, representing whether a new line
character should be appended to the data, and takes either true or
false.  This flag is mainly used in the "<span>body</span>"
<span>mode</span>.

<p>When a <dfn title=process-line><var>line</var> is processed</dfn>,
rules specified in the following subsections is used according to the
appropriate <span>mode</span>.  Rules below sometimes require the <dfn
title=reprocess-line><var>line</var> be reprocessed</dfn>.  In such a
case, rules for the appropriate <span>mode</span> <em
class=rfc2119>MUST</em> be followed with the same <var>line</var>.

<div class=section>
<h4>The "<span>initial</span>" mode</h4>

<p>In the "<dfn>initial</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> starts with <code>#?</code>

<dd><span>Parse a magic line</span> <var>line</var>.

<dt>Otherwise

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Switch to the "<span>body</span>" <span>mode</span> and <span
title=reprocess-line>reprocess</span> <var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h4>The "<span>body</span>" mode</h4>

<p>In the "<dfn>body</body>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is empty

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit an <span>empty line token</span>.

</ol>

<dt>If <var>line</var> starts with a <span title="white space
characters">white space character</span>

<dd>

<ol>

<li>Emit a <span>preformatted start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

<li>Switch to the "<span>preformatted</span>" mode.

</ol>

<dt>If <var>line</var> starts with <code>*</code>

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>level</var> be zero (0).

<li>While the first character of <var>data</var>, if any, is
<code>*</code>, run the following substeps:

<ol>

<li>Increase <var>level</var> by one (1).

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>*</code>.)

</ol>

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>heading start token</span> whose <span
title=heading-start-level>level</span> set to <var>level</var>.

<li>Run the <span>algorithm to tokenize a text</span> with <var>data</var>.

<li>Emit a <span>heading end token</span>.

<li>Finally, set the <span>continuous line flag</span> to false.

</ol>

<dt>If <var>line</var> starts with <code>-</code> or <code>=</code>

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be the empty string.

<li>While the first character of <var>data</var>, if any, is
<code>-</code> or <code>=</code>, run the following substeps:

<ol>

<li>Append the first character of <var>data</var> to <var>depth</var>.

<li>Remove the first character of <var>data</var>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>list start token</span> whose <span
title=list-start-token-depth>depth</span> set to <var>depth</var>.

<li>Run the <span>algorithm to tokenize a text</span> with <var>data</var>.

</ol>

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> starts with <code>:</code>

<dd>

<ol>

<li>Let <var>name</var> be the empty string.

<li>Let <var>data</var> be <var>line</var>.

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>:</code>.)

<li>While <var>data</var> is not empty and the first character of
<var>data</var> is <em>not</em> <code>:</code>, run the following
substeps:

<ol>

<li>Append the first character of <var>data</var> to <var>name</var>.

<li>Remove the first character of <var>data</var>.

</ol>

<li>If <var>name</var> is the empty string, run the following
substeps:

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> is a <code>:</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with <var>name</var>.

</ol>

<div class="note memo">

<p>In this case, <var>line</var> does not represent a description
list.  <!-- For compatibility with previous implementations. -->

</div>

<li>Otherwise, run the following substeps:

<ol>

<li>Remove <span>white space characters</span> at the beginning of
<var>name</var>, if any.

<li>Remove <span>white space characters</span> at the end of
<var>name</var>, if any.

<li>Emit a <span>labeled list start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>name</var>.

<li>Remove <span>white space characters</span> at the end of
<var>data</var>, if any.

<li>Emit a <span>labeled list middle token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> starts with <code>></code>

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be zero (0).

<li>While the first character of <var>data</var>, if any, is
<code>></code>, run the following substeps:

<ol>

<li>Increase <var>depth</var> by one (1).

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>></code>.

</ol>

<li>If <var>depth</var> is two (2), <var>data</var> is not empty, and
the first character of <var>data</var> is in the range U+0030 <span
class=charname>DIGIT ZERO</span> .. U+0039 <span class=charname>DIGIT
NINE</span>, run the following substeps:

<ol>

<li>Prepend two <code>></code> characters to <var>data</var>.

<li>If the <span>continuous line flag</span> is true, preprend a
U+000A <code class=charname>LINE FEED</code> character to
<var>data</var>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<li>Otherwise, run the following substeps:

<ol>

<li>Emit a <span>quotation start token</span> whose <span
title=quotation-start-depth>depth</span> set to <var>depth</var>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>@@</code>, run the
following substeps: <!-- SuikaWiki/0.10 addition -->

<ol>

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>@@</code>).

<li>Emit a <span>editorial note start token</span>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

</ol>

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>;;</code>, run the
following substeps: <!-- SuikaWiki/0.10 addition -->

<ol>

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>;;</code>).

<li>Emit a <span>comment paragraph start token</span>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

</ol>

<li>In any case, run the <span>algorithm to tokenize a text</span>
with <var>data</var>.

</ol>

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> is a string consist of a <code>[</code>
character, followed by one of <code>INS</code>, <code>DEL</code>, or
<code>PRE</code>, optionally followed by <span>class
specification</span>, followed by a <code>[</code> character, followed
by zero or more <span>white space characters</span>

<!-- No more block start tag with this syntax should be added in
future revisions. -->

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is one of
<code>INS</code>, <code>DEL</code>, or <code>PRE</code>, that appears
in <code>line</code>.

<li>If the <span title=block-start-tag-tag-name>tag name</span> is
<code>PRE</code>, switch to the "<span>preformatted block</span>"
<span>mode</span>.

</ol>

<dt>If <var>line</var> starts with <code>@@</code>
<!-- SuikaWiki/0.10 addition -->

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>@@</code>.)

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Set the <span>continuous line flag</span> to true.

<li>Emit a <span>editorial note start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<dt>If <var>line</var> starts with <code>;;</code>
<!-- SuikaWiki/0.10 addition -->

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>;;</code>.)

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Set the <span>continuous line flag</span> to true.

<li>Emit a <span>comment paragraph start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<!--

Though the SuikaWiki3's parser recognizes "[[# ...]] @@" or "[[#
... ]] ;;" as comment paragraph or editorial note preceded by a form
block, it considered as a bug and this specification treates these
characters as character data.

-->

<dt>If <var>line</var> is a string consist of a <code>]</code>
character, followed by one of <code>INS</code> or <code>DEL</code>,
followed by a <code>]</code> character, followed by zero or more
<span>white space characters</span>

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>block end tag token</span> whoes <span
title=block-end-tag-tag-name>tag name</span> is one of
<code>INS</code>, <code>DEL</code>, or <code>PRE</code>, that appears
in <code>line</code>.

</ol>

<dt>If <var>line</var> starts with <code>,</code>

<dd>

<ol>

<li>Run the <span>algorithm to tokenize a table row</span> with
<var>line</var>.

<li>Set the <span>continuous line flag</span> to false.

</ol>

<dt>If <var>line</var> is <code>__IMAGE__</code>

<dd>Switch to the "<span>image</code>" <span>mode</span>.
<!-- SuikaWikiImage/0.9 addition -->

<dt>Otherwise

<dd>

<ol>

<li>If the <span>continuous line flag</span> is true, emit a
<span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Set the <span>continuous line flag</span> to true.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h4>The "<span>preformatted</span>" mode</h4>

<p>In the "<dfn>preformatted</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is the empty string

<dd>

<ol>

<li>Emit a <span>preformatted end token</span>.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>If <var>line</var> is a string consist of a <code>]</code>
character, followed by one of <code>INS</code> or <code>DEL</code>,
followed by a <code>]</code> character, followed by zero or more
<span>white space characters</span>

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>preformatted end token</span>.

<li>Emit a <span>block end tag token</span> whoes <span
title=block-end-tag-tag-name>tag name</span> is one of
<code>INS</code> or <code>DEL</code>, that appears in
<code>line</code>.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>Otherwise

<dd>

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h4>The "<span>preformatted block</span>" mode</h4>

<p>In the "<dfn>preformatted block</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is a string consist of <code>]PRE]</code>
followed by zero or more <span>white space characters</span>

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>block end tag token</span> whoes <span
title=block-end-tag-tag-name>tag name</span> is <code>PRE</code>.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>Otherwise

<dd>

<ol>

<li>If the <span>continuous line flag</span> is true, emit a
<span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Set <span>continuous line flag</span> to true.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h4>The "<span>image</span>" mode</h4>

<p>In the "<dfn>image</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<ol>

<li>If the <span>image element</span> is null, then create an
<code>image</code> element in the <span>SuikaWiki/0.9 namespace</span>
and set the <span>image element</span> to that element.  Append the
<span>image element</span> to the <span>document element</span>.

<li>Otherwise, <span>append a character</span> U+000A <code
class=charname>LINE FEED</code> to the <span>image element</span>.

<li>Then, <span title="append a character">append each
character</span> in <var>line</var> in the same order to the
<span>image element</span>.

</ol>

</div>

</div>

<div class=section>
<h3>Tokenization of a table row</h3>

<p>The <dfn>algorithm to tokenize a table row</span> <var>data</var>
is as follows:

<ol>

<li>Let <var>pos</var> be zero (0).  It represents the index in
<var>data</var>.  The index of the first character in <var>data</var>
is zero (0).

<li>Emit a <span>table row start token</span>.

<li><dfn title=tokenize-table-row-loop><i>LOOP</i></dfn>: If
<var>pos</var> is greater than or equal to the length of
<var>data</var>, emit a <span>table row end token</span> and abort
this algorithm.

<li>Increase <var>pos</var> by one (1). <!-- Skip "," -->

<li>Let <var>cell</var> be the empty string.

<li>Let <var>cell quoted</var> be the empty string.

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, emit a <span>table row end token</span> and abort
this algorithm.

<li>If the <var>pos</var>th character in <var>data</var> is a <span
title="white space characters">white space character</span>, increase
<var>pos</var> by one (1) and go back to the previous step.

<li>If the <var>pos</var>th character in <var>data</var> is
<code>"</code>, follow the substeps below:

<ol>

<li>Increase <var>pos</var> by one (1).

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, abort these substeps.

<li>Otherwise, if the <var>pos</var>th character in <var>data</var> is
<code>"</code>, abort these substeps.

<li>Otherwise, if the <var>pos</var>th character in <var>data</var> is
<code>\</code>, follow the substeps below:

<ol>

<li>Increase <var>pos</var> by one (1).

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, abort these substeps.

<li>Otherwise, append the <var>pos</var>th character in
<var>data</var> to <var>cell quoted</var>.

</ol>

<li>Otherwise, append the <var>pos</var>th character in
<var>data</var> to <var>cell quoted</var>.

<li>Go back to the first substep in these substeps.

</ol>

<li>While <var>pos</var> is less than the length of <var>data</var>, run
the following substeps:

<ol>

<li>If the <var>pos</var>th character in <code>data</code> is
<code>,</code>, abort these substeps. <!-- without increasing
<var>pos</var> -->

<li>Append the <var>pos</var>th character in <code>data</code> to
<var>cell</var>.

<li>Increase <var>pos</var> by one (1).

</ol>

<li>Remove <span>white space characters</span> at the end of
<var>data</var>, if any.

<li>If <var>cell</var> is equal to <code>==</code>, emit a <span>table
colspan cell token</span> and go back to the step labeled <span
title=tokenize-table-row-loop><i>LOOP</i></span>.

<li>Prepend <var>cell quoted</var> to <var>cell</var>.

<li>Emit a <span>table cell start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>cell</var>.

<li>Emit a <span>table cell end token</span>.

<li>Go back to the step labeled <span
title=tokenize-table-row-loop><i>LOOP</i></span>.

</ol>

</div>

<div class=section>
<h3>Tokenization of a text</h3>

<p>The <dfn>algorithm to tokenize a text</dfn> <var>data</var> is as
follows:

<ol>

<li>If <var>data</var> begins with <code>[</code> followed by one or
more <span>digits</span> followed by <span>]</span>, run the following
steps:

<ol>

<li>Let <var>number</var> be the <span>digits</span> in the matched
substring.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>anchor-end</code>,
<span title=element-namespace>namespace</span> is the
<span>SuikaWiki/0.9 namespace</span>, <span
title=element-anchor-attribute>anchor attribute</span> is
<var>number</var>, and <span title=element-content>content</span> is
<code>[</code> followed by <var>number</var> followed by
<code>]</code>.

</ol>

<li>While the length of <var>data</var> is not zero (0), run the
appropriate steps:

<dl class=switch>

<dt>If <var>data</var> begins with <code>[[#</code>, followed by one
or more <span>lowercase letters</span> or U+002D <code
class=charname>HYPHEN-MINUS</span>

<dd>

<ol>

<li>Let <var>name</var> be the <span>lowercase letter</span> and
U+002D <code class=charname>HYPHEN-MINUS</span> in the matched
substring.

<li>Remove the matched substring from <var>data</var>.

<li>Let <var>id</var> be null.

<li>Let <var>parameters</var> be an empty list.

<li>If <var>data</var> begins with a <span>class specification</span>,
run the following substeps:

<ol>

<li>Set the <var>id</var> to the <span title="body of a class
specification">body</span> of the <span>class specification</span>.

<li>Remove the class specification from <var>data</var>.

</ol>

<li>While the first character of <var>data</var> is <code>:</code>,
run the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>]]</code>, abort
these substeps.

<li>Let <var>parameter</var> be the empty string.

<li>If <var>data</var> is empty, append <var>parameter</var> to
<var>parameters</var> and abort these substeps.

<li>If the first character of <var>data</var> is <code>'</code>, run
the following steps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these substeps.

<li>If the first character of <var>data</var> is <code>'</code>, abort
these substeps.

<li>If the first character of <var>data</var> is <code>\</code>, run
the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these substeps.

<li>Append the first character of <var>data</var> to
<var>parameter</var>.

</ol>

<li>Otherwise, append the first character of <var>data</var> to
<var>parameter</var>.

<li>Go back to the first substep in these substeps.

</ol>

<li>Otherwise, run the following steps:

<ol>

<li>If <var>data</var> is empty, or if the first character of
<var>data</var> is <code>:</code>, abort these substeps.

<li>Append the first character of <var>data</var> to
<var>parameter</var>.

<li>Remove the first character of <var>data</var>.

<li>Go back to the first substep of these substeps.

</ol>

<li>Append <var>parameter</var> to <var>parameters</var>.

</ol>

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>]]</code>, remove
these characters from <var>data</var>.

<li>Emit a <span>form token</span> whose <span
title=form-name>name</span> is <var>name</var>, <span
title=form-id>id</span> is <var>id</var>, and <span
title=form-parameters>parameters</span> is <var>parameters</span>.

</ol>

<dt>Otherwise, if the <var>data</var> begins with <code>[[</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline start tag</span>.

</ol>

<dt>If <var>data</var> begins with <code>[</code>, followed by one or
more <span>uppercase letters</span>, optionally followed by a
<span>class specification</span>, optionally followed by a
<span>language specification</span>, followed by <code>[</code>

<dd>

<ol>

<li>Let <var>tag name</var> be the <span>uppercase letters</span> in
the matched substring of <var>data</var>.

<li>Let <var>classes</var> be the <span title="body of a class
specification">body</span> of the <span>class specification</span> in
the matched substring of <var>data</var>, if any, or null, otherwise.

<li>Let <var>language</var> be the <span title="body of a language
specification">body</span> of the <span>language specification</span>
in the matched substring of <var>data</var>, if any, or null,
otherwise.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline start tag token</span> whose <span
title=inline-start-tag-tag-name>tag name</span> is <var>tag
name</var>, <span title=inline-start-tag-classes>classes</span> is
<var>classes</var>, and <span
title=inline-start-tag-language>language</span> is
<var>language</var>.

</ol>

<dt>If <var>data</var> begins with <code>]]</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline end tag token</span>.

</ol>

<dt>If <var>data</var> begins with <code>]&lt;</code>, followed by one
or more <span>scheme characters</span>, followed by <code>:</code>

<dd>Remove the matched substring from <var>data</var> and then act as
if the first two character of the original <var>data</var> before the
removal were <code>&lt;</code> instead of <code>]&lt;</code>, except
that the emitted token is an <span>inline end tag token</span> instead
of an <span>element token</span>.  The <span
title=inline-end-tag-res-scheme-attribute>resScheme attribute</span>
of the token <em class=rfc2119>MUST</em> be the <span
title=element-res-scheme-attribute>resScheme attribute</span> of the
token that would be emitted if the first two character were
<code>&lt;</code>.  The <span
title=inline-end-tag-res-parameter-attribute>resParameter
attribute</span> of the token <em class=rfc2119>MUST</em> be the <span
title=element-res-parameter-attribute>resParameter attribute</span> of
the token that would be emitted if the first two character were
<code>&lt;</code>.

<dt>If <var>data</var> begins with <code>]>></code> followed by one or
more <span>digits</span>, followed by <code>]</code>

<dd>

<ol>

<li>Let <var>number</var> be the <span>digits</span> in the matched
substring.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline end tag token</span> whose <span
title=inline-end-tag-anchor>anchor</span> is <var>number</var>.

</ol>

<dt>If <var>data</var> begins with <code>]</code> followed by zero or
more <span>white space characters</span> followed by <code>[</code>

<dt>If <var>data</var> begins with <code>]</code> followed by zero or
more <span>white space characters</span> followed by a <span>language
specification</span> followed by <code>[</code>

<dd>

<ol>

<li>Let <var>lang</var> be the <span title="body of a language
specification">body</span> of the <span>language specification</span>
in the matched substring of <var>data</var>, if any, or null,
otherwise.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline middle tag token</code> whose <span
title=inline-middle-tag-language>language</span> is <var>lang</var>.

</ol>

<dt>If <var>data</var> begins with <code>&lt;</code>, followed by one
or more <span>scheme characters</span>, followed by <code>:</code>

<dd>

<ol>

<li>Let <var>scheme</var> be the <span>scheme characters</span> part
of the matched substring.

<li>Remove the matched substring from <var>data</var>.

<li>Let <var>value</var> be the empty string.

<li>Run the following steps:

<ol>

<li>If <var>data</var> is empty, abort these steps.

<li>If the first character of <var>data</var> is <code>></code>,
remove the first character of <var>data</var> and abort these steps.

<li>If the first character of <var>data</var> is <code>"</code>, run
the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these steps.

<li>If the first character of <var>data</var> is <code>"</code>,
remove the first character of <var>data</var> and abort these
substeps.

<li>If the first character of <var>data</var> is <code>\</code>, run
the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these steps.

<li>Append the first character of <var>data</var> to <var>value</var>.

</ol>

<li>Otherwise, append the first character of <var>data</var> to
<var>value</var>.

<li>Return back to the first substep of these substeps.

</ol>

<li>Otherwise, run the following substeps:

<ol>

<li>Append the first character of <var>data</var> to <var>value</var>.

<li>Remove the first character of <var>data</var>.

</ol>

<li>Go back to the first substeps in these substeps.

</ol>

<li>Let <var>content</var> be <var>scheme</var> followed by
<code>:</code> followed by <var>value</var>.

<li>If <var>scheme</var> does <em>not</em> contain one of
<span>uppercase letters</span>, set <var>value</var> to
<var>content</var> and set <var>scheme</var> to <code>URI</code>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is
<code>anchor-external</code>, <span
title=element-namespace>namespace</span> is the <span>SuikaWiki/0.9
namespace</span>, <span title=element-res-scheme>resScheme
attribute</span> is <var>scheme</var>, <span
title=element-res-parameter>resParameter attribute</span> is
<var>value</var>, and <span title=element-content>content</span> is
<var>content</var>.

</ol>

<dt>If <var>data</var> begins with <code>'''</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>strong</code> and
<span title=element-namespace>namespace</span> is the <span>XHTML2
namespace</span>.

</ol>

<dt>Otherwise, if <var>data</var> begins with <code>''</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>em</code> and
<span title=element-namespace>namespace</span> is the <span>XHTML2
namespace</span>.

</ol>

<dt>If <var>data</var> begins with <code>>></code> followed by one or
more <span>digits</span>

<dd>

<ol>

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is
<code>anchor-internal</code>, <span
title=element-namespace>namespace</span> is the <span>SuikaWiki/0.9
namespace</span>, <span title=element-anchor-attribute>anchor
attribute</span> is the <span>digits</span> part of the matched
substring, and <span title=element-content>content</span> is the
matched substring.

<li>Remove the matched substring from <var>data</var>.

</ol>

<dt>If <var>data</var> begins with <code>__&amp;&amp;</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>If <var>data</var> begins with <code>&amp;&amp;__</code>, or if
<var>data</var> does not contain <code>&amp;&amp;__</code> as a
substring, emit four <span title="character token">character
tokens</span> whose <span title=character-data>data</span> are
<code>_</code>, <code>_</code>, <code>&amp;</code>, and
<code>&amp;</code> respectively and remove the first four characters
of <var>data</var> and abort these steps.

<li>Let <var>name</var> be the substring of <var>data</var> between
the beginning of the string and the first occurence of
<code>&amp;&amp;__</code> (exclusive).

<li>Remove the first occurence of <code>&amp;&amp;__</code> and any
character before it from <var>data</var>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name</span> is <code>replace</code>, <span
title=element-namespace>namespace</span> is the <span>SuikaWiki/0.9
namespace</span>, <span title=element-by-attribute>by attribute</span>
is <var>name</var>.

</ol>

<dt>Otherwise

<dd>

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> set to the first character of
<var>data</var>.

<li>Remove the first character of <var>data</var>.

</ol>

</dl>

</ol>

</div>

<div class=section>
<h3>Parsing a magic line</h3>

<p>To <dfn>parse a magic line</dfn> <var>data</var>, the following
steps <em class=rfc2119>MUST</em> be used:

<ol>

<li>Remove the first two characters of <var>data</var>.  (It will be
<code>#?</code>.)

<li>If there are one or more characters that are not <span>white space
charactes</span>, run the following substeps:

<ol>

<li>Let <var>name</var> be those characters.

<li>Let <var>version</var> be null.

<li>Remove those characters from <var>data</var>.

<li>If <var>name</var> contains <code>/</code>, set the substring
after the first occurence of the character to <var>version</var>.
Note that <var>version</var> might become the empty string.  Remove
the <code>/</code> character and the substring after the character
from <var>name</var>.

<li>Set the <code>Name</code> <span>content attribute</span> of the
<span>document element</span> in the <span>SuikaWiki/0.9
namespace</span> to <var>name</var>.

<li>If <var>version</var> is <em>not</em> null, set the
<var>Version</var> <span>content attribute</span> of the
<span>document element</span> in the <span>SuikaWiki/0.9
namespace</span> to <var>version</var>.

</ol>

<li>Run the following substeps:

<ol>

<li>If <var>data</var> is empty, abort these substeps.

<li>If the first character of <var>data</var> is a <span title="white
space characters">white space character</span>, remove the character
from <var>data</var> and go back to the first substep of these
substeps.

<li>Let <var>name</var> be the empty string.

<li>If <var>data</var> begins with one or more characters that are not
<code>=</code>, set <var>name</var> to those characters and remove
those characters from <var>data</var>.

<li>Let <var>parameter</var> be a newly created <code>parameter</code>
element in the <span>SuikaWiki/0.9 namespace</span> and set the
<code>name</code> <span>content attribute</code> of
<var>parameter</var> to <var>name</var>.

<li>Remove the first character of <var>data</var>.  (It will be
<code>=</code>.)

<li>If the first character of <var>data</var>, if any, is
<code>"</code>, remove that character from <var>data</var>.

<li>Run the following substeps:

<ol>

<li>Let <var>value</var> be the empty string.

<li>If <var>data</var> is empty, or if the first character of
<var>data</var> is <code>"</code>, create a <code>value</code> element
in the <span>SuikaWiki/0.9 namespace</span>, set the
<code>textContent</code> <span>DOM attribute</span> of the node to
<var>value</var>, and append the node to <var>parameter</var>.

<li>If the first character of <var>data</var>, if any, is
<code>\</code>, run the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>Append the first character of <var>data</var>, if any, to
<var>value</var>.

</ol>

<li>Otherwise, append the first character of <var>data</var> to
<var>value</var>.

<li>Go back to the second substep of these substeps.

</ol>

<li>If the first character of <var>data</var>, if any, is
<code>"</code>, remove that character from <var>data</var>.

<li>Append <var>parameter</var> to the <span>head element</span>.

<li>Go back to the first substep of these substeps.

</ol>

</ol>

</div>

<div class=section>
<h3>Tree construction</h3>

<p class=ed><dfn>tree construction</dfn> stage.

<p>The <dfn>stack of open elements</dfn> contains tuples of
(<dfn>element node</dfn>, <dfn>section depth</dfn>, <dfn>quotation
depth</dfn>, <dfn>list depth</dfn>).  These stack grows downdards; the
topmost entry on the stack is the first one added to the stack, and
the bottommost entry of the stack is the most recently added entry in
the stack.  It initially contains only a tuple: (the <span>body
element</span>, <code>0</code>, <code>0</code>, <code>0</code>).  When
an entry is pushed to the <span>stack of open elements</span>, the
items of the new tupple is set to the same values as the bottommost
tuple unless otherwise specified.

<p>The <span>current element</span> is the <span>element node</span>
of the bottommost entry in the <span>stack of open elements</span>.

<div class=section>
<h4>The "<span>in section</span>" <span>insertion mode</span></h4>

<p>In the "<dfn>in section</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>heading start token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<em>not</em> one of <code>body</code>, <code>section</code>,
<code>insert</code>, or <code>delete</code>, pop off the element from
the <span>stack of open elements</span> and follow this substep again.

<li>Let <var>current depth</var> be the <span>section depth</span> of
the bottommost entry in the <span>stack of open elements</span>.

<li>If <span title=heading-start-depth>depth</span> is less than or
equal to the <var>current depth</var>, pop the element off the
<span>stack of the open elements</span> and go back to the first
substep of these substeps.

<li>Otherwise, if <span title=heading-start-depth>depth</span> is
greater than <var>current depth</var> + 1, create a
<code>section</code> element in the <span>HTML namespace</span>,
append the element created to the <span>current element</span>, push
the element created to the <span>stack of open elements</span> with
<span>section depth</span> set to <var>current depth</var> + 1,
<span>quotation depth</span> set to zero (0), and <span>list
depth</span> set to zero (0), and go back to the first substep of
these substeps.

<li>Create a <code>section</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to <span
title=heading-start-depth>depth</span>, <span>quotation depth</span>
set to zero (0), and <span>list depth</span> set to zero (0).

<li>Create a <code>h1</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is <code>INS</code>

<dd>

<ol>

<li>Create an <code>insert</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section level</span> set to zero (0),
<span>quotation level</span> set to zero (0), and <span>list
level</span> set to zero (0).

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code>class</code> <span>content attribute</span> of the element
created to <span title=block-start-tag-classes>classes</span>.

</ol>

<dt>A <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is <code>DEL</code>

<dd>

<ol>

<li>Create an <code>delete</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section level</span> set to zero (0),
<span>quotation level</span> set to zero (0), and <span>list
level</span> set to zero (0).

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code>class</code> <span>content attribute</span> of the element
created to <span title=block-start-tag-classes>classes</span>.

</ol>

<dt>A <span>quotation start token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<em>not</em> one of <code>blockquote</code>, <code>body</code>,
<code>section</code>, <code>insert</code>, or <code>delete</code>, pop
off the element from the <span>stack of open elements</span> and
follow this substep again.

<li>Let <var>current depth</var> be the <span>quotation depth</span>
of the bottommost entry in the <span>stack of open elements</span>.

<li>If <span title=quotation-start-depth>depth</span> is less than or
equal to the <var>current depth</var>, pop the element off the
<span>stack of the open elements</span> and go back to the first
substep of these substeps.

<li>Otherwise, if <span title=quotation-start-depth>depth</span> is
greater than <var>current depth</var> + 1, create a
<code>blockquote</code> element in the <span>HTML namespace</span>,
append the element created to the <span>current element</span>, push
the element created to the <span>stack of open elements</span> with
<span>section depth</span> set to zero (0), <span>quotation
depth</span> set to <var>current depth</var> + 1, and <span>list
depth</span> set to zero (0), and go back to the first substep of
these substeps.

<li>Create a <code>blockquote</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to zero (0),
<span>quotation depth</span> set to <span
title=quotation-start-depth>depth</span>, and <span>list depth</span>
set to zero (0).

</ol>

<dt>A <span>list start token</span>

<dd>

<ol>

<li>Let <var>current depth</var> be the <span>list depth</span> of the
<span>current element</span>.

<li>Let <var>inserted depth</var> be the length of <span
title=list-start-depth>depth</span> of the <span>list start
token</span>.

<li>If <var>current depth</var> is greater than <var>inserted
depth</var>, pop off the <span>current element</span> from the
<span>stack of open elements</span> and go back to the first substep
of these substeps.

<li>If <var>current depth</var> is less than <var>inserted
depth</var>, run the following substeps:

<ol>

<li>Let <var>type</var> be the character at the index equal to
<var>current depth</var> in <span title=list-start-depth>depth</span>
of the <span>list start token</span>, where the index of the first
character in <span title=list-start-depth>depth</span> is zero (0).

<li>If <var>type</var> is <code>-</code>, create a <code>ul</code>
element in the <span>HTML namespace</span>.

<li>Otherwise, create a <code>ol</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>, with <span>list depth</span> set to <var>current
depth</var> + 1.

<li>If <var>current depth</var> + 1 is less than <var>inserted
depth</var>, run the following substeps:

<ol>

<li>Create a <code>li</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<li>Go back to the first substep for the <span>list start
token</span>.

</ol>

<li>If the <span>list depth</span> is equal to <var>inserted
depth</var> and the local name of the <span>current element</span> is
<em>not</em> <code>ul</code> or <code>ol</code>, pop off the
<span>current element</span> from the <span>stack of open
elements</span>.

<li>Create a <code>li</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>labeled list start token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<code>dd</code>, pop off the element from the <span>stack of open
elements</span>.

<li>If the local name of the <span>current element</span> is
<em>not</em> <code>dl</code>, create a <code>dl</code> element in the
<span>HTML namespace</span>, append the element created to the
<span>current element</span>, and push the element created to the
<span>stack of open elements</span>.

<li>Create a <code>dt</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>table row start token</span>

<dd>

<ol>

<li>Create a <code>table</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Create a <code>tbody</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Create a <code>tbody</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>table row</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is <code>PRE</code>

<dd>

<ol>

<li>Create a <code>pre</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code>class</code> <span>content attribute</span> of the element
created to <span title=block-start-tag-classes>classes</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>preformatted start token</span>

<dd>

<ol>

<li>Create a <code>pre</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code>class</code> <span>content attribute</span> of the element
created to <span title=block-start-tag-classes>classes</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>comment paragraph start token</span>

<dd>

<ol>

<li>Create a <code>comment-p</code> element in the
<span>SuikaWiki/0.10 namespace</span>.


<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>editorial note start token</span>

<dd>

<ol>

<li>Create a <code>ed</code> element in the <span>SuikaWiki/0.10
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>An <span>empty line token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is <em>not</em>
one of <code>body</code>, <code>section</code>, <code>insert</code>,
or <code>delete</code>, pop off the element from the <span>stack of
open elements</span> and follow this substep again.

</ol>

<dt>A <span>block end tag token</span> whose <span
title=block-end-tag-tag-name>tag name</span> is <code>INS</code>

<dd>If the <span>stack of open elements</span> contains an element
whose local name is <code>insert</code>, pop off the <span>current
element</span> until such an element whose local name is
<code>insert</code> has been popped from the <span>stack of open
elements</span>.

<dt>A <span>block end tag token</span> whose <span
title=block-end-tag-tag-name>tag name</span> is <code>DEL</code>

<dd>If the <span>stack of open elements</span> contains an element
whose local name is <code>delete</code>, pop off the <span>current
element</span> until such an element whose local name is
<code>delete</code> has been popped from the <span>stack of open
elements</span>.

<dt>A <span>form token</span> whose <span title=form-name>name</form>
is <code>form</code>

<dd>

<ol>

<li>Create a <code>form</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>If <span title=form-id>id</span> of the <span>form token</span> is
<em>not</em> null, set the <code>id</code> <span>content
attribute</span> of the element created to <span
title=form-id>id</span> of the <span>form token</span>.

<li>Set the <code>input</code> <span>content attribute</span> of the
element created to the first item in <span
title=form-parameters>parameters</span> of the <span>form
token</span>, if any, or the empty string otherwise.

<li>Set the <code>template</code> <span>content attribute</span> of
the element created to the second item in <span
title=form-parameters>parameters</span> of the <span>form
token</span>, if any, or the empty string otherwise.

<li>Set the <code>option</code> <span>content attribute</span> of the
element created to the third item in <span
title=form-parameters>parameters</span> of the <span>form
token</span>, if any, or the empty string otherwise.

<li>If the <span title=form-parameters</span> contains four or more
items, set the <code>parameter</code> <span>content attribute</span>
of the element created to the concatenation of items in <span
title=form-parameters>parameters</span>, separated by a <code>:</code>
character, in the same order.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>Any other <span>form token</span>

<dd>

<ol>

<li>Create a <code>form</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Set the <code>ref</code> <span>content attribute</span> of the
element created to <span title=form-name>name</span> of the <span>form
token</span>.

<li>Set the <code>id</code> of the <span>form token</span> is
<em>not</em> null, set the <code>id</code> <span>content
attribute</span> of the element created to <span
title=form-id>id</span> of the <span>form token</span>.

<li>If <span title=form-parameters>parameters</span> of <span>form
token</span> is not empty, set the <code>parameter</code>
<span>content attribute</span> of the element created to the
concatenation of items in <span
title=form-parameters>parameters</span>, separated by a <code>:</code>
character, in the same order.  The result value might be the empty
string.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>An <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>replace</code>

<dd>

<ol>

<li>Create an element whose local name is <span
title=element-local-name>local name</span> of the <span>element
token</span> and namespace is <span
title=element-namespace>namespace</span> of the <span>element
token</span>.

<li>If <span title=element-by-attribute>by attribute</span> of the
<span>element token</span> is <em>not</em> null, set the
<code>by</code> <span>content attribute</span> of the element created
to <span title=element-by-attribute>by attribute</span> of the
<span>element token</span>.

<li>Append the element created to the <span>stack of open
elements</span>.

</ol>

<dt>An <span>end-of-file token</span>

<dd>Now the <code>Document</code> has been constructed.  Abort the
<span title="SWML text format parser">parser</span>.

<dt>A <span>labeled list middle token</span>, <span>heading end
token</span>, <span>preformatted end token</span>, <span>table row end
token</span>, <span>table cell start token</span>, <span>table cell
end token</span>, or <span>table colspan cell token</span> <!-- they
should not appear in this insertion mode -->

<dd>Ignore the token.

<dt>Anything else

<dd>

<ol>

<li>Create a <code>p</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

</dl>

</div>

<div class=section>
<h4>The "<span>in table row</span>" <span>insertion mode</span></h4>

<p>In the "<dfn>in table row</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>table cell start token</span>

<dd>

<ol>

<li>Create a <code>td</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>table colspan cell token</span>

<dd>

<ol>

<li>If the local name of the node returned by the
<code>lastChild</code> <span>DOM attribute</span> of the <span>current
element</span>, if any, is <code>td</code>, increase the value of
<code>colspan</code> <span>DOM attribute</span> of the node by one (1)
and abort these substeps.

<li>Create a <code>td</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>A <span>table row end token</span>

<dd>If the local name of the <span>current element</span> is
<code>tr</code>, pop off the element from the <span>stack of open
elements</span>.

<dt>A <span>table row start token</span>

<dd>

<ol>

<li>Create a <code>tr</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>Anything else

<dd>Switch to the "<span>in section</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</dl>

</div>

"in paragraph"

</div>

</div>
