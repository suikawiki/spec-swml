<!DOCTYPE HTML>
<html class="formal-specification status-work-in-progress anolis" lang=en>
<title>SuikaWiki Markup Language (SWML)</title>
<link rel=stylesheet href="/www/style/html/spec">

<div class="header">
<h1 class="no-toc no-num">SuikaWiki Markup Language (SWML)</h1>
<h2 class="no-toc no-num">Working Draft [DATE]</h2>

<dl class="versions-uri">
<dt>This Version</dt>
  <dd><code class="URI">&lt;<a href="http://suika.fam.cx/www/markup/suikawiki/spec/swml-work"
      >http://suika.fam.cx/www/markup/suikawiki/spec/swml-work</a>&gt;</code></dd>
<dt>Latest Version</dt>
  <dd><code class="URI">&lt;<a href="http://suika.fam.cx/www/markup/suikawiki/spec/swml-work"
      >http://suika.fam.cx/www/markup/suikawiki/spec/swml-work</a>&gt;</code></dd>
<dt>Latest Working Draft</dt>
  <dd><code class="URI">&lt;<a href="http://suika.fam.cx/www/markup/suikawiki/spec/swml-work"
      >http://suika.fam.cx/www/markup/suikawiki/spec/swml-work</a>&gt;</code></dd>
<!-- <dt>Previous Version</dt> -->
<dt>Version History</dt>
  <dd><code class=URI>&lt;<a href="http://suika.fam.cx/gate/cvs/markup/suikawiki/spec/swml-work-src.en.html.u8">http://suika.fam.cx/gate/cvs/markup/suikawiki/spec/swml-work-src.en.html.u8</a>&gt;</code></dd>
<dt id=author>Author</dt>
  <dd><a href="http://suika.fam.cx/~wakaba/who?" rel="author"
      lang=ja>Wakaba</a>
  <code class="mail">&lt;<a href="mailto:w@suika.fam.cx" rel="author"
      >w@suika.fam.cx</a>&gt;</code></dd>
</dl>

<p class="copyright" lang="en">&#xA9; 2008 <a
href="http://suika.fam.cx/~wakaba/who?" rel="author">Wakaba</a>.  You
are granted a license to use, reproduce and create derivative works of
this document.

</div>

<div class=section id=abstract>
<h2 class="no-toc no-num">Abstract</h2>

<p class=ed>...
</div>

<div id="status" class=section>
<h2 class="no-toc no-num">Status of this document</h2>

<p class=section-info><em>This section describes the status of this
document at the time of its publication.  Other documents might
supersede this document.</em></p>

<p>This document is a working draft, produced as part of the SuikaWiki
project.  It might be updated, replaced, or obsoleted by other
documents at any time.  It is inappropriate to cite this document as
other than <q>work in progress</q>.</p>

<p>Comments on this document are welcome and may be sent to the <a
href="#author">author</a>.</p>

<p>Translations of thie document might be available.  The English
version of the document is the only normative version.</p>

</div>

<div class=section>
<h2 class="no-toc no-num">Table of contents</h2>

<!-- toc -->
</div>

<div class=section>
<h2>Introduction</h2>

<p><em>This section is non‐normative.</em>

<p class=ed>...
</div>

<div class=section>
<h2>Terminology</h2>

<p>All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked
non-normative. Everything else in this specification is normative.

<p>The key words “<em class=rfc2119>MUST</em>”, “<em
class=rfc2119>MUST NOT</em>”, “<em class=rfc2119>SHOULD</em>”, and 
“<em class=rfc2119>MAY</em>” in the normative parts of this document
are to be interpreted as described in RFC 2119 <span
class=ed>[RFC2119]</span>.

<p>Requirements phrased in the imperative as part of algorithms (such
as “strip any leading space characters” or “return false and abort
these steps”) are to be interpreted with the meaning of the key word
(e.g. <em class=rfc2119>MUST</em>”) used in introducing the
algorithm.

<p>Conformance requirements phrased as algorithms or specific steps
<em class=rfc2119>MAY</em> be implemented in any manner, so long as
the end result is equivalent. (In particular, the algorithms defined
in this specification are intended to be easy to follow, and not
intended to be performant.)

<p>This specification refers to both XML attributes and DOM
attributes, often in the same context. When it is not clear which is
being referred to, they are referred to as <dfn title="content
attribute">content attributes</dfn> for XML attributes, and <dfn
title="DOM attribute">DOM attributes</dfn> for those from the DOM.

<p>When it is stated that some element or attribute is
<dfn>ignored</dfn>, or treated as some other value, or handled as if
it was something else, this refers only to the processing of the node
after it is in the DOM. A user agent <em class=rfc2119>MUST NOT</em>
mutate the DOM in such situations.

<p>The language in this specification assumes that the user agent
expands all entity references, and therefore does not include entity
reference nodes in the DOM. If user agents do include entity reference
nodes in the DOM, then user agents <em class=rfc2119>MUST</em> handle
them as if they were fully expanded when implementing this
specification.  Entity references to unknown entities <em
class=rfc2119>MUST</em> be treated as if they contained just an empty
text node for the purposes of the algorithms defined in this
specification.

<div class=section>
<h3>Namespaces</h3>


<p>The <dfn>AA namespace</dfn> is
<code>http://pc5.2ch.net/test/read.cgi/hp/1096723178/aavocab#</code>.
The <span>preferred prefix</span> is <code>aa</code>.

<p>The <dfn>HTML namespace</dfn> is
<code>http://www.w3.org/1999/xhtml</code>.  The <span>preferred
prefix</span> is <code>html</code>.

<p>The <dfn>SuikaWiki/0.9 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:suikawiki:0:9:</code>.  The
<span>preferred prefix</span> is <code>sw</code>.

<p>The <dfn>SuikaWiki/0.10 namespace</dfn> is
<code>urn:x-suika-fam-cx:markup:suikawiki:0:10:</code>.  The
<span>preferred prefix</span> is <code>sw10</code>.

<p>The <dfn>XHTML2 namespace</dfn> is
<code>http://www.w3.org/2002/06/xhtml2/</code>.

<p>The <dfn>XML namespace</dfn> is
<code>http://www.w3.org/XML/1998/namespace </code>.  The
<span>preferred prefix</span> is <code>xml</code>.

</div>

</div>

<div class=section>
<h2>The <dfn>SWML text serialization</dfn></h2>

<p class=ed>...

<div class=section>
<h3>Writing <span>SWML text serialization</span> documents</h3>

<p><em>This section is non‐normative.</em>

<p class=ed>...
</div>

<div class=section>
<h3>Parsing <span>SWML text serialization</span> documents</h3>

<p>This section specifies how to convert a string of characters into a
DOM <span class=ed>[DOM]</span> tree, assuming the string is written
in the <span>SWML text serialization</span>.  This process is referred
to as <dfn title="parsing an SWML text serialization">parsing</dfn>
and an implementation that performes this process is referred to as
<dfn title="SWML text serialization parser">parser</dfn>.

<div class="note memo">

<p>How to convert a string of bytes into a string of characters is
outside of the scope of this specification.

</div>

<p>The <span title="parsing an SWML text serialization">parsing
process</span> is defined in terms of DOM and relies on HTML5 <span
class=ed>...</span> and manakai's extensions to DOM <span
class=ed>...</span>.  However, a conforming <span title="SWML text
serialization parser">parser</span> don't have to implement them, as
long as the end result is equivalent.

<p>The <span title="parsing an SWML text serialization">parsing
process</span> is divided into two stages: <span>tokenization</span>
and <span>tree construction</span>.  The <span>tokenization</span>
stage emits a sequence of <span title=token>tokens</span>, which are
used as inputs for the <span>tree construction</span> stage.  The
<span>tree construction</span> stage constructs a DOM tree.  Some
steps invoked in the <span>tokenization</span> stage might also
construct a part of the DOM tree.  During the <span title="parsing an
SWML text serialization">parsing</span>, mutation events <em
class=rfc2119>MUST NOT</em> be invoked.

<p>Before the actual <span title="parsing an SWML text
serialization">parsing</span> starts, a new <code
title=dom-document>Document</code> object <em class=rfc2119>MUST</em>
be created.  It represents the DOM tree constructed as a result of the
<span title="parsing an SWML text serialization">parsing</span>.  The
<code>innerHTML</code> <span>DOM attribute</span> of the <code
title=dom-document>Document</code> object <em class=rfc2119>MUST</em>
be initially set to
<code>&lt;html&#x20;xmlns="http://www.w3.org/1999/xhtml">&lt;head>&lt;/head>&lt;body>&lt/body>&lt;/html></code>.
The <dfn>document element</dfn> is what the
<code>documentElement</code> <span>DOM attribute</span> of the <code
title=dom-document>Document</code> returns.  The <dfn>head
element</dfn> is what the <code>firstChild</code> <span>DOM
attribute</span> of the <span>document element</span> returns at the
time immediately after the <code>innerHTML</code> is set.  The
<dfn>body element</dfn> is what the <code>lastChild</code> <span>DOM
attribute</span> of the <span>document element</span> returns at the
time immediately after the <code>innerHTML</code> is set.  The
<dfn>image element</dfn> is initially null.

<div class=section>
<h4>Definitions</h4>

<p><dfn>White space characters</dfn> are U+0009 <code
class=charname>CHARACTER TABULATION</code> and U+0020 <code
class=charname>SPACE</code>.

<p><dfn>Digits</dfn> are characters in the range U+0030 <code
class=charname>DIGIT ZERO</code> .. U+0039 <code class=charname>DIGIT
NINE</code>.

<p><dfn>Uppercase letters</dfn> are characters in the range U+0041
<code class=charname>LATIN CAPITAL LETTER A</code> .. U+005A <code
class=charname>LATIN CAPITAL LETTER Z</code>.

<p><dfn>Lowercase letters</dfn> are characters in the range U+0061
<code class=charname>LATIN SMALL LETTER A</code> .. U+007A <code
class=charname>LATIN SMALL LETTER Z</code>.

<p><dfn>Language tag characters</dfn> are <span>digits</span>,
<span>uppercase letters</span>, <span>lowercase letters</span>, and
U+002D <code class=charname>HYPHEN-MINUS</code>.

<p><dfn>Scheme characters</dfn> are <span>digits</span>,
<span>uppercase letters</span>, <span>lowercase letters</span>, U+0025
<code class=charname>PERCENT SIGN</code>, U+002A <code
class=charname>PLUS SIGN</code>, U+002D <code
class=charname>HYPHEN-MINUS</code>, U+002E <code class=charname>FULL
STOP</code> and U+005F <code class=charname>LOW LINE</code>.

<p>A <dfn>class specification</dfn> is a string consist of a
<code>(</code> character, followed by zero or more character that is
<em>not</em> one of <code>)</code>, <code>)</code>, or <span>white
space characters</span>, and finally followed by a <code>)</code>
character.  <!-- Though the SuikaWiki3 implementation of the parser
support quoted-pair in class specification in [PRE[ block start tag
and inline start tags, it is not allowed in [INS[ and [DEL[, and is
not part of SuikaWiki/0.9 specification, and it should not appear in
any existing SuikaWiki article afaict, this version of the SWML
specification does not support such escaping syntax. --> The <dfn>body
of a class specification</dfn> is the substring of the <span>class
specification</span> between parentheses (exclusive).  It might be the
empty string.

<p>A <dfn>language specification</dfn> is a string consist of a
<code>@</code> character followed by zero or more <!-- one or more in
SuikaWiki3 implementation --> <span>language tag characters</span>.
<!-- SuikaWiki/0.10 addition --> The <dfn>body of a language
specification</dfn> is the substring in the <span>language
specification</span> except for the first <code>@</code> character.
It might be the empty string.

<p>When the <span title="SWML text serialization parser">parser</span>
<dfn title="append a character">appends a character</dfn>
<var>char</var> to node <var>node</var>, the
<code>manakai_append_text</code> method <cite class=ed>...</cite> <em
class=rfc2119>MUST</em> be invoked on <var>node</var> with the
argument <var>char</var>.

<p>When an element is created, its <code>prefix</code> <span>DOM
attribute</span> <em class=rfc2119>MUST</em> be set to
<code>null</code>.

<p>When an attribute is created, unless otherwise specified, its
<code>prefix</code> and <code>namespaceURI</code> <span title="DOM
attribute">DOM attributes</span> <em class=rfc2119>MUST</em> both set
to <code>null</code>.

<p>When an attribute is created in a namespace, its
<code>prefix</code> <span>DOM attribute</span> <em
class=rfc2119>MUST</em> be set to the <dfn>preferred prefix</dfn> for
the namespace.

</div>

<div class=section>
<h4>Tokenization of lines</h4>

<p>When a string of characters is <dfn
title=tokenization>tokenized</dfn>, the string <var>s</var> <em
class=rfc2119>MUST</em> be processed as follows:

<ol>

<li>Let <var>pos</var> be zero (0).  It represents the index in
<var>s</var>.  The index of the first character in <var>data</var> is
zero (0).

<li>If <var>pos</var> is greater than or equal to the length of
<var>s</var>, then emit an <span>end-of-file token</span> and abort
these steps.

<li>Let <var>line</var> be the empty string.

<li>If the <var>pos</var>th character of <var>s</var> is U+000D <code
class=charname>CARRIAGE RETURN</code>, <span
title=process-line>process</span> <var>line</var>.  Set
<var>line</var> to the empty string.  If the (<var>pos</var> + 1)th
character of <var>s</var> is U+000A <code>LINE FEED</code>, increment
<var>pos</var> by one (1).

<li>Otherwise, if the <var>pos</var>th character of <var>s</var> is
U+000A <code>LINE FEED</code>, <span
title=process-line>process</span> <var>line</var>.  Set
<var>line</var> to the empty string.

<li>Otherwise, append the <var>pos</var>th character of <var>s</var>
to <var>line</var>.

<li>Increase <var>pos</var> by one (1).

<li>Go back to the fourth step of these steps.

</ol>

<p>The steps above <dfn>emit</dfn> one or more sequence of <dfn
title=token>tokens</dfn>, which are inputs to the <span>tree
construction</span> stage.  A <span>token</span> can have zero or more
properties, depending on the kind of the <span>token</span>.  There
are several kinds of <span title=token>tokens</span> and properties as
follows:

<dl>

<dt><dfn>Block start tag token</dfn>

<dd><dfn title=block-start-tag-classes>Classes</dfn> and <dfn
title=block-start-tag-tag-name>tag name</dfn> properties.

<dt><dfn>Block end tag token</dfn>

<dd><dfn title=block-end-tag-tag-name>Tag name</dfn> property.

<dt><dfn>Character token</dfn>

<dd><dfn title=character-data>Data</dfn> property.

<dt><dfn>Comment paragraph start token</dfn>

<dd>No property.

<dt><dfn>Editorial note start token</dfn>

<dd>No property.

<dt><dfn>Element token</dfn>

<dd><dfn title=element-local-name>Local name</dfn>, <dfn
title=element-namespace>namespace</dfn>, <dfn
title=element-anchor-attribute>anchor attribute</dfn>, <dfn
title=element-by-attribute>by attribute</dfn>, <dfn
title=element-res-scheme-attribute>resScheme attribute</dfn>, <dfn
title=element-res-parameter-attribute>resParameter attribute</dfn>,
and <dfn title=element-content>content</dfn> attribute.  Default for
these properties are null.

<dt><dfn>Emphasis token</dfn>

<dd>No property.

<dt><dfn>Empty line token</dfn>

<dd>No property.

<dt><dfn>End-of-file token</dfn>

<dd>No property.

<dt><dfn>Form token</dfn>

<dd><dfn title=form-name>Name</dfn>, <dfn title=form-id>id</dfn>, and
<dfn title=form-parameters>parameters</dfn> properties.

<dt><dfn>Heading start token</dfn>

<dd><dfn title=heading-start-depth>Depth</dfn> property.

<dt><dfn>Heading end token</dfn>

<dd>No property.

<dt><dfn>Inline start tag token</dfn>

<dd><dfn title=inline-start-tag-tag-name>Tag name</dfn>, <dfn
title=inline-start-tag-classes>classes</dfn>, and <dfn
title=inline-start-tag-language>language</dfn> properties.  Default
for these properties is null.

<dt><dfn>Inline middle tag token</dfn>

<dd><dfn title=inline-middle-tag-language>language</dfn> property,
whose default is null.

<dt><dfn>Inline end tag token</dfn>

<dd><dfn title=inline-end-tag-anchor-attribute>Anchor attribute</dfn>,
<dfn title=inline-end-tag-res-scheme-attribute>resScheme
attribute</dfn>, and <dfn
title=inline-end-tag-res-parameter-attribute>resParameter
attribute</dfn> properties.  Default for these properties is null.

<dt><dfn>Labeled list start token</dfn>

<dd>No property.

<dt><dfn>Labeled list middle token</dfn>

<dd>No property.

<dt><dfn>List start token</dfn>

<dd><dfn title=list-start-depth>Depth</dfn> property.

<dt><dfn>Preformatted start token</dfn>

<dd>No property.

<dt><dfn>Preformatted end token</dfn>

<dd>No property.

<dt><dfn>Quotation start token</dfn>

<dd><dfn title=quotation-start-depth>Depth</dfn> property.

<dt><dfn>Strong token</dfn>

<dd>No property.

<dt><dfn>Table row start token</dfn>

<dd>No property.

<dt><dfn>Table row end token</dfn>

<dd>No property.

<dt><dfn>Table cell start token</dfn>

<dd>No property.

<dt><dfn>Table cell end token</dfn>

<dd>No property.

<dt><dfn>Table colspan cell token</dfn>

<dd>No property.

</dl>

<p><dfn>Mode</dfn> is a state of the <span
title=tokenization>tokenizer</span> and is one of
"<span>initial</span>" (the initial value used when the
<span>tokenization</span> starts), "<span>body</span>",
"<span>preformatted</span>", "<span>preformatted block</span>", and
"<span>image data</span>".

<p><dfn>Continuous line flag</dfn> is another flag of the <span
title=tokenization>tokenizer</span>, representing whether a new line
character should be appended to the data, and takes either true or
false.  This flag is mainly used in the "<span>body</span>"
<span>mode</span>.

<p>When a <dfn title=process-line><var>line</var> is processed</dfn>,
rules specified in the following subsections is used according to the
appropriate <span>mode</span>.  Rules below sometimes require the <dfn
title=reprocess-line><var>line</var> be reprocessed</dfn>.  In such a
case, rules for the appropriate <span>mode</span> <em
class=rfc2119>MUST</em> be followed with the same <var>line</var>.

<div class=section>
<h5>The "<span>initial</span>" mode</h5>

<p>In the "<dfn>initial</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> starts with <code>#?</code>

<dd><span>Parse a magic line</span> <var>line</var>.

<dt>Otherwise

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Switch to the "<span>body</span>" <span>mode</span> and <span
title=reprocess-line>reprocess</span> <var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h5>The "<span>body</span>" mode</h5>

<p>In the "<dfn>body</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is empty

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit an <span>empty line token</span>.

</ol>

<dt>If <var>line</var> starts with a <span title="white space
characters">white space character</span>

<dd>

<ol>

<li>Emit a <span>preformatted start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

<li>Switch to the "<span>preformatted</span>" mode.

</ol>

<dt>If <var>line</var> starts with <code>*</code>

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be zero (0).

<li>While the first character of <var>data</var>, if any, is
<code>*</code>, run the following substeps:

<ol>

<li>Increase <var>depth</var> by one (1).

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>*</code>.)

</ol>

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>heading start token</span> whose <span
title=heading-start-depth>depth</span> set to <var>depth</var>.

<li>Run the <span>algorithm to tokenize a text</span> with <var>data</var>.

<li>Emit a <span>heading end token</span>.

<li>Finally, set the <span>continuous line flag</span> to false.

</ol>

<dt>If <var>line</var> starts with <code>-</code> or <code>=</code>

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be the empty string.

<li>While the first character of <var>data</var>, if any, is
<code>-</code> or <code>=</code>, run the following substeps:

<ol>

<li>Append the first character of <var>data</var> to <var>depth</var>.

<li>Remove the first character of <var>data</var>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Emit a <span>list start token</span> whose <span
title=list-start-depth>depth</span> set to <var>depth</var>.

<li>Run the <span>algorithm to tokenize a text</span> with <var>data</var>.

</ol>

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> starts with <code>:</code>

<dd>

<ol>

<li>Let <var title>name</var> be the empty string.

<li>Let <var title>data</var> be <var>line</var>.

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>:</code>.)

<li>While <var>data</var> is not empty and the first character of
<var>data</var> is <em>not</em> <code>:</code>, run the following
substeps:

<ol>

<li>Append the first character of <var title>data</var> to <var
title>name</var>.

<li>Remove the first character of <var title>data</var>.

</ol>

<li>If <var title>name</var> is the empty string, run the following
substeps:

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> is a <code>:</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with <var
title>name</var>.

</ol>

<div class="note memo">

<p>In this case, <var>line</var> does not represent a description
list.  <!-- For compatibility with previous implementations. -->

</div>

<li>Otherwise, run the following substeps:

<ol>

<li>Remove <span>white space characters</span> at the beginning of
<var title>name</var>, if any.

<li>Remove <span>white space characters</span> at the end of <var
title>name</var>, if any.

<li>Emit a <span>labeled list start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with <var
title>name</var>.

<li>Remove <span>white space characters</span> at the end of
<var>data</var>, if any.

<li>Emit a <span>labeled list middle token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> starts with <code>></code>

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Let <var>depth</var> be zero (0).

<li>While the first character of <var>data</var>, if any, is
<code>></code>, run the following substeps:

<ol>

<li>Increase <var>depth</var> by one (1).

<li>Remove the first character of <var>data</var>.  (The removed
character will be <code>></code>.

</ol>

<li>If <var>depth</var> is two (2), <var>data</var> is not empty, and
the first character of <var>data</var> is one of <span>digits</span>,
run the following substeps:

<ol>

<li>Prepend two <code>></code> characters to <var>data</var>.

<li>If the <span>continuous line flag</span> is true, preprend a
U+000A <code class=charname>LINE FEED</code> character to
<var>data</var>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<li>Otherwise, run the following substeps:

<ol>

<li>Emit a <span>quotation start token</span> whose <span
title=quotation-start-depth>depth</span> set to <var>depth</var>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>@@</code>, run the
following substeps: <!-- SuikaWiki/0.10 addition -->

<ol>

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>@@</code>).

<li>Emit a <span>editorial note start token</span>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

</ol>

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>;;</code>, run the
following substeps: <!-- SuikaWiki/0.10 addition -->

<ol>

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>;;</code>).

<li>Emit a <span>comment paragraph start token</span>.

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

</ol>

<li>In any case, run the <span>algorithm to tokenize a text</span>
with <var>data</var>.

</ol>

<li>Finally, set the <span>continuous line flag</span> to true.

</ol>

<dt>If <var>line</var> is a string consist of a <code>[</code>
character, followed by one of <code>INS</code>, <code>DEL</code>, or
<code>PRE</code>, optionally followed by <span>class
specification</span>, followed by a <code>[</code> character, followed
by zero or more <span>white space characters</span>

<!-- No more block start tag with this syntax should be added in
future revisions. -->

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is one of
<code>INS</code>, <code>DEL</code>, or <code>PRE</code>, that appears
in <code>line</code>.

<li>If the <span title=block-start-tag-tag-name>tag name</span> is
<code>PRE</code>, switch to the "<span>preformatted block</span>"
<span>mode</span>.

</ol>

<dt>If <var>line</var> starts with <code>@@</code>
<!-- SuikaWiki/0.10 addition -->

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>@@</code>.)

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Set the <span>continuous line flag</span> to true.

<li>Emit a <span>editorial note start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<dt>If <var>line</var> starts with <code>;;</code>
<!-- SuikaWiki/0.10 addition -->

<dd>

<ol>

<li>Let <var>data</var> be <var>line</var>.

<li>Remove the first two characters of <var>data</var>.  (The removed
characters will be <code>;;</code>.)

<li>Remove <span>white space characters</span> at the beginning of
<var>data</var>, if any.

<li>Set the <span>continuous line flag</span> to true.

<li>Emit a <span>comment paragraph start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>data</var>.

</ol>

<!--

Though the SuikaWiki3's parser recognizes "[[# ...]] @@" or "[[#
... ]] ;;" as comment paragraph or editorial note preceded by a form
block, it considered as a bug and this specification treates these
characters as character data.

-->

<dt>If <var>line</var> is a string consist of a <code>]</code>
character, followed by one of <code>INS</code> or <code>DEL</code>,
followed by a <code>]</code> character, followed by zero or more
<span>white space characters</span>

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>block end tag token</span> whoes <span
title=block-end-tag-tag-name>tag name</span> is one of
<code>INS</code>, <code>DEL</code>, or <code>PRE</code>, that appears
in <code>line</code>.

</ol>

<dt>If <var>line</var> starts with <code>,</code>

<dd>

<ol>

<li>Run the <span>algorithm to tokenize a table row</span> with
<var>line</var>.

<li>Set the <span>continuous line flag</span> to false.

</ol>

<dt>If <var>line</var> is <code>__IMAGE__</code>

<dd>Switch to the "<span>image data</span>" <span>mode</span>.  <!--
SuikaWikiImage/0.9 addition -->

<dt>Otherwise

<dd>

<ol>

<li>If the <span>continuous line flag</span> is true, emit a
<span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Set the <span>continuous line flag</span> to true.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h5>The "<span>preformatted</span>" mode</h5>

<p>In the "<dfn>preformatted</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is the empty string

<dd>

<ol>

<li>Emit a <span>preformatted end token</span>.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>If <var>line</var> is a string consist of a <code>]</code>
character, followed by one of <code>INS</code> or <code>DEL</code>,
followed by a <code>]</code> character, followed by zero or more
<span>white space characters</span>

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>preformatted end token</span>.

<li>Emit a <span>block end tag token</span> whoes <span
title=block-end-tag-tag-name>tag name</span> is one of
<code>INS</code> or <code>DEL</code>, that appears in
<code>line</code>.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>Otherwise

<dd>

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h5>The "<span>preformatted block</span>" mode</h5>

<p>In the "<dfn>preformatted block</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<dl class=switch>

<dt>If <var>line</var> is a string consist of <code>]PRE]</code>
followed by zero or more <span>white space characters</span>

<dd>

<ol>

<li>Set the <span>continuous line flag</span> to false.

<li>Emit a <span>block end tag token</span> whoes <span
title=block-end-tag-tag-name>tag name</span> is <code>PRE</code>.

<li>Switch to the "<span>body</span>" <span>mode</span>.

</ol>

<dt>Otherwise

<dd>

<ol>

<li>If the <span>continuous line flag</span> is true, emit a
<span>character token</span> whose <span
title=character-data>data</span> is a U+000A <code class=charname>LINE
FEED</code> character.

<li>Set <span>continuous line flag</span> to true.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>line</var>.

</ol>

</dl>

</div>

<div class=section>
<h5>The "<span>image data</span>" mode</h5>

<p>In the "<dfn>image data</dfn>" mode, <var>line</var> <em
class=rfc2119>MUST</em> be processed as follows:

<ol>

<li>If the <span>image element</span> is null, then create an
<code>image</code> element in the <span>SuikaWiki/0.9 namespace</span>
and set the <span>image element</span> to that element.  Append the
<span>image element</span> to the <span>document element</span>.

<li>Otherwise, <span>append a character</span> U+000A <code
class=charname>LINE FEED</code> to the <span>image element</span>.

<li>Then, <span title="append a character">append each
character</span> in <var>line</var> in the same order to the
<span>image element</span>.

</ol>

</div>

</div>

<div class=section>
<h4>Tokenization of a table row</h4>

<p>The <dfn>algorithm to tokenize a table row</dfn> <var>data</var> is
as follows:

<ol>

<li>Let <var>pos</var> be zero (0).  It represents the index in
<var>data</var>.  The index of the first character in <var>data</var>
is zero (0).

<li>Emit a <span>table row start token</span>.

<li><dfn title=tokenize-table-row-loop><i>LOOP</i></dfn>: If
<var>pos</var> is greater than or equal to the length of
<var>data</var>, emit a <span>table row end token</span> and abort
this algorithm.

<li>Increase <var>pos</var> by one (1). <!-- Skip "," -->

<li>Let <var>cell</var> be the empty string.

<li>Let <var>cell quoted</var> be the empty string.

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, emit a <span>table row end token</span> and abort
this algorithm.

<li>If the <var>pos</var>th character in <var>data</var> is a <span
title="white space characters">white space character</span>, increase
<var>pos</var> by one (1) and go back to the previous step.

<li>If the <var>pos</var>th character in <var>data</var> is
<code>"</code>, follow the substeps below:

<ol>

<li>Increase <var>pos</var> by one (1).

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, abort these substeps.

<li>Otherwise, if the <var>pos</var>th character in <var>data</var> is
<code>"</code>, abort these substeps.

<li>Otherwise, if the <var>pos</var>th character in <var>data</var> is
<code>\</code>, follow the substeps below:

<ol>

<li>Increase <var>pos</var> by one (1).

<li>If <var>pos</var> is greater than or equal to the length of
<var>data</var>, abort these substeps.

<li>Otherwise, append the <var>pos</var>th character in
<var>data</var> to <var>cell quoted</var>.

</ol>

<li>Otherwise, append the <var>pos</var>th character in
<var>data</var> to <var>cell quoted</var>.

<li>Go back to the first substep in these substeps.

</ol>

<li>While <var>pos</var> is less than the length of <var>data</var>, run
the following substeps:

<ol>

<li>If the <var>pos</var>th character in <code>data</code> is
<code>,</code>, abort these substeps. <!-- without increasing
<var>pos</var> -->

<li>Append the <var>pos</var>th character in <code>data</code> to
<var>cell</var>.

<li>Increase <var>pos</var> by one (1).

</ol>

<li>Remove <span>white space characters</span> at the end of
<var>data</var>, if any.

<li>If <var>cell</var> is equal to <code>==</code>, emit a <span>table
colspan cell token</span> and go back to the step labeled <span
title=tokenize-table-row-loop><i>LOOP</i></span>.

<li>Prepend <var>cell quoted</var> to <var>cell</var>.

<li>Emit a <span>table cell start token</span>.

<li>Run the <span>algorithm to tokenize a text</span> with
<var>cell</var>.

<li>Emit a <span>table cell end token</span>.

<li>Go back to the step labeled <span
title=tokenize-table-row-loop><i>LOOP</i></span>.

</ol>

</div>

<div class=section>
<h4>Tokenization of a text</h4>

<p>The <dfn>algorithm to tokenize a text</dfn> <var>data</var> is as
follows:

<ol>

<li>If <var>data</var> begins with <code>[</code> followed by one or
more <span>digits</span> followed by <code>]</code>, run the following
steps:

<ol>

<li>Let <var>number</var> be the <span>digits</span> in the matched
substring.

<li>Remove the matched substring frm <var>data</var>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>anchor-end</code>,
<span title=element-namespace>namespace</span> is the
<span>SuikaWiki/0.9 namespace</span>, <span
title=element-anchor-attribute>anchor attribute</span> is
<var>number</var>, and <span title=element-content>content</span> is
<code>[</code> followed by <var>number</var> followed by
<code>]</code>.

</ol>

<li>While the length of <var>data</var> is not zero (0), run the
appropriate steps:

<dl class=switch>

<dt>If <var>data</var> begins with <code>[[#</code>, followed by one
or more <span>lowercase letters</span> or U+002D <code
class=charname>HYPHEN-MINUS</span>

<dd>

<ol>

<li>Let <var title>name</var> be the <span>lowercase letters</span>
and U+002D <code class=charname>HYPHEN-MINUS</code> in the matched
substring.

<li>Remove the matched substring from <var>data</var>.

<li>Let <var title>id</var> be null.

<li>Let <var>parameters</var> be an empty list.

<li>If <var>data</var> begins with a <span>class specification</span>,
run the following substeps:

<ol>

<li>Set the <var title>id</var> to the <span title="body of a class
specification">body</span> of the <span>class specification</span>.

<li>Remove the class specification from <var>data</var>.

</ol>

<li>While the first character of <var>data</var> is <code>:</code>,
run the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>]]</code>, abort
these substeps.

<li>Let <var title>parameter</var> be the empty string.

<li>If <var title>data</var> is empty, append <var
title>parameter</var> to <var title>parameters</var> and abort these
substeps.

<li>If the first character of <var title>data</var> is <code>'</code>,
run the following steps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these substeps.

<li>If the first character of <var>data</var> is <code>'</code>, abort
these substeps.

<li>If the first character of <var>data</var> is <code>\</code>, run
the following substeps:

<ol>

<li>Remove the first character of <var title>data</var>.

<li>If <var title>data</var> is empty, abort these substeps.

<li>Append the first character of <var>data</var> to <var
title>parameter</var>.

</ol>

<li>Otherwise, append the first character of <var title>data</var> to
<var title>parameter</var>.

<li>Go back to the first substep in these substeps.

</ol>

<li>Otherwise, run the following steps:

<ol>

<li>If <var title>data</var> is empty, or if the first character of
<var title>data</var> is <code>:</code>, abort these substeps.

<li>Append the first character of <var title>data</var> to <var
title>parameter</var>.

<li>Remove the first character of <var title>data</var>.

<li>Go back to the first substep of these substeps.

</ol>

<li>Append <var title>parameter</var> to <var title>parameters</var>.

</ol>

<li>If the length of <var>data</var> is greater than one (1) and the
first two characters of <var>data</var> are <code>]]</code>, remove
these characters from <var>data</var>.

<li>Emit a <span>form token</span> whose <span
title=form-name>name</span> is <var title>name</var>, <span
title=form-id>id</span> is <var title>id</var>, and <span
title=form-parameters>parameters</span> is <var
title>parameters</span>.

</ol>

<dt>Otherwise, if the <var>data</var> begins with <code>[[</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline start tag token</span>.

</ol>

<dt>If <var>data</var> begins with <code>[</code>, followed by one or
more <span>uppercase letters</span>, optionally followed by a
<span>class specification</span>, optionally followed by a
<span>language specification</span>, followed by <code>[</code>

<dd>

<ol>

<li>Let <var>tag name</var> be the <span>uppercase letters</span> in
the matched substring of <var>data</var>.

<li>Let <var>classes</var> be the <span title="body of a class
specification">body</span> of the <span>class specification</span> in
the matched substring of <var>data</var>, if any, or null, otherwise.

<li>Let <var>language</var> be the <span title="body of a language
specification">body</span> of the <span>language specification</span>
in the matched substring of <var>data</var>, if any, or null,
otherwise.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline start tag token</span> whose <span
title=inline-start-tag-tag-name>tag name</span> is <var>tag
name</var>, <span title=inline-start-tag-classes>classes</span> is
<var>classes</var>, and <span
title=inline-start-tag-language>language</span> is
<var>language</var>.

</ol>

<dt>If <var>data</var> begins with <code>]]</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline end tag token</span>.

</ol>

<dt>If <var>data</var> begins with <code>]&lt;</code>, followed by one
or more <span>scheme characters</span>, followed by <code>:</code>

<dd>Remove the matched substring from <var>data</var> and then act as
if the first two character of the original <var>data</var> before the
removal were <code>&lt;</code> instead of <code>]&lt;</code>, except
that the emitted token is an <span>inline end tag token</span> instead
of an <span>element token</span>.  The <span
title=inline-end-tag-res-scheme-attribute>resScheme attribute</span>
of the token <em class=rfc2119>MUST</em> be the <span
title=element-res-scheme-attribute>resScheme attribute</span> of the
token that would be emitted if the first two character were
<code>&lt;</code>.  The <span
title=inline-end-tag-res-parameter-attribute>resParameter
attribute</span> of the token <em class=rfc2119>MUST</em> be the <span
title=element-res-parameter-attribute>resParameter attribute</span> of
the token that would be emitted if the first two character were
<code>&lt;</code>.

<dt>If <var>data</var> begins with <code>]>></code> followed by one or
more <span>digits</span>, followed by <code>]</code>

<dd>

<ol>

<li>Let <var>number</var> be the <span>digits</span> in the matched
substring.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline end tag token</span> whose <span
title=inline-end-tag-anchor>anchor</span> is <var>number</var>.

</ol>

<dt>If <var>data</var> begins with <code>]</code> followed by zero or
more <span>white space characters</span> followed by <code>[</code>

<dt>If <var>data</var> begins with <code>]</code> followed by zero or
more <span>white space characters</span> followed by a <span>language
specification</span> followed by <code>[</code>

<dd>

<ol>

<li>Let <var title>lang</var> be the <span title="body of a language
specification">body</span> of the <span>language specification</span>
in the matched substring of <var title>data</var>, if any, or null,
otherwise.

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>inline middle tag token</span> whose <span
title=inline-middle-tag-language>language</span> is <var
title>lang</var>.

</ol>

<dt>If <var>data</var> begins with <code>&lt;</code>, followed by one
or more <span>scheme characters</span>, followed by <code>:</code>

<dd>

<ol>

<li>Let <var>scheme</var> be the <span>scheme characters</span> part
of the matched substring.

<li>Remove the matched substring from <var>data</var>.

<li>Let <var title>value</var> be the empty string.

<li>Run the following steps:

<ol>

<li>If <var>data</var> is empty, abort these steps.

<li>If the first character of <var>data</var> is <code>></code>,
remove the first character of <var>data</var> and abort these steps.

<li>If the first character of <var>data</var> is <code>"</code>, run
the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>If <var>data</var> is empty, abort these steps.

<li>If the first character of <var>data</var> is <code>"</code>,
remove the first character of <var>data</var> and abort these
substeps.

<li>If the first character of <var>data</var> is <code>\</code>, run
the following substeps:

<ol>

<li>Remove the first character of <var title>data</var>.

<li>If <var title>data</var> is empty, abort these steps.

<li>Append the first character of <var title>data</var> to <var
title>value</var>.

</ol>

<li>Otherwise, append the first character of <var title>data</var> to
<var title>value</var>.

<li>Return back to the first substep of these substeps.

</ol>

<li>Otherwise, run the following substeps:

<ol>

<li>Append the first character of <var title>data</var> to <var
title>value</var>.

<li>Remove the first character of <var title>data</var>.

</ol>

<li>Go back to the first substeps in these substeps.

</ol>

<li>Let <var title>content</var> be <var title>scheme</var> followed
by <code>:</code> followed by <var title>value</var>.

<li>If <var title>scheme</var> does <em>not</em> contain one of
<span>uppercase letters</span>, set <var title>value</var> to <var
title>content</var> and set <var title>scheme</var> to
<code>URI</code>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is
<code>anchor-external</code>, <span
title=element-namespace>namespace</span> is the <span>SuikaWiki/0.9
namespace</span>, <span title=element-res-scheme-attribute>resScheme
attribute</span> is <var title>scheme</var>, <span
title=element-res-parameter-attribute>resParameter attribute</span> is
<var title>value</var>, and <span title=element-content>content</span>
is <var title>content</var>.

</ol>

<dt>If <var>data</var> begins with <code>'''</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit a <span>strong token</span>.

</ol>

<dt>Otherwise, if <var>data</var> begins with <code>''</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>Emit an <span>emphasis token</span>.

</ol>

<dt>If <var>data</var> begins with <code>>></code> followed by one or
more <span>digits</span>

<dd>

<ol>

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is
<code>anchor-internal</code>, <span
title=element-namespace>namespace</span> is the <span>SuikaWiki/0.9
namespace</span>, <span title=element-anchor-attribute>anchor
attribute</span> is the <span>digits</span> part of the matched
substring, and <span title=element-content>content</span> is the
matched substring.

<li>Remove the matched substring from <var>data</var>.

</ol>

<dt>If <var>data</var> begins with <code>__&amp;&amp;</code>

<dd>

<ol>

<li>Remove the matched substring from <var>data</var>.

<li>If <var>data</var> begins with <code>&amp;&amp;__</code>, or if
<var>data</var> does not contain <code>&amp;&amp;__</code> as a
substring, emit four <span title="character token">character
tokens</span> whose <span title=character-data>data</span> are
<code>_</code>, <code>_</code>, <code>&amp;</code>, and
<code>&amp;</code> respectively and remove the first four characters
of <var>data</var> and abort these steps.

<li>Let <var title>name</var> be the substring of <var
title>data</var> between the beginning of the string and the first
occurence of <code>&amp;&amp;__</code> (exclusive).

<li>Remove the first occurence of <code>&amp;&amp;__</code> and any
character before it from <var title>data</var>.

<li>Emit an <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>replace</code>,
<span title=element-namespace>namespace</span> is the
<span>SuikaWiki/0.9 namespace</span>, <span
title=element-by-attribute>by attribute</span> is <var
title>name</var>.

</ol>

<dt>Otherwise

<dd>

<ol>

<li>Emit a <span>character token</span> whose <span
title=character-data>data</span> set to the first character of
<var>data</var>.

<li>Remove the first character of <var>data</var>.

</ol>

</dl>

</ol>

</div>

<div class=section>
<h4>Parsing a magic line</h4>

<p>To <dfn>parse a magic line</dfn> <var>data</var>, the following
steps <em class=rfc2119>MUST</em> be used:

<ol>

<li>Remove the first two characters of <var>data</var>.  (It will be
<code>#?</code>.)

<li>If there are one or more characters that are not <span>white space
characters</span>, run the following substeps:

<ol>

<li>Let <var title>name</var> be those characters.

<li>Let <var title>version</var> be null.

<li>Remove those characters from <var title>data</var>.

<li>If <var title>name</var> contains <code>/</code>, set the
substring after the first occurence of the character to <var
title>version</var>.  Note that <var title>version</var> might become
the empty string.  Remove the <code>/</code> character and the
substring after the character from <var title>name</var>.

<li>Set the <code title=attr-sw-name>Name</code> <span>content
attribute</span> of the <span>document element</span> in the
<span>SuikaWiki/0.9 namespace</span> to <var title>name</var>.

<li>If <var>version</var> is <em>not</em> null, set the <code
title=attr-sw-name>Version</code> <span>content attribute</span> of
the <span>document element</span> in the <span>SuikaWiki/0.9
namespace</span> to <var title>version</var>.

</ol>

<li>Run the following substeps:

<ol>

<li>If <var>data</var> is empty, abort these substeps.

<li>If the first character of <var>data</var> is a <span title="white
space characters">white space character</span>, remove the character
from <var>data</var> and go back to the first substep of these
substeps.

<li>Let <var title>name</var> be the empty string.

<li>If <var title>data</var> begins with one or more characters that
are not <code>=</code>, set <var title>name</var> to those characters
and remove those characters from <var title>data</var>.

<li>Let <var title>parameter</var> be a newly created <code
title=element-sw-parameter>parameter</code> element in the
<span>SuikaWiki/0.9 namespace</span> and set the <code
title=attr-sw-parameter-name>name</code> <span>content
attribute</span> of <var title>parameter</var> to <var
title>name</var>.

<li>Remove the first character of <var>data</var>.  (It will be
<code>=</code>.)

<li>If the first character of <var>data</var>, if any, is
<code>"</code>, remove that character from <var>data</var>.

<li>Run the following substeps:

<ol>

<li>Let <var title>value</var> be the empty string.

<li>If <var title>data</var> is empty, or if the first character of
<var title>data</var> is <code>"</code>, create a <code
title=element-sw-value>value</code> element in the <span>SuikaWiki/0.9
namespace</span>, set the <code>textContent</code> <span>DOM
attribute</span> of the node to <var title>value</var>, and append the
node to <var title>parameter</var>.

<li>If the first character of <var title>data</var>, if any, is
<code>\</code>, run the following substeps:

<ol>

<li>Remove the first character of <var>data</var>.

<li>Append the first character of <var>data</var>, if any, to
<var title>value</var>.

</ol>

<li>Otherwise, append the first character of <var>data</var> to
<var title>value</var>.

<li>Go back to the second substep of these substeps.

</ol>

<li>If the first character of <var>data</var>, if any, is
<code>"</code>, remove that character from <var>data</var>.

<li>Append <var title>parameter</var> to the <span>head
element</span>.

<li>Go back to the first substep of these substeps.

</ol>

</ol>

</div>

<div class=section>
<h4>Tree construction</h4>

<p>The <dfn>tree construction</dfn> stage constructs a DOM tree from a
series of <span title=token>tokens</span> emitted by the
<span>tokenization</span> stage.  The <span>tree construction</span>
stage has two state variables: <span>insertion mode</span> and
<span>stack of open elements</span>.

<p>The <dfn>insertion mode</dfn> is one of "<span>in section</span>",
"<span>in table row</span>", or "<span>in paragraph</span>".  The
default that <em class=rfc2119>MUST</em> be used when the <span>tree
construction</span> begins is the "<span>in section</span>"
<span>insertion mode</span>.  The rules for these <span
title="insertion mode">insertion modes</span> are described in the
subsections below.

<p>When the algorithm below says that the <span title="SWML text
serialization parser">parser</span> is to do something “<dfn>using
the rules for</dfn> the <var>m</var> <span>insertion mode</span>”,
the <span title="SWML text serialization parser">parser</span> <em
class=rfc2119>MUST</em> use the rules described under the <var>m</var>
<span>insertion mode</span>'s section, but <em class=rfc2119>MUST</em>
leave the <span>insertion mode</span> unchanged.

<p>The <dfn>stack of open elements</dfn> contains tuples of
(<dfn>element node</dfn>, <dfn>section depth</dfn>, <dfn>quotation
depth</dfn>, <dfn>list depth</dfn>).  These stack grows downdards; the
topmost entry on the stack is the first one added to the stack, and
the bottommost entry of the stack is the most recently added entry in
the stack.  It initially contains only a tuple: (the <span>body
element</span>, <code>0</code>, <code>0</code>, <code>0</code>).  When
an entry is pushed to the <span>stack of open elements</span>, the
items of the new tupple is set to the same values as the bottommost
tuple unless otherwise specified.

<p>The <dfn>current element</dfn> is the <span>element node</span>
of the bottommost entry in the <span>stack of open elements</span>.

<p><dfn>Structural elements</dfn> are elements whose local name is one
of <code title=element-body>body</code>, <code>section</code>,
<code>insert</code>, <code>delete</code>, <code>blockquote</code>,
<code>h1</code>, <code>ul</code>, <code>ol</code>, <code>dl</code>,
<code>li</code>, <code>dt</code>, <code>dd</code>, <code>table</code>,
<code>tbody</code>, <code>tr</code>, <code>td</code>, <code>p</code>,
<code>comment-p</code>, <code>ed</code>, or <code>pre</code>.

<div class=section>
<h5>The "<span>in section</span>" <span>insertion mode</span></h5>

<p>In the "<dfn>in section</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>heading start token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<em>not</em> one of <code title=element-body>body</code>,
<code>section</code>, <code>insert</code>, or <code>delete</code>, pop
the element off the <span>stack of open elements</span> and follow
this substep again.

<li>Let <var>current depth</var> be the <span>section depth</span> of
the bottommost entry in the <span>stack of open elements</span>.

<li>If <span title=heading-start-depth>depth</span> is less than or
equal to the <var>current depth</var>, pop the element off the
<span>stack of open elements</span> and go back to the first substep
of these substeps.

<li>Otherwise, if <span title=heading-start-depth>depth</span> is
greater than <var>current depth</var> + 1, create a
<code>section</code> element in the <span>HTML namespace</span>,
append the element created to the <span>current element</span>, push
the element created to the <span>stack of open elements</span> with
<span>section depth</span> set to <var>current depth</var> + 1,
<span>quotation depth</span> set to zero (0), and <span>list
depth</span> set to zero (0), and go back to the first substep of
these substeps.

<li>Create a <code>section</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to <span
title=heading-start-depth>depth</span>, <span>quotation depth</span>
set to zero (0), and <span>list depth</span> set to zero (0).

<li>Create a <code>h1</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is <code>INS</code>

<dd>

<ol>

<li>Create an <code>insert</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to zero (0),
<span>quotation depth</span> set to zero (0), and <span>list
depth</span> set to zero (0).

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code title=attr-class>class</code> <span>content attribute</span> of
the element created to <span
title=block-start-tag-classes>classes</span>.

</ol>

<dt>A <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is <code>DEL</code>

<dd>

<ol>

<li>Create an <code>delete</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to zero (0),
<span>quotation depth</span> set to zero (0), and <span>list
depth</span> set to zero (0).

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code title=attr-class>class</code> <span>content attribute</span> of
the element created to <span
title=block-start-tag-classes>classes</span>.

</ol>

<dt>A <span>quotation start token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<em>not</em> one of <code>blockquote</code>, <code
title=element-body>body</code>, <code>section</code>,
<code>insert</code>, or <code>delete</code>, pop the element off the
<span>stack of open elements</span> and follow this substep again.

<li>Let <var>current depth</var> be the <span>quotation depth</span>
of the bottommost entry in the <span>stack of open elements</span>.

<li>If <span title=quotation-start-depth>depth</span> is less than or
equal to the <var>current depth</var>, pop the element off the
<span>stack of open elements</span> and go back to the first substep
of these substeps.

<li>Otherwise, if <span title=quotation-start-depth>depth</span> is
greater than <var>current depth</var> + 1, create a
<code>blockquote</code> element in the <span>HTML namespace</span>,
append the element created to the <span>current element</span>, push
the element created to the <span>stack of open elements</span> with
<span>section depth</span> set to zero (0), <span>quotation
depth</span> set to <var>current depth</var> + 1, and <span>list
depth</span> set to zero (0), and go back to the first substep of
these substeps.

<li>Create a <code>blockquote</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span> with <span>section depth</span> set to zero (0),
<span>quotation depth</span> set to <span
title=quotation-start-depth>depth</span>, and <span>list depth</span>
set to zero (0).

</ol>

<dt>A <span>list start token</span>

<dd>

<ol>

<li>Let <var>current depth</var> be the <span>list depth</span> of the
<span>current element</span>.

<li>Let <var>inserted depth</var> be the length of <span
title=list-start-depth>depth</span> of the <span>list start
token</span>.

<li>If <var>current depth</var> is greater than <var>inserted
depth</var>, pop the <span>current element</span> off the <span>stack
of open elements</span> and go back to the first substep of these
substeps.

<li>If <var>current depth</var> is less than <var>inserted
depth</var>, run the following substeps:

<ol>

<li>Let <var>type</var> be the character at the index equal to
<var>current depth</var> in <span title=list-start-depth>depth</span>
of the <span>list start token</span>, where the index of the first
character in <span title=list-start-depth>depth</span> is zero (0).

<li>If <var>type</var> is <code>-</code>, create a <code>ul</code>
element in the <span>HTML namespace</span>.

<li>Otherwise, create a <code>ol</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>, with <span>list depth</span> set to <var>current
depth</var> + 1.

<li>If <var>current depth</var> + 1 is less than <var>inserted
depth</var>, run the following substeps:

<ol>

<li>Create a <code>li</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<li>Go back to the first substep for the <span>list start
token</span>.

</ol>

<li>If the <span>list depth</span> is equal to <var>inserted
depth</var> and the local name of the <span>current element</span> is
<em>not</em> <code>ul</code> or <code>ol</code>, pop the <span>current
element</span> off the <span>stack of open elements</span>.

<li>Create a <code>li</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>labeled list start token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<code>dd</code>, pop the element off the <span>stack of open
elements</span>.

<li>If the local name of the <span>current element</span> is
<em>not</em> <code>dl</code>, create a <code>dl</code> element in the
<span>HTML namespace</span>, append the element created to the
<span>current element</span>, and push the element created to the
<span>stack of open elements</span>.

<li>Create a <code>dt</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>table row start token</span>

<dd>

<ol>

<li>Create a <code>table</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Create a <code>tbody</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Create a <code>tbody</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in table row</span>" <span>insertion
mode</span>.

</ol>

<dt>A <span>block start tag token</span> whose <span
title=block-start-tag-tag-name>tag name</span> is <code>PRE</code>

<dd>

<ol>

<li>Create a <code>pre</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code title=attr-class>class</code> <span>content attribute</span> of
the element created to <span
title=block-start-tag-classes>classes</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>preformatted start token</span>

<dd>

<ol>

<li>Create a <code>pre</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>If the <span>token</span>'s <span
title=block-start-tag-classes>classes</span> is not null, set the
<code title=attr-class>class</code> <span>content attribute</span> of
the element created to <span
title=block-start-tag-classes>classes</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>comment paragraph start token</span>

<dd>

<ol>

<li>Create a <code>comment-p</code> element in the
<span>SuikaWiki/0.10 namespace</span>.


<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>A <span>editorial note start token</span>

<dd>

<ol>

<li>Create a <code>ed</code> element in the <span>SuikaWiki/0.10
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

<dt>An <span>empty line token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<em>not</em> one of <code title=element-body>body</code>,
<code>section</code>, <code>insert</code>, or <code>delete</code>, pop
the element off the <span>stack of open elements</span> and follow
this substep again.

</ol>

<dt>A <span>block end tag token</span> whose <span
title=block-end-tag-tag-name>tag name</span> is <code>INS</code>

<dd>If the <span>stack of open elements</span> contains an element
whose local name is <code>insert</code>, pop the <span>current
element</span> off the <span>stack of open elements</span> until such
an element whose local name is <code>insert</code> has been popped
from the <span>stack of open elements</span>.

<dt>A <span>block end tag token</span> whose <span
title=block-end-tag-tag-name>tag name</span> is <code>DEL</code>

<dd>If the <span>stack of open elements</span> contains an element
whose local name is <code>delete</code>, pop the <span>current
element</span> off the <span>stack of open elements</span> until such
an element whose local name is <code>delete</code> has been popped
from the <span>stack of open elements</span>.

<dt>A <span>form token</span>

<dt>An <span>element token</span> whose <span
title=element-local-name>local name</span> is <code>replace</code>

<dd>Process the token <span>using the rules for</span> the "<span>in
paragraph</span>" <span>insertion mode</span>.

<dt>An <span>end-of-file token</span>

<dd>Now the <code title=dom-document>Document</code> has been
constructed.  Abort the <span title="SWML text serialization
parser">parser</span>.

<dt>A <span>labeled list middle token</span>, <span>heading end
token</span>, <span>preformatted end token</span>, <span>table row end
token</span>, <span>table cell start token</span>, <span>table cell
end token</span>, or <span>table colspan cell token</span> <!-- they
should not appear in this insertion mode -->

<dd>Ignore the token.

<dt>Anything else

<dd>

<ol>

<li>Create a <code>p</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

<li>Switch to the "<span>in paragraph</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</ol>

</dl>

</div>

<div class=section>
<h5>The "<span>in table row</span>" <span>insertion mode</span></h5>

<p>In the "<dfn>in table row</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>table cell start token</span>

<dd>

<ol>

<li>Create a <code>td</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>table colspan cell token</span>

<dd>

<ol>

<li>If the local name of the node returned by the
<code>lastChild</code> <span>DOM attribute</span> of the <span>current
element</span>, if any, is <code>td</code>, increase the value of
<code>colspan</code> <span>DOM attribute</span> of the node by one (1)
and abort these substeps.

<li>Create a <code>td</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>A <span>table row end token</span>

<dd>If the local name of the <span>current element</span> is
<code>tr</code>, pop the element off the <span>stack of open
elements</span>.

<dt>A <span>table row start token</span>

<dd>

<ol>

<li>Create a <code>tr</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>Anything else

<dd>Switch to the "<span>in section</span>" <span>insertion
mode</span> and reprocess the <span>token</span>.

</dl>

</div>

<div class=sectio5>
<h5>The "<span>in paragraph</span>" <span>insertion mode</span></h5>

<p>In the "<dfn>in paragraph</dfn>" <span>insertion mode</span>, a
<span>token</span> <em class=rfc2119>MUST</em> be processed as
follows:

<dl class=switch>

<dt>A <span>character token</span>

<dd><span title="append a character">Append the character</span> in
<span title=character-data>data</span> of the <span>token</span> to
the <span>current element</span>.

<dt>An <span>inline start tag token</span> whose <span
title=inline-start-tag-tag-name>tag name</span> is null

<dd>

<ol>

<li>Create an <span>anchor</span> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>Any other <span>inline start tag token</span>

<dd>

<ol>

<li>Create an element.  The namespace and local name of the element is
determined according to the <span title=inline-start-tag-tag-name>tag
name</span> of the <span>inline start tag token</span> as shown in the
following table:

<table>

<thead>

<tr>

<th scope=col><span title=inline-start-tag-tag-name>Tag name</span>

<th scope=col>Namespace

<th scope=col>Local name

<tbody>

<tr>
<th><code>AA</code>
<th>The <span>AA namespace</span>
<th><code>aa</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code>ABBR</code>
<th>The <span>HTML namespace</span>
<th><code>abbr</code>

<tr>
<th><code>CITE</code>
<th>The <span>HTML namespace</span>
<th><code>cite</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code>CODE</code>
<th>The <span>HTML namespace</span>
<th><code>code</code>

<tr>
<th><code>CSECTION</code>
<th>The <span>SuikaWiki/0.10 namespace</span>
<th><code>csection</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code>DEL</code>
<th>The <span>HTML namespace</span>
<th><code>del</code>

<tr>
<th><code>DFN</code>
<th>The <span>HTML namespace</span>
<th><code>dfn</code>

<tr>
<th><code>INS</code>
<th>The <span>HTML namespace</span>
<th><code>ins</code>

<tr>
<th><code>KBD</code>
<th>The <span>HTML namespace</span>
<th><code>kbd</code>

<tr>
<th><code>KEY</code>
<th>The <span>SuikaWiki/0.10 namespace</span>
<th><code>key</code>

<tr>
<th><code>Q</code>
<th>The <span>HTML namespace</span>
<th><code>q</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code>QN</code>
<th>The <span>SuikaWiki/0.10 namespace</span>
<th><code>qn</code>
<!-- SuikaWiki/0.10 -->

<tr>
<th><code>RUBY</code>
<th>The <span>HTML namespace</span>
<th><code>ruby</code>

<tr>
<th><code>RUBYB</code>
<th>The <span>SuikaWiki/0.9 namespace</span>
<th><code>rubyb</code>

<tr>
<th><code>SAMP</code>
<th>The <span>HTML namespace</span>
<th><code>samp</code>

<tr>
<th><code>SPAN</code>
<th>The <span>HTML namespace</span>
<th><code>span</code>

<tr>
<th><code>SRC</code>
<th>The <span>SuikaWiki/0.10 namespace</span>
<th><code>src</code>

<tr>
<th><code>SUB</code>
<th>The <span>HTML namespace</span>
<th><code>sub</code>

<tr>
<th><code>SUP</code>
<th>The <span>HTML namespace</span>
<th><code>sup</code>

<tr>
<th><code>TIME</code>
<th>The <span>HTML namespace</span>
<th><code>time</code>
<!-- SuikaWiki/0.10 (undocumented, not implemented in SuikaWiki3) -->

<tr>
<th><code>VAR</code>
<th>The <span>HTML namespace</span>
<th><code>var</code>

<tr>
<th><code>WEAK</code>
<th>The <span>SuikaWiki/0.9 namespace</span>
<th><code>weak</code>

</table>

<li>If the <span>token</span>'s <span
title=inline-start-tag-classes>classes</span> is not null, set the
<code title=attr-class>class</code> <span>content attribute</span> of
the element created to <span
title=inline-start-tag-classes>classes</span>.

<li>If the <span>token</span>'s <span
title=inline-start-tag-language>language</span> is not null, set the
<code title=attr-xml-lang>lang</code> <span>content attribute</span>
in the <span>XML namespace</span> of the element created to <span
title=inline-start-tag-language>language</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>inline middle tag token</span>

<dd>

<ol>

<li>Let <var>local name</var> be <code>title</code>.

<li>Let <var>namespace</var> be the <span>SuikaWiki/0.10
namespace</span>.

<li>If the local name of the <span>current element</span> is
<code>title</code> or <code>nsuri</code>, set <var>local name</var> to
<code>attrvalue</code> and pop the <span>current element</span> off
the <span>stack of open elements</span>.

<li>If the local name of the <span>current element</span> is
<code>qn</code>, set <var>local name</var> to <code>nsuri</code>.

<li>If the local name of the <span>current element</span> is
<code>ruby</code> or <code>rubyb</code>, set <var>local name</var> to
<code>rt</code> and set <var>namespace</var> to the <span>HTML
namespace</span>.

<li>Create an element whose local name <var>local name</var> in the
<var>namespace</var>.

<li>If the <span>token</span>'s <span
title=inline-middle-tag-language>language</span> is not null, set the
<code title=attr-xml-lang>lang</code> <span>content attribute</span>
in the <span>XML namespace</span> of the element created to <span
title=inline-middle-tag-language>language</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>inline end tag token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is one of
<code>rt</code>, <code>title</code>, <code>nsuri</code>, or
<code>attrvalue</code>, pop the element off the <span>stack of open
elements</span>.

<li>If the <span>current element</span> is one of <span>structural
elements</span>, or if the local name of the <span>current
element</span> is <code>strong</code> or <code>em</code>, run the
following substeps:

<ol>

<li>If <span title=inline-end-tag-res-scheme-attribute>resScheme
attribute</span> is <em>not</em> null, create an
<code>anchor-external</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Otherwise, create a <code>anchor-internal</code> element in the
<span>SuikaWiki/0.9 namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Set the <code>textContent</code> <span>DOM attribute</span> of the
element created to <code>]]</code>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<li>If <span title=inline-end-tag-anchor-attribute>anchor
attribute</span> of the <span>token</span> is <em>not</em> null, set
the <code title=attr-sw-anchor>anchor</code> <span>content
attribute</span> in the <span>SuikaWiki/0.9 namespace</span> of the
<span>current element</span> to <span
title=inline-end-tag-anchor-attribute>anchor attribute</span> of the
<span>token</span>.

<li>If <span title=inline-end-tag-res-scheme-attribute>resScheme
attribute</span> of the <span>token</span> is <em>not</em> null, set
the <code title=attr-sw-res-scheme>resScheme</code> <span>content
attribute</span> in the <span>SuikaWiki/0.9 namespace</span> of the
<span>current element</span> to <span
title=inline-end-tag-res-scheme-attribute>resScheme attribute</span>
of the <span>token</span>.

<li>If <span title=inline-end-tag-res-parameter-attribute>resParameter
attribute</span> of the <span>token</span> is <em>not</em> null, set
the <code title=attr-sw-res-parameter>resParameter</code>
<span>content attribute</span> in the <span>SuikaWiki/0.9
namespace</span> of the <span>current element</span> to <span
title=inline-end-tag-res-parameter-attribute>resParameter
attribute</span> of the <span>token</span>.

<li>Pop the <span>current element</span> off the <span>stack of open
elements</span>.

</ol>

<dt>A <span>strong token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<code>strong</code>, pop the element off the <span>stack of open
elements</span> and abort these substeps.

<li>Create a <code>strong</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>An <span>emphasis token</span>

<dd>

<ol>

<li>If the local name of the <span>current element</span> is
<code>em</code>, pop the element off the <span>stack of open
elements</span> and abort these substeps.

<li>Create an <code>em</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>form token</span> whose <span title=form-name>name</span>
is <code>form</code>

<dd>

<ol>

<li>Create a <code>form</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>If <span title=form-id>id</span> of the <span>form token</span> is
<em>not</em> null, set the <code title=attr-sw-id>id</code>
<span>content attribute</span> of the element created to <span
title=form-id>id</span> of the <span>form token</span>.

<li>Set the <code title=attr-sw-form-input>input</code> <span>content
attribute</span> of the element created to the first item in <span
title=form-parameters>parameters</span> of the <span>form
token</span>, if any, or the empty string otherwise.

<li>Set the <code title=attr-sw-form-template>template</code>
<span>content attribute</span> of the element created to the second
item in <span title=form-parameters>parameters</span> of the
<span>form token</span>, if any, or the empty string otherwise.

<li>Set the <code title=attr-sw-form-option>option</code>
<span>content attribute</span> of the element created to the third
item in <span title=form-parameters>parameters</span> of the
<span>form token</span>, if any, or the empty string otherwise.

<li>If the <span title=form-parameters>parameters</span> contains four
or more items, set the <code
title=attr-sw-form-parameter>parameter</code> <span>content
attribute</span> of the element created to the concatenation of items
in <span title=form-parameters>parameters</span>, separated by a
<code>:</code> character, in the same order.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>Any other <span>form token</span>

<dd>

<ol>

<li>Create a <code>form</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<li>Set the <code title=attr-sw-form-ref>ref</code> <span>content
attribute</span> of the element created to <span
title=form-name>name</span> of the <span>form token</span>.

<li>Set the <code title=form-id>id</code> of the <span>form
token</span> is <em>not</em> null, set the <code
title=attr-sw-id>id</code> <span>content attribute</span> of the
element created to <span title=form-id>id</span> of the <span>form
token</span>.

<li>If <span title=form-parameters>parameters</span> of <span>form
token</span> is not empty, set the <code
title=attr-sw-form-parameter>parameter</code> <span>content
attribute</span> of the element created to the concatenation of items
in <span title=form-parameters>parameters</span>, separated by a
<code>:</code> character, in the same order.  The result value might
be the empty string.

<li>Append the element created to the <span>current element</span>.

</ol>

<dt>An <span>element token</span>

<dd>

<ol>

<li>Create an element whose local name is <span
title=element-local-name>local name</span> of the <span>element
token</span> and namespace is <span
title=element-namespace>namespace</span> of the <span>element
token</span>.

<li>If <span title=element-anchor-attribute>anchor attribute</span> of
the <span>element token</span> is <em>not</em> null, set the <code
title=attr-sw-anchor>anchor</code> <span>content attribute</span> in
the <span>SuikaWiki/0.9 namespace</span> of the element created to
<span title=element-anchor-attribute>anchor attribute</span> of the
<span>element token</span>.

<li>If <span title=element-by-attribute>by attribute</span> of the
<span>element token</span> is <em>not</em> null, set the <code
title=attr-sw-replace-by>by</code> <span>content attribute</span> of
the element created to <span title=element-by-attribute>by
attribute</span> of the <span>element token</span>.

<li>If <span title=element-res-scheme-attribute>resScheme
attribute</span> of the <span>element token</span> is <em>not</em>
null, set the <code title=attr-sw-res-scheme>resScheme</code>
<span>content attribute</span> in the <span>SuikaWiki/0.9
namespace</span> of the element created to <span
title=element-res-scheme-attribute>resScheme attribute</span> of the
<span>element token</span>.

<li>If <span title=element-res-parameter-attribute>resParameter
attribute</span> of the <span>element token</span> is <em>not</em>
null, set the <code title=attr-sw-res-parameter>resParameter</code>
<span>content attribute</span> in the <span>SuikaWiki/0.9
namespace</span> of the element created to <span
title=element-res-parameter-attribute>resParameter attribute</span> of
the <span>element token</span>.

<li>If <span title=element-content>content</span> of the <span>element
token</span> is <em>not</em> null, set the <code>textContent</code>
<span>DOM attribute</span> of the element created to <span
title=element-content>content</span> of the <span>element
token</span>.

<li>Append the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>labeled list middle token</span>

<dd>

<ol>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>If the local name of the <span>current element</span> is
<code>dt</code>, pop the element off the <span>stack of open
elements</span>.

<li>Create a <code>dd</code> element in the <span>HTML
namespace</span>.

<li>Append the element created to the <span>current element</span>.

<li>Push the element created to the <span>stack of open
elements</span>.

</ol>

<dt>A <span>heading end token</span>

<dd>

<ol>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>If the local name of the <span>current element</span> is
<code>h1</code>, pop the element off the <span>stack of open
elements</span>.

</ol>

<dt>A <span>block end tag token</span> whose <span
title=block-end-tag-tag-name>tag name</span> is <code>PRE</code>

<dt>A <span>preformatted end token</span>

<dd>

<ol>

<li>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

<li>If the local name of the <span>current element</span> is
<code>pre</code>, pop the element off the <span>stack of open
elements</span>.

</ol>

<dt>Anything else

<dd>If the <span>current element</span> is <em>not</em> one of
<span>structural elements</span>, pop the element off the <span>stack
of open elements</span> and follow this substep again.

</dl>

</div>

</div>

</div>

<div class=section>
<h3>Serializing <span>SWML text serialization</span> documents</h3>

<p class=ed>...
</div>

<div class=section>
<h3>The <code>text/x-suikawiki</code> Internet Media Type</h3>

<p class=ed>...
</div>

</div>

<div class=section>
<h2>The <dfn>SWML XML serialization</dfn></h2>

<p class=ed>...

<div class=section>
<h3 class=ed>... xml media type</h3>

<p class=ed>
</div>

</div>

<div class=section>
<h2>Semantics of Elements and Attributes</h2>

<p>Elements and attributes in the <span>SuikaWiki/0.9 namespace</span>
and in the <span>SuikaWiki/0.10 namespace</span>, as well as
attributes in no namespace for elements in the <span>SuikaWiki/0.9
namespace</span> and in the <span>SuikaWiki/0.10 namespace</span>, <em
class=rfc2119>MUST NOT</em> be used in context where they are <dfn
title="allowed attributes">allowed</dfn>.

<div class="note memo">

<p>A namespaced attribute allowed in another specification can be used
on elements in the <span>SuikaWiki/0.9 namespace</span> and in the
<span>SuikaWiki/0.10 namespace</span>.  For example, a <dfn
title=attr-xml-lang><code>lang</code></dfn> attribute in the <span>XML
namespace</span> is allowed in the XML specification <span
class=ed>...</span>.  The <span>allowed attributes</span> entry in the
subsections below only lists attributes defined in this specification.

</div>

<p>Elements in the <span>SuikaWiki/0.9 namespace</span> and in the
<span>SuikaWiki/0.10 namespace</span> defined in this specification
<em class=rfc2119>MUST</em> conform to their <dfn>content model</dfn>.

<p>Inter-element whitespace <span class=ed>HTML5</span>, comment
nodes, and processing instruction nodes <em class=rfc2119>MUST</em> be
<span>ignored</span> when establishing whether an element matches its
content model or not.

<p>Elements in the <span>SuikaWiki/0.9 namespace</span> and in the
<span>SuikaWiki/0.10 namespace</span> <em class=rfc2119>MAY</em> be
orphan nodes (i.e. without a parent node).

<p>In the following subsections, attributes listed in the
<span>allowed attributes</span> entry <em class=rfc2119>MAY</em> be
specified to an element described in that subsection.

<p>Some elements belong to <dfn title=category>categories</dfn>.
Categories <dfn>flow content</dfn>, <dfn>phrasing content</dfn>, and
<dfn>metadata content</dfn> are defined in the HTML5 specification
<span class=ed>...</span>.

<p>Terms and algorithms <dfn>valid integer</dfn>, <dfn>rules for
parsing integers</dfn> are defined in the HTML5 specification <span
class=ed>...</span>.

<p>An attribute is said to be <dfn>specified</dfn> to an element if
the <code>hasAttributeNS</code> method invoked on the element with
appropriate arguments would return true.

<div class="note memo">

<p>That is, the term <span>specified</span> is irrelevant from the
<code title>specified</code> <span>DOM attribute</span>.

</div>

<div class=section>

<h3>The <dfn><code>anchor</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-anchor>anchor</code> in the
<span>SuikaWiki/0.9 namespace</span>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>anchor-internal</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd>Text.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-anchor>anchor</code> in the
<span>SuikaWiki/0.9 namespace</span>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>anchor-end</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd>Text.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-anchor>anchor</code> in the
<span>SuikaWiki/0.9 namespace</span>.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>anchor-external</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-res-parameter>resParameter</code> in the
<span>SuikaWiki/0.9 namespace</span>

<dd><code title=attr-sw-res-scheme>resScheme</code> in the
<span>SuikaWiki/0.9 namespace</span>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>delete</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn title=element-sw-document><code>document</code></dfn>
element in the <span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>A <code title=element-xhtml2-head>head</code> element in the
<span>XHTML2 namespace</span>, followed by a <code
title=element-xhtml2-body>body</code> element in the <span>XHTML2
namespace</span>, optionally followed by a <code>image</code> element
in the <span>SuikaWiki/0.9 namespace</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-name>Name</code> in the <span>SuikaWiki/0.9
namespace</span>

<dd><code title=attr-sw-version>Version</code> in the
<span>SuikaWiki/0.9 namespace</span>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>dr</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>A <code>dt</code> element in the <span>XHTML2 namespace</span>,
followed by a <code>dd</code> element in the <span>XHTML2
namespace</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>form</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd>Text.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-id>id</code>
<dd><code title=attr-sw-form-input>input</code>
<dd><code title=attr-sw-form-option>option</code>
<dd><code title=attr-sw-form-parameter>parameter</code>
<dd><code title=attr-sw-form-ref>ref</code>
<dd><code title=attr-sw-form-template>template</code>

</dl>

<p class=ed>... <dfn title=attr-sw-form-ref><code>ref</code></dfn>,
<dfn title=attr-sw-form-parameter><code>parameter</code></dfn>.

<hr>

<p class=ed>... <dfn
title=attr-sw-form-input><code>input</code></dfn>, <dfn
title=attr-sw-form-template><code>template</code></dfn>, <dfn
title=attr-sw-form-option><code>option</code>

</div>

<div class=section>

<h3>The <dfn><code>image</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>Text.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>insert</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Flow content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn title=element-sw-parameter><code>parameter</code></dfn>
element in the <span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Metadata content</span>.

<dt><span>Content model</span>

<dd>Zero or more <code title=element-sw-value>value</code> element in
the <span>SuikaWiki/0.9 namespace</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-parameter-name>name</code>

</dl>

<p class=ed>... <dfn title=attr-sw-parameter-name>name</dfn>

</div>

<div class=section>

<h3>The <dfn><code>replace</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd>Empty.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-replace-by>by</code>

</dl>

<p class=ed>... <dfn title=attr-sw-replace-by><code>by</code></dfn>

</div>

<div class=section>

<h3>The <dfn><code>rubyb</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, followed by a <code>rt</code>
element in the <span>HTML namespace</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-class>class</code>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>text</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>Text.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn title=element-sw-value><code>value</code></dfn> element
in the <span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd>Text.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>weak</code></dfn> element in the
<span>SuikaWiki/0.9 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-class>class</code>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>attrvalue</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>comment-p</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>csection</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-class>class</code>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>ed</code></dfn> element in the <span>SuikaWiki/0.10
namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Flow content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>key</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-class>class</code>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>nsuri</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>qn</code></dfn> element in the <span>SuikaWiki/0.10
namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>, optionally followed by a
<code>nsuri</code> element in the <span>SuikaWiki/0.10
namespace</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-class>class</code>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>qname</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>src</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd><span>Phrasing content</span>.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd><code title=attr-sw-class>class</code>

</dl>

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>title</code></dfn> element in the
<span>SuikaWiki/0.10 namespace</span></h3>

<dl class=element>

<dt><span>Category</span>

<dd>None.

<dt><span>Content model</span>

<dd><span>Phrasing content</span>.

<dt><span>Allowed attributes</span>

<dd>None.

</dl>

<p class=ed>...

</div>

<div class=section>
<h3>The <code>aa</code> element in the <span>AA namespace</span></h3>

<p>The <code>aa</code> element in the <span>AA namespace</span> <span
class=ed>...</span> falls into the <span>phrasing content</span>
category for the purpose of the content models in this specification.

<p>The <span>content model</span> of this element <em
class=rfc2119>MAY</em> be considered as <span>phrasing content</span>.

</div>

<div class=section>
<h3>The <dfn title=attr-class><code>class</code></dfn> attribute</h3>

<p>All elements in the <span>HTML namespace</span> have <a
href="http://www.whatwg.org/specs/web-apps/current-work/#classes"><dfn
title=attr-html-class><code>class</code></dfn></a> attribute <span
class=ed>...</span>.

<p>The <dfn title=attr-sw-class><code>class</code></dfn> attribute of
an element in the <span>SuikaWiki/0.9 namespace</span> and
<span>SuikaWiki/0.10 namespace</span> has the same semantics and
requirements as the HTML <code title=attr-html-class>class</code>
attribute.

<p>The <dfn title=attr-aa-class><code>class</code></dfn> attribute of
an element in the <span>AA namespace</span> <em
class=rfc2119>SHOULD</em> be considered as having the same semantics
and requirements as the HTML <code title=attr-html-class>class</code>
attribute.

</div>

<div class=section>
<h3>The <code title=attr-sw-id>id</code> attribute</h3>

<p>The <dfn title=attr-sw-id><code>id</code></dfn> attribute of an
element in the <span>SuikaWiki/0.9 namespace</span> and
<span>SuikaWiki/0.10 namespace</span> has the same semantics and
requirements as the <a
href="http://www.whatwg.org/specs/web-apps/current-work/#the-id-attribute"><code
title>id</code></a> attribute of HTML5 <span class=ed>...</span>.

</div>

<div class=section>

<h3>The <dfn title=attr-sw-anchor><code>anchor</code></dfn> attribute
in the <span>SuikaWiki/0.9 namespace</span></h3>

<p>The <code title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span>, when specified to an
<code>anchor-end</code> element, defines an <dfn>anchor number</dfn>
for the parent element of the <code>anchor-end</code> element, if any.

<p>The attribute <em class=rfc2119>MUST</em> be specified and its
value <em class=rfc2119>MUST</em> be a <span>valid integer</span>.
The integer <em class=rfc2119>MUST</em> have different value from any
other <code title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> specified in an
<code>anchor-end</code> element in the <span>SuikaWiki/0.9
namespace</span> that belongs to the same tree as the first attribute.

<hr>

<p>The <code title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em> be
specified to <code>q</code> elements in the <span>HTML
namespace</span> and in the <span>XHTML2 namespace</span>, as well as
<code>ins</code> and <code>del</code> elements in the <span>HTML
namespace</span>.  The attribute can also be specified to
<code>anchor</code> and <code>anchor-internal</code> elements in the
<span>SuikaWiki/0.9 namespace</span>.

<p>In these cases, the attribute represents the <span>anchor
number</span> of the element referenced.  If the element on which the
attribute is specified is an <code>anchor</code> element, the element
referenced might be found in the document referenced by the element.
Otherwise, the element is in the tree the element belongs to.

<p>If the element on which the attribute is specified is <em>not</em>
an <code>anchor</code> or <code>anchor-internal</code> element, the
attribute has similar semantics to that of the <code title>cite</code>
attribute on the element.  In such a case, the <code
title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MUST NOT</em>
be specified when the <code title>cite</code> attribute is specified.
A user agent <em class=rfc2119>MUST</em> <span
title=ignored>ignore</span> the <code
title=attr-sw-anchor>anchor</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> if the <code title>cite</code>
attribute is specified.

<p>The attribute value <em class=rfc2119>MUST</em> be a <span>valid
integer</span>.  Unless the element is <code>anchor</code>, the
integer <em class=rfc2119>MUST</em> be equal to one of the integer
represented by the <code title=attr-sw-anchor>anchor</code> attribute
in the <span>SuikaWiki/0.9 namespace</span> specified to an
<code>anchor-internal</code> element in the <span>SuikaWiki/0.9
namespace</span> that belongs to the same tree.

</div>

<div class=section>

<h3>The <dfn title=attr-sw-res-scheme><code>resScheme</code></dfn>
attribute in the <span>SuikaWiki/0.9 namespace</span></h3>

<p>The <code title=attr-sw-res-scheme>resScheme</code> attribute in
the <span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em> be
specified to <code>q</code> elements in the <span>HTML
namespace</span> and in the <span>XHTML2 namespace</span>, as well as
<code>ins</code> and <code>del</code> elements in the <span>HTML
namespace</span>.  The attribute can also be specified to an
<code>anchor-external</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn
title=attr-sw-res-parameter><code>resParameter</code></dfn> attribute
in the <span>SuikaWiki/0.9 namespace</span></h3>

<p>The <code title=attr-sw-res-parameter>resParameter</code> attribute
in the <span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em>
be specified to <code>q</code> elements in the <span>HTML
namespace</span> and in the <span>XHTML2 namespace</span>, as well as
<code>ins</code> and <code>del</code> elements in the <span>HTML
namespace</span>.  The attribute can also be specified to an
<code>anchor-external</code> element in the <span>SuikaWiki/0.9
namespace</span>.

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn title=attr-sw-name><code>Name</code></dfn> attribute in
the <span>SuikaWiki/0.9 namespace</span></h3>

<p>The <code title=attr-sw-version>Name</code> attribute in the
<span>SuikaWiki/0.9 namespace</span> <em class=rfc2119>MAY</em> be
specified to an <code>html</code> element in the <span>HTML
namespace</span>.  The attribute can also be specified to an <code
title=element-sw-document>document</code> element in the
<span>SuikaWiki/0.9 namespace</span>.

<p class=ed>...

</div>

<div class=section>

<h3>The <dfn><code>Version</code></dfn> attribute in the
<span>SuikaWiki/0.9 namespace</span></h3>

<p>The <code>Version</code> attribute in the <span>SuikaWiki/0.9
namespace</span> <em class=rfc2119>MAY</em> be specified to an
<code>html</code> element in the <span>HTML namespace</span>.  The
attribute can also be specified to an <code
title=element-sw-document>document</code> element in the
<span>SuikaWiki/0.9 namespace</span>.

<p class=ed>...

</div>

</div>

<div class="section reference normative">
<h2 class=no-num>References</h2>

<dl>

<dt id=ref-AAVOCAB>AAVOCAB

<dd class=ed>...

<dt id=ref-DOM>DOM

<dd class=ed>Web DOM Core? DOM3 Core?

<dt id=ref-HTML5>HTML5

<dd><a href="http://whatwg.org/html5"><cite>HTML 5</cite></a>, WHATWG
Draft Recommendation.

<dt id=ref-MANAKAI>MANAKAI

<dd class=ed>manakai's DOM extensions.

<dt id=ref-RFC2119>RFC2119

<dd class=ed>...

<dt id=ref-XHTML2>XHTML2

<dd class=ed>...

<dt id=ref-XML>XML

<dd class=ed>...

</dl>

</div>
